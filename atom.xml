<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-07-20T01:51:13.563Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>chenMing</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>闭包</title>
    <link href="http://example.com/2021/07/20/%E9%97%AD%E5%8C%85/"/>
    <id>http://example.com/2021/07/20/%E9%97%AD%E5%8C%85/</id>
    <published>2021-07-20T01:07:45.425Z</published>
    <updated>2021-07-20T01:51:13.563Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>闭包是基于词法作用域书写代码时所产生的自然结果</p></blockquote><p>闭包的产生：<br>函数在被定义的地方之外被执行就会产生闭包！！！</p><pre><code class="JavaScript">function foo() &#123;    var a = 2;    function bar()&#123;        console.log(a);    &#125;    return bar;&#125;var bza = foo();baz(); // 2  这就是闭包！</code></pre><p>通常情况下foo执行之后整个内部作用域都会被销毁，因为引擎会销毁不再使用的空间来释放内存空间。</p><p>然而闭包会阻止这一情况的发生，会让作用域依然存在，因为bar函数还在使用foo这个作用域，需要给bar在任何时候执行提供支持。所以foo的作用域不会被销毁，bar依然持有对该作用域的引用，这个引用就是闭包！</p><p>==无论通过何种手段将内部函数传递到所在的词法作用域以外，他都会持有对原始定义作用域的引用，无论在何处执行这个函数都会使用闭包。==</p><pre><code class="JavaScript">function wait(message)&#123;    setTimeout( function timer() &#123;        console.log(message);    &#125;,1000)&#125;wait(&#39;hello&#39;)</code></pre><p>wait执行1000毫秒以后，他的内部作用域并不会消失，还能保持message的引用。</p><p>==只要是使用了回调函数，实际上就是在使用闭包。==</p><h3 id="闭包和循环"><a href="#闭包和循环" class="headerlink" title="闭包和循环"></a>闭包和循环</h3><pre><code class="JavaScript">for(var i = 1;i &lt;= 5; i++;)&#123;    setTimeout(function timer() &#123;        console.log(i);    &#125;,1*1000)&#125;// 每秒一次输出五个6</code></pre><p>这个循环终止的条件是6.条件首次成立的时候i === 6<br>，因此输出的显示是循环结束时i的值。<br>因为这里所用的i，是同一个作用域下的i，所有的函数共享一个i。</p><pre><code class="JavaScript">for(var i = 1;i &lt;= 5; i++;)&#123;    (function() &#123;        setTimeout(function timer() &#123;            console.log(i);        &#125;,1*1000)    &#125;();&#125;//这样也不行</code></pre><p>因为我们的IIFE的作用域是空的，我们使用的依然是外层的i，他要包含一点实质的内容才能够我们使用。</p><pre><code class="JavaScript">for(var i = 1;i &lt;= 5; i++;)&#123;    (function(j) &#123;        setTimeout(function timer() &#123;            console.log(j);        &#125;,j*1000)    &#125;(i);&#125;// 这样就达到我们预期的目的，每秒一个，一次输出1-5</code></pre><h3 id="重返块作用域"><a href="#重返块作用域" class="headerlink" title="重返块作用域"></a>重返块作用域</h3><p>前面说let可以劫持块级作用域，，并且在这个块级作用域中声明一个变量。看下面代码</p><pre><code class="JavaScript">for(var i = 1; i &lt;= 5; i++) &#123;    let j = i;    setTimeout(function timer() &#123;        console.log(j);    &#125;,j*1000)&#125;;</code></pre><p>还可以更完善</p><pre><code class="JavaScript">for(let i = 1; i &lt;= 5; i++) &#123;    setTimeout(function timer() &#123;        console.log(i);    &#125;,i*1000)&#125;;</code></pre><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><pre><code class="JavaScript">function foo()&#123;    var a = &#39;cool&#39;;    var b = [1,2,3];    function bar() &#123;        console.log(a);    &#125;    function baz() &#123;        console.log(b);    &#125;&#125;</code></pre><p>这里并没有明显的闭包，只有两个私有数据变量a和b，以及bar和baz两个内部函数，他们的词法作用域就是闭包，<br>也就是foo（）的内部作用域。</p><pre><code class="JavaScript">function CoolModule() &#123;    var something = &#39;cool&#39;;    var another = [1,2,3];    function doSomething() &#123;        console.log(something));    &#125;    function doAnother() &#123;        console.log(another.join(&quot;!&quot;));    &#125;    return &#123;        doSomething: doSomething,        doAnother: doAnother,    &#125;;&#125;var foo = CoolModule;foo.doSomething(); // coolfoo.doAnother(); // 1!2!3</code></pre><p>首先，CoolModule() 只是一个函数，必须通过调用它来创建一个模块实例，如果不执行外部函数，内部作用域和闭包都无法被创建。</p><p>其次，CoolModule() 返回一个用对象字面量语法来表示的对象，这个返回的对象中含有内部函数，而不是内部数据变量的引用。我们保持内部数据变量是隐藏且私有状态。</p><p>这个对象类型的返回值最终被赋值给外部变量foo，然后我们就可以通过它来访问API中的属性方法。 </p><blockquote><p>模块模式必须具有两个条件</p></blockquote><ol><li>必须有外部的封闭函数，该函数必须至少被调用一次。（每次调用都会创建一个新的模块实例）</li><li>封闭函数必须返回至少一个内部函数，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态。</li></ol><p>一个具有函数属性的对象本身并不是真正的模块。从方便观察角度来看，一个从函数调用所返回的，只有数据属性而没有闭包函数的对象并不是真正的模块。</p><p>改进上面的代码</p><pre><code class="JavaScript">var foo = (function CoolModule() &#123;    var something = &#39;cool&#39;;    var another = [1,2,3];    function doSomething() &#123;        console.log(something));    &#125;    function doAnother() &#123;        console.log(another.join(&quot;!&quot;));    &#125;    return &#123;        doSomething: doSomething,        doAnother: doAnother,    &#125;;&#125;)();foo.doSomething(); // coolfoo.doAnother(); // 1!2!3</code></pre><p>模块是普通函数，因此也可以传参。</p><pre><code class="JavaScript">function CoolModule(id) &#123;    function doSomething() &#123;        console.log(id);    &#125;    return &#123;        doSomething: doSomething,    &#125;;&#125;var foo = CoolModule(&#39;foo&#39;);foo.doSomething(); // foo</code></pre><blockquote><p>模块另一个简单但又强大的用法是命名将要作为公共API返回的对象。</p></blockquote><pre><code class="JavaScript">var foo = (function Cool(id)&#123;    function change() &#123;        publicAPI.identify = identify2;    &#125;;    function identify1() &#123;        console.log(id);    &#125;;    function identify2() &#123;        console.log(id.toUppeCase());    &#125;;    var publicAPI = &#123;        change: change,        identify: identify1    &#125;    return publicAPI;&#125;)(&#39;foo module&#39;);foo.identify(); // foo modulefoo.change();foo.identify(); // FOO MODULE</code></pre><p>通过模块在实例的内部保留的公共API对象的内部引用，可以从内部对模块实例进行修改，包括添加或删除方法，以及修改他们的值。</p><h2 id="现代的模块机制"><a href="#现代的模块机制" class="headerlink" title="现代的模块机制"></a>现代的模块机制</h2><p>创建一个模块</p><pre><code class="JavaScript">var MyModules = (function Manager()&#123;    // 存储方法    var modules = &#123;&#125;;        // 添加方法    function define(name,deps,impl)&#123;        for(var i = 0;i &lt; deps.length; i++) &#123;            deps[i] = modules[deps[i]];        &#125;        modules[name] = impl.apply(impl,deps);    &#125;        // 根据名字获取方法    function get(name) &#123;        return modules[name];    &#125;        // 返回内部函数（方法）    return &#123;        define: define,        get: get    &#125;&#125;)()</code></pre><p>Function.apply(obj,args)方法能接收两个参数</p><p>obj：这个对象将代替Function类里this对象</p><p>args：这个是数组，它将作为参数传给Function(args–&gt;arguments)</p><p>使用它来定义模块：</p><pre><code class="JavaScript">MyModules.define(&quot;bar&quot;,[], function() &#123;    function hello(who) &#123;        return &quot;let me introduce:&quot; + who;    &#125;    retrun &#123;        hello : hello    &#125;;&#125;);MyModules.define(&quot;foo&quot;,[&#39;bar&#39;], function(bar) &#123;    var hungry = &#39;hippo&#39;;    function awesome(who) &#123;        console.log(bar.hello(hungry).toUpperCase());    &#125;    retrun &#123;        awesome : awesome    &#125;;&#125;);var bar = MyModules.get(&#39;bar&#39;);var foo = MyModules.get(&#39;foo&#39;);console.log(bar.hello(&#39;hippo&#39;));// let me introduce: hippofoo.awesome(); // 大写的</code></pre><p>foo 和 bar 都是通过一个返回的公共的API的函数来定义的。foo 甚至接受 bar 的实例作为依赖参数，并且相应地使用它。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;闭包是基于词法作用域书写代码时所产生的自然结果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;闭包的产生：&lt;br&gt;函数在被定义的地方之外被执行就会产生闭包！！！&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;JavaScript&quot;&gt;function fo</summary>
      
    
    
    
    
    <category term="javaScript" scheme="http://example.com/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>浅拷贝与深拷贝</title>
    <link href="http://example.com/2021/07/20/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>http://example.com/2021/07/20/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</id>
    <published>2021-07-20T01:07:45.425Z</published>
    <updated>2021-07-20T01:51:44.778Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>浅拷贝与深拷贝 (深拷贝和浅拷贝是只针对Object和Array这样的引用数据类型的)</p></blockquote><p><strong>浅拷贝只复制指向某个对象的指针而不复制对象本身，新旧对象还是共享同一块内存。</strong><br><strong>但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。</strong></p><blockquote><p>赋值和浅拷贝的区别</p></blockquote><ul><li>当我们把一个对象赋值给一个新的变量时，赋的其实是该对象的在栈中的地址，而不是堆中的数据。也就是两个对象指向的是同一个存储空间，无论哪个对象发生改变，其实都是改变的存储空间的内容，因此，两个对象是联动的。</li><li>浅拷贝是按位拷贝对象，它会创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值；如果属性是内存地址（引用类型），拷贝的就是内存地址 ，因此如果其中一个对象改变了这个地址，就会影响到另一个对象。即：默认拷贝构造函数只是对对象进行浅拷贝复制(逐个成员依次拷贝)，即只复制对象空间而不复制资源。</li></ul><blockquote><p>浅拷贝的实现方式</p></blockquote><p><strong>.Object.assign()</strong><br>Object.assign() 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。但是 Object.assign()进行的是浅拷贝，拷贝的是对象的属性的引用，而不是对象本身。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;浅拷贝与深拷贝 (深拷贝和浅拷贝是只针对Object和Array这样的引用数据类型的)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;浅拷贝只复制指向某个对象的指针而不复制对象本身，新旧对象还是共享同一块内存。&lt;/strong&gt;&lt;br&gt;</summary>
      
    
    
    
    
    <category term="javaScript" scheme="http://example.com/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>this词法</title>
    <link href="http://example.com/2021/07/20/this%E8%AF%8D%E6%B3%95/"/>
    <id>http://example.com/2021/07/20/this%E8%AF%8D%E6%B3%95/</id>
    <published>2021-07-20T01:07:45.424Z</published>
    <updated>2021-07-20T01:52:28.509Z</updated>
    
    <content type="html"><![CDATA[<p>ES6添加了一个特殊的词法形式的函数声明，叫做箭头函数，箭头函数在涉及this绑定的行为和普通函数的行为完全不一样，他放弃了所有的普通函数this绑定的规则，取而代之的是用当前的词法作用域覆盖了this原本的值。</p><pre><code class="JavaScript">var obj = &#123;    count: 0,    cool: function coolFn() &#123;        if(this.count &lt; 1) &#123;            setTimeout(() =&gt; &#123;                this.count++;                console.log(&#39;awesome?&#39;);            &#125;,1000);        &#125;    &#125;&#125;obj.cool();//awesome?</code></pre><p>这个箭头函数中的this直接是cool()的this绑定（因此调用它并不会出错）</p><p>它将程序员们经常犯的一个错误给标准化了，也就是混淆了this绑定规则和词法作用域规则。</p><p>另一个导致箭头函数不够理想的原因是他不是具名的，而是一个匿名函数。</p><h3 id="误解："><a href="#误解：" class="headerlink" title="误解："></a>误解：</h3><ol><li>人们很容易把this理解成指向函数自身。那么为什么函数要从内部引用函数自身呢？常见的原因是递归（从函数内部调用这个函数）或者可以写在第一次被调用后自己解除绑定事件处理器。</li><li>新手通常会认为，既然把函数看做一个对象，那就可以在调用函数时储存状态。</li></ol><p>call</p><pre><code class="JavaScript">function foo(num) &#123;    console.log(&quot;foo&quot; + num);    this.count ++;&#125;foo.count = 0;var i;for(i = 0; i &lt; 10; i++)&#123;    if(i &gt; 5) &#123;        // 使用call(...) 可以确保this指向函数本身        foo.call(foo, i)    &#125;&#125;// foo: 6// foo: 7// foo: 8// foo: 9cnosole.log(foo.count); // 4</code></pre><h3 id="它的作用域"><a href="#它的作用域" class="headerlink" title="它的作用域"></a>它的作用域</h3><p>还有一种常见的错误是，this指向函数的作用域。这个问题在某中情况下是正确的，但是有时候又是错误的。需要明确的是this在任何情况下都不指向函数的词法作域。</p><pre><code class="JavaScript">function foo()&#123;    var a = 2;    this.bar(); //  能调用到bar也是意外，正常应该通过词法作用域，直接执行&#125;function bar()&#123;    console.log(this.a)&#125;foo();  // a not defined</code></pre><p>==当你想把this和词法作用域的查找混合使用的时候，一定要提醒自己这是无法实现的==</p><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>this不是在写代码时候绑定的而是代码在执行的时候绑定的，它的上下文取决于函数调用时的各种条件。</p><p>this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。</p><p>==当一个函数被执行时，会创建一个活动记录（有时候也被称之为执行上下文）。这个记录会包含函数在哪里被调用、函数的调用方式、传入参数等信息。this就是这个记录的一个属性，会在函数执行的过程中调用到。==</p><p>this实际上是在函数被调用的时候发生绑定，他指向什么完全取决于函数在哪里被调用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ES6添加了一个特殊的词法形式的函数声明，叫做箭头函数，箭头函数在涉及this绑定的行为和普通函数的行为完全不一样，他放弃了所有的普通函数this绑定的规则，取而代之的是用当前的词法作用域覆盖了this原本的值。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;JavaScri</summary>
      
    
    
    
    
    <category term="javaScript" scheme="http://example.com/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>作用域是什么-词法作用域</title>
    <link href="http://example.com/2021/07/20/%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%98%AF%E4%BB%80%E4%B9%88-%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://example.com/2021/07/20/%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%98%AF%E4%BB%80%E4%B9%88-%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F/</id>
    <published>2021-07-20T01:07:45.424Z</published>
    <updated>2021-07-20T01:52:01.516Z</updated>
    
    <content type="html"><![CDATA[<h2 id="作用域是什么"><a href="#作用域是什么" class="headerlink" title="作用域是什么"></a>作用域是什么</h2><ul><li>存储变量的规则<br>存储在哪里？怎么获取？</li></ul><p>var a = 2</p><p>为一个变量分配内存，名字为a，将值为2保存进这个变量（不完全正确）</p><ol><li>var a 编译器会询问作用域是否已经存在这样一个变量存在于同一个作用域内，如果有编译器会忽略该声明，继续编译，如果没有，他会要求作用域在当前作用域内声明一个新的变量，并命名为a。</li><li>接下载编译器会为引擎生成运行时所需要的代码，这些代码被用来处理a = 2 的操作，引擎运行时会询问作用域当前作用域集合中是否存在叫做a的变量，如果有，就是用该变量，如果没有会再向再外层的作用域询问，最终会到全局作用域。找到后会将2赋值给它，找不到就会抛出异常</li></ol><blockquote><p>总结：变量的赋值操作会执行两个动作，编译器在作用域中声明，运行时引擎会查找该变量并进行赋值。</p></blockquote><blockquote><p>编译器：LHS查询   查找类型RHS（LHS，RHS），当变量出现在赋值操作的左侧时进行进行LHS查询，出现在右侧时进行RHS查询。</p></blockquote><p>console.log（a） 执行的是RHS，要去找a的值；</p><p>a = 2 执行的是LHS 要为=2找到赋值的目标。</p><p>LHS：赋值操作的目标是谁；目的是对变量进行赋值</p><p>RHS：谁是赋值操作的源头；目的是获取变量的值</p><p>ReferenceError 这个错误是找不到定义的变量</p><h2 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h2><p>作用域有两种主要的工作模型：词法作用域，动态作用域。</p><p>词法作用域：定义在词法阶段的作用域，就是由你写代码时将变量和块作用域写在哪里决定的，因此词法解析器处理代码时会保持作用域不变（大部分情况下是这样）</p><p>词法欺骗：</p><blockquote><p>eval( )</p></blockquote><pre><code class="JavaScript">function foo(str, a) &#123;    eval(str); // 欺骗    console.log(a, b);&#125;var b = 2;foo(&#39;val b = 3;&#39;, 1); // 1, 3</code></pre><blockquote><p>with(){}</p></blockquote><pre><code class="JavaScript">function foo(obj) &#123;    with(obj)&#123;        a = 2;    &#125;&#125;var o1 = &#123;    a: 3&#125;var o2 = &#123;    a: 3&#125;foo(o1);console.log(o1.a) // 2foo(o2);console.log(o2.a) // undefinedconsole.log(a) // 2  ==a被泄漏到全局上面去了==</code></pre><blockquote><p>总结<br>eval（）函数如果接受了一个或多个声明的代码，就会修改其所处的词法作用域；<br>with声明实际上是根据传递给他的对象凭空创建了一个全新的词法作用域</p></blockquote><p>eval，with会降低性能，所以不建议使用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;作用域是什么&quot;&gt;&lt;a href=&quot;#作用域是什么&quot; class=&quot;headerlink&quot; title=&quot;作用域是什么&quot;&gt;&lt;/a&gt;作用域是什么&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;存储变量的规则&lt;br&gt;存储在哪里？怎么获取？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;var a = 2&lt;/</summary>
      
    
    
    
    
    <category term="javaScript" scheme="http://example.com/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>函数中的作用域</title>
    <link href="http://example.com/2021/07/20/%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%BF%AB/"/>
    <id>http://example.com/2021/07/20/%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%BF%AB/</id>
    <published>2021-07-20T01:07:45.424Z</published>
    <updated>2021-07-20T01:52:48.600Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数中的作用域"><a href="#函数中的作用域" class="headerlink" title="函数中的作用域"></a>函数中的作用域</h2><p>js有基于函数的作用域，每声明一个函数都会为其自身创建一个气泡，可以在附属气泡里获取外层的变量，但是不能从外层气泡中获取附属气泡种的变量</p><h2 id="隐藏内部实现"><a href="#隐藏内部实现" class="headerlink" title="隐藏内部实现"></a>隐藏内部实现</h2><blockquote><p>暴露在外面的写法，很不安全</p></blockquote><pre><code class="JavaScript">function foo(a) &#123;    b = a + fff(a * 2);    console.log(b * 3);&#125;function fff(a) &#123;    return a - 1;&#125;var b;foo(2) // 15</code></pre><blockquote><p>隐藏的写法</p></blockquote><pre><code class="JavaScript">function foo(a) &#123;    function fff(a) &#123;        return a - 1;    &#125;    var b;    b = a + fff(a * 2);    console.log(b * 3);&#125;foo(2) // 15</code></pre><blockquote><p>规避冲突，<br>可以避免同名标识符之间的冲突，避免被覆盖</p></blockquote><p>方法：</p><ol><li>全局命名空间，在全局声明一个独特的变量，通常是一个对象，所有需要暴露给外界的功能都会成为这个对象的属性，而不是将自己的标识符暴露在顶级的词法作用域种。</li><li>模块管理，从众多模块中挑选一个来使用，任何库都无需将标识符加入到全局作用域中。</li></ol><h2 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h2><p>在任意代码片段外部添加包装函数都可以将内部的变量和函数定义‘隐藏’起来，外部作用域无法访问包装函数内部的任何内容</p><p>通过定义一个函数来达到是变量在函数作用域之内，虽然可以解决问题，但是并不理想，因为这个函数名称本身污染了所在的作用域，其次是必须通过显式的调用这个函数才能运行其中的代码。</p><pre><code class="JavaScript">var a = 2;(function foo()&#123;    var a = 3;    console.log( a ); // 3&#125;)();console.log( a ); // 2</code></pre><p>这样函数会被当作函数表达式而不是一个标准的函数声明来处理。– 如果function是声明中的第一个第一个词，那么就是函数声明，否则就是函数表达式。</p><p>函数表达式和函数声明最大的区别是它们的名称标识符将会绑定在何处。  foo只能在所代表的位置中被访问，外部不行。</p><h2 id="匿名和具名"><a href="#匿名和具名" class="headerlink" title="匿名和具名"></a>匿名和具名</h2><blockquote><p>匿名函数表达式</p></blockquote><pre><code class="JavaScript">setTimeout( function()&#123;    console.log(&#39;aaa&#39;);&#125;,1000);</code></pre><p>fun没有标识符，函数声明则是不可以省略函数名称</p><ol><li>匿名函数在栈追踪中不会显示出有意义的函数名称，使得调用很困难。</li><li>如果没有函数名，需要引用的时候就只能使用已经过期的arguments.callee引用，比如在递归中</li><li>匿名函数省略了对于代码的可读性/可理解性很重要的函数名</li></ol><p>行内函数表达式</p><pre><code class="JavaScript">setTimeout( function timeoutHandler()&#123;    console.log(&#39;aaa&#39;);&#125;,1000);</code></pre><h2 id="立即执行函数表达式"><a href="#立即执行函数表达式" class="headerlink" title="立即执行函数表达式"></a>立即执行函数表达式</h2><pre><code class="JavaScript">var a = 2;(function foo()&#123;    var a = 3;    console.log( a ); // 3&#125;)();console.log( a ); // 2</code></pre><p>第一个（）将函数变成了表达式，第二个（）执行了这个函数</p><blockquote><p>IIFE代表立即执行函数表达式</p></blockquote><pre><code class="JavaScript">var a = 2;(function IIFE()&#123; //传统的形式    var a = 3;    console.log( a ); // 3&#125;)();console.log( a ); // 2</code></pre><p>==以上两种写法功能上是一样的==</p><p>用途：</p><p>可以传参数进去</p><pre><code class="JavaScript">var a = 2;(function IIFE(global)&#123; //传统的形式    var a = 3;    console.log( a ); // 3    console.log( global.a ); // 3&#125;)(window);console.log( a ); // 2</code></pre><h2 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h2><p>除了函数能产生一个作用域气泡，for循环，if，with,try/catch等都会产生一个作用域气泡。</p><p>块作用域指的是变量和函数不仅可以属于所处的作用域，也可以属于某个代码块，通常指{..}的内部</p><blockquote><p>var</p></blockquote><p>其实val一个变量无论在什么地方，都会提升到全局变量，把它写在作用域内部，只是为了风格更易读而伪装出的形式上的块作用域，如果使用这种，要确保在其他地方没有重复的使用同名的变量。</p><blockquote><p>let</p></blockquote><p>ES6引入了关键字let，可以将变量绑定到所在的任意作用域中，为其声明的变量隐式的劫持了所在的块作用域。</p><p>let进行声明的不会在代码在块作用域中进行提升，声明的代码在运行前，声明并不‘存在’。</p><pre><code class="JavaScript">&#123;    console.log(a); // ReferenceError(没有找到)    let a = 2;&#125;</code></pre><p>let 声明附属于一个新的作用域而不是当前函数作用域（也不属于全局作用域）</p><blockquote><p>const</p></blockquote><p>同样可以用来创建块作用域变量，但其值是固定的，之后的任何试图修改值的操作都会引起错误。</p><pre><code class="JavaScript">var foo = true;if(foo)&#123;    var a = 2;    const b = 3;    a = 4; // 正确    b = 6; // 错误&#125;console.log(a) // 4console.log(b) // ReferenceError</code></pre><p>任何声明在某个作用域内部的变量，都将附属于这个作用域</p><h2 id="小思考"><a href="#小思考" class="headerlink" title="小思考"></a>小思考</h2><pre><code class="JavaScript">a = 2;val a;console.log(a);//2</code></pre><p>输出2的原因是：声明会提升，也就是先声明再赋值，在执行查询</p><pre><code class="JavaScript">console.log(a); // undefindvar a = 2;// 执行顺序val a;console.log(a); // undefinda = 2;</code></pre><p>原因：函数声明会提升，然后执行查询，此时是没有赋值的，所以是undefind</p><pre><code class="JavaScript">foo(); // 不是ReferenceError，而是TypeEerrorvar foo = funcyion bar() &#123;    //...&#125;;</code></pre><p>原因：函数表达式不会被提升</p><blockquote><p>函数优先</p></blockquote><p>函数声明和变量声明都会被提升，但是一个值得注意的细节是函数会被首先提升，然后才是变量。</p><pre><code class="JavaScript">foo(); //1var foo;function foo() &#123;    console.log(1);&#125;foo = function() &#123;    console.log(2);&#125;</code></pre><p>输出的是1而不是2是因为函数声明先被提升到上面，然后在执行。var foo 尽管出现在function foo… 之前，但是他是重复声明会被忽略。</p><blockquote><p>后面的声明会覆盖掉前面的声明</p></blockquote><pre><code class="JavaScript">foo(); //3function foo() &#123;    console.log(1);&#125;var foo = function() &#123;    console.log(2);&#125;function foo() &#123;    console.log(3);&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;函数中的作用域&quot;&gt;&lt;a href=&quot;#函数中的作用域&quot; class=&quot;headerlink&quot; title=&quot;函数中的作用域&quot;&gt;&lt;/a&gt;函数中的作用域&lt;/h2&gt;&lt;p&gt;js有基于函数的作用域，每声明一个函数都会为其自身创建一个气泡，可以在附属气泡里获取外层的变量，但是</summary>
      
    
    
    
    
    <category term="javaScript" scheme="http://example.com/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>markdown 写法备注</title>
    <link href="http://example.com/2021/07/20/remarks/"/>
    <id>http://example.com/2021/07/20/remarks/</id>
    <published>2021-07-20T01:07:45.423Z</published>
    <updated>2021-07-20T01:52:20.101Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>标题</p></blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><blockquote><p>无序列表</p></blockquote><ul><li>1</li></ul><ul><li>2</li></ul><ul><li>3</li></ul><blockquote><p>有序列表</p></blockquote><ol><li>列表  </li><li>列表</li><li>列表</li></ol><blockquote><p>分割线</p></blockquote><hr><hr><blockquote><p>代码块 ```</p></blockquote><blockquote><p>文本样式</p></blockquote><p>  <em>字体倾斜</em>                &gt;        <em>字体倾斜</em><br>  <em>字体倾斜</em><br>  <strong>字体加粗</strong>              &gt;        <strong>字体加粗</strong><br>  <strong>字体加粗</strong><br>  <del>字体删除</del>              &gt;        <del>字体删除</del><br> ! 符号与字体之间不要有空格</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;标题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一级标题&quot;&gt;&lt;a href=&quot;#一级标题&quot; class=&quot;headerlink&quot; title=&quot;一级标题&quot;&gt;&lt;/a&gt;一级标题&lt;/h1&gt;&lt;h2 id=&quot;二级标题&quot;&gt;&lt;a href=&quot;#二级标题</summary>
      
    
    
    
    
    <category term="markdown" scheme="http://example.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>js数据类型</title>
    <link href="http://example.com/2021/07/20/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://example.com/2021/07/20/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-07-20T01:07:45.423Z</published>
    <updated>2021-07-20T01:52:11.097Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>基本数据类型、引用数据类型</p></blockquote><p>ECMAScript包括两个不同类型的值：基本数据类型和引用数据类型。<br>基本数据类型指的是简单的数据段，引用数据类型指的是有多个值构成的对象。<br>当我们把变量赋值给一个变量时，解析器首先要确认的就是这个值是基本类型值还是引用类型值。</p><h3 id="常见的基本数据类型"><a href="#常见的基本数据类型" class="headerlink" title="常见的基本数据类型"></a>常见的基本数据类型</h3><p>Number、String 、Boolean、Null和Undefined。基本数据类型是按值访问的，因为可以直接操作保存在变量中的实际值。示例：<br>　　var a = 10;<br>　　var b = a;<br>　　b = 20;<br>　　console.log(a); // 10值<br>　　上面，b获取的是a值得一份拷贝，虽然，两个变量的值相等，但是两个变量保存了两个不同的基本数据类型值。<br>　　b只是保存了a复制的一个副本。所以，b的改变，对a没有影响。</p><h3 id="引用类型数据"><a href="#引用类型数据" class="headerlink" title="引用类型数据"></a>引用类型数据</h3><p>  也就是对象类型Object type，比如：Object 、Array 、Function 、Data等。<br>　　javascript的引用数据类型是保存在堆内存中的对象。<br>　　与其他语言的不同是，你不可以直接访问堆内存空间中的位置和操作堆内存空间。只能操作对象在栈内存中的引用地址。<br>　　所以，引用类型数据在栈内存中保存的实际上是对象在堆内存中的引用地址。通过这个引用地址可以快速查找到保存中堆内存中的对象。<br>　　var obj1 = new Object();<br>　　var obj2 = obj1;<br>　　obj2.name = “我有名字了”;<br>　　console.log(obj1.name); // 我有名字了<br>　　说明这两个引用数据类型指向了同一个堆内存对象。obj1赋值给onj2，实际上这个堆内存对象在栈内存的引用地址复制了一份给了obj2，<br>　　但是实际上他们共同指向了同一个堆内存对象。实际上改变的是堆内存对象。</p><blockquote><p>总结区别</p></blockquote><h3 id="声明变量时不同的内存分配："><a href="#声明变量时不同的内存分配：" class="headerlink" title="声明变量时不同的内存分配："></a>声明变量时不同的内存分配：</h3><p>　　1）原始值：存储在栈（stack）中的简单数据段，也就是说，它们的值直接存储在变量访问的位置。<br>　　　　这是因为这些原始类型占据的空间是固定的，所以可将他们存储在较小的内存区域 – 栈中。这样存储便于迅速查寻变量的值。<br>　　2）引用值：存储在堆（heap）中的对象，也就是说，存储在变量处的值是一个指针（point），指向存储对象的内存地址。<br>　　　  这是因为：引用值的大小会改变，所以不能把它放在栈中，否则会降低变量查寻的速度。相反，放在变量的栈空间中的值是该对象存储在堆中的地址。<br>　　　  地址的大小是固定的，所以把它存储在栈中对变量性能无任何负面影响。</p><h3 id="不同的内存分配机制也带来了不同的访问机制"><a href="#不同的内存分配机制也带来了不同的访问机制" class="headerlink" title="不同的内存分配机制也带来了不同的访问机制"></a>不同的内存分配机制也带来了不同的访问机制</h3><p>　　　<br>　　1）在javascript中是不允许直接访问保存在堆内存中的对象的，所以在访问一个对象时，<br>　　　　首先得到的是这个对象在堆内存中的地址，然后再按照这个地址去获得这个对象中的值，这就是传说中的按引用访问。<br>　　2）而原始类型的值则是可以直接访问到的。<br>　　<br>　　c 复制变量时的不同<br>　　<br>　　1）原始值：在将一个保存着原始值的变量复制给另一个变量时，会将原始值的副本赋值给新变量，此后这两个变量是完全独立的，他们只是拥有相同的value而已。<br>　　2）引用值：在将一个保存着对象内存地址的变量复制给另一个变量时，会把这个内存地址赋值给新变量，<br>　　　　也就是说这两个变量都指向了堆内存中的同一个对象，他们中任何一个作出的改变都会反映在另一个身上。<br>　　　　（这里要理解的一点就是，复制对象时并不会在堆内存中新生成一个一模一样的对象，只是多了一个保存指向这个对象指针的变量罢了）。多了一个指针　</p><h3 id="参数传递的不同（把实参复制给形参的过程）"><a href="#参数传递的不同（把实参复制给形参的过程）" class="headerlink" title="参数传递的不同（把实参复制给形参的过程）"></a>参数传递的不同（把实参复制给形参的过程）</h3><p>　　首先我们应该明确一点：ECMAScript中所有函数的参数都是按值来传递的。<br>　　但是为什么涉及到原始类型与引用类型的值时仍然有区别呢？还不就是因为内存分配时的差别。 　<br>　　1）原始值：只是把变量里的值传递给参数，之后参数和这个变量互不影响。<br>　　2）引用值：对象变量它里面的值是这个对象在堆内存中的内存地址，这一点你要时刻铭记在心！<br>　　　　因此它传递的值也就是这个内存地址，这也就是为什么函数内部对这个参数的修改会体现在外部的原因了，因为它们都指向同一个对象。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;基本数据类型、引用数据类型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ECMAScript包括两个不同类型的值：基本数据类型和引用数据类型。&lt;br&gt;基本数据类型指的是简单的数据段，引用数据类型指的是有多个值构成的对象。&lt;br&gt;当我们把变量赋值给一个</summary>
      
    
    
    
    
    <category term="javaScript" scheme="http://example.com/tags/javaScript/"/>
    
  </entry>
  
</feed>
