<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>chenMing</title>
  
  <subtitle>(ง •̀_•́)ง</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-05-24T02:01:01.714Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>chenMing</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pnpm</title>
    <link href="http://example.com/2023/05/24/%E5%B7%A5%E7%A8%8B%E5%8C%96/pnpm/"/>
    <id>http://example.com/2023/05/24/%E5%B7%A5%E7%A8%8B%E5%8C%96/pnpm/</id>
    <published>2023-05-24T01:59:55.246Z</published>
    <updated>2023-05-24T02:01:01.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pnpm"><a href="#pnpm" class="headerlink" title="pnpm"></a>pnpm</h1><p>pnpm是一种新起的包管理器，从npm的下载量看，目前还没有超过yarn，但它的实现方式值得主流包管理器学习，某些开发者极力推荐使用pnpm</p><p>从结果上来看，它具有以下优势：</p><ol><li>目前，安装效率高于npm和yarn的最新版</li><li>极其简洁的node_modules目录</li><li>避免了开发时使用间接依赖的问题</li><li>能极大的降低磁盘空间的占用</li></ol><h2 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h2><p>全局安装pnpm</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install -g pnpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后在使用时，只需要把npm替换为pnpm即可</p><p>如果要执行安装在本地的CLI，可以使用pnpx，它和 npx 的功能完全一样，唯一不同的是，在使用pnpx执行一个需要安装的命令时，会使用pnpm进行安装</p><blockquote><p>比如<code>npx mocha</code>执行本地的<code>mocha</code>命令时，如果<code>mocha</code>没有安装，则npx会自动的、临时的安装mocha，安装好后，自动运行mocha命令</p></blockquote><h2 id="pnpm原理"><a href="#pnpm原理" class="headerlink" title="pnpm原理"></a>pnpm原理</h2><ol><li><p>同 yarn 和 npm 一样，pnpm 仍然使用缓存来保存已经安装过的包，以及使用 pnpm-lock.yaml 来记录详细的依赖版本</p></li><li><p>不同于 yarn 和 npm， pnpm 使用<strong>符号链接和硬链接</strong>（可将它们想象成快捷方式）的做法来放置依赖，从而规避了从缓存中拷贝文件的时间，使得安装和卸载的速度更快</p></li><li><p>由于使用了<strong>符号链接和硬链接</strong>，pnpm可以规避windows操作系统路径过长的问题，因此，它选择使用树形的依赖结果，有着几乎完美的依赖管理。也因为如此，项目中只能使用直接依赖，而不能使用间接依赖</p></li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>由于 pnpm 会改动 node_modules 目录结构，使得每个包只能使用直接依赖，而不能使用间接依赖，因此，如果使用 pnpm 安装的包中包含间接依赖，则会出现问题(<strong>现在不会了，除非使用了绝对路径</strong>)</p><p>由于 pnpm 超高的安装卸载效率，越来越多的包开始修正之前的间接依赖代码</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pnpm&quot;&gt;&lt;a href=&quot;#pnpm&quot; class=&quot;headerlink&quot; title=&quot;pnpm&quot;&gt;&lt;/a&gt;pnpm&lt;/h1&gt;&lt;p&gt;pnpm是一种新起的包管理器，从npm的下载量看，目前还没有超过yarn，但它的实现方式值得主流包管理器学习，某些开发者极力</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>yarn</title>
    <link href="http://example.com/2023/05/17/%E5%B7%A5%E7%A8%8B%E5%8C%96/yarn/"/>
    <id>http://example.com/2023/05/17/%E5%B7%A5%E7%A8%8B%E5%8C%96/yarn/</id>
    <published>2023-05-16T16:00:00.000Z</published>
    <updated>2023-05-17T05:57:08.796Z</updated>
    
    <content type="html"><![CDATA[<h1 id="yarn-简介"><a href="#yarn-简介" class="headerlink" title="yarn 简介"></a>yarn 简介</h1><blockquote><p>yarn 官网：<a href="https://www.yarnpkg.com/zh-Hans/">https://www.yarnpkg.com/zh-Hans/</a></p></blockquote><p>yarn 是由Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具，<strong>它仍然使用 npm 的registry</strong>，不过提供了全新 CLI 来对包进行管理</p><p>过去，yarn 的出现极大的抢夺了 npm 的市场，甚至有人戏言，npm 只剩下一个 registry 了。</p><p>之所以会出现这种情况，是因为在过去，npm 存在下面的问题：</p><ul><li>依赖目录嵌套层次深：过去，npm 的依赖是嵌套的，这在 windows 系统上是一个极大的问题，由于众所周知的原因，windows 系统无法支持太深的目录</li><li>下载速度慢<ul><li>由于嵌套层次的问题，所以npm对包的下载只能是串行的，即前一个包下载完后才会下载下一个包，导致带宽资源没有完全利用</li><li>多个相同版本的包被重复的下载</li></ul></li><li>控制台输出繁杂：过去，npm 安装包的时候，每安装一个依赖，就会输出依赖的详细信息，导致一次安装有大量的信息输出到控制台，遇到错误极难查看</li><li>工程移植问题：由于 npm 的版本依赖可以是模糊的，可能会导致工程移植后，依赖的确切版本不一致。</li></ul><p>针对上述问题，yarn 从诞生那天就已经解决，它用到了以下的手段：</p><ul><li>使用扁平的目录结构</li><li>并行下载</li><li>使用本地缓存</li><li>控制台仅输出关键信息</li><li>使用yanr-lock文件记录确切依赖</li></ul><p>不仅如此，yarn还优化了以下内容：</p><ul><li>增加了某些功能强大的命令</li><li>让既有的命令更加语义化</li><li>本地安装的CLI工具可以使用 yarn 直接启动</li><li>将全局安装的目录当作一个普通的工程，生成package.json文件，便于全局安装移植</li></ul><p>yarn 的出现给 npm 带来了巨大的压力，很快，npm 学习了 yarn 先进的理念，不断的对自身进行优化，到了目前的npm6版本，几乎完全解决了上面的问题：</p><ul><li>目录扁平化</li><li>并行下载</li><li>本地缓存</li><li>使用package-lock记录确切依赖</li><li>增加了大量的命令别名</li><li>内置了npx，可以启动本地的CLI工具</li><li>极大的简化了控制台输出</li></ul><p><strong>总结</strong></p><p>npm6 之后，可以说npm已经和yarn非常接近，甚至没有差距了。很多新的项目，又重新从yarn转回到npm。</p><p>这两个包管理器是目前的主流，都必须要学习。</p><h1 id="yarn-的核心命令"><a href="#yarn-的核心命令" class="headerlink" title="yarn 的核心命令"></a>yarn 的核心命令</h1><ol><li><strong>初始化</strong></li></ol><p>初始化：<code>yarn init [--yes/-y]</code></p><ol start="2"><li><strong>安装</strong></li></ol><p>添加指定包：<code>yarn [global] add package-name [--dev/-D] [--exact/-E]</code></p><p>安装package.json中的所有依赖：<code>yarn install [--production/--prod]</code></p><ol start="3"><li><strong>脚本和本地CLI</strong></li></ol><p>运行脚本：<code>yarn run 脚本名</code> </p><blockquote><p>start、stop、test可以省略run</p></blockquote><p>运行本地安装的CLI：<code>yarn run CLI名</code></p><ol start="4"><li><strong>查询</strong></li></ol><p>查看bin目录：<code>yarn [global] bin</code></p><p>查询包信息：<code>yarn info 包名 [子字段]</code></p><p>列举已安装的依赖：<code>yarn [global] list [--depth=依赖深度]</code></p><blockquote><p>yarn的list命令和npm的list不同，yarn输出的信息更加丰富，包括顶级目录结构、每个包的依赖版本号</p></blockquote><ol start="5"><li><strong>更新</strong></li></ol><p>列举需要更新的包：<code>yarn outdated</code></p><p>更新包：<code>yarn [global] upgrade [包名]</code></p><ol start="6"><li><strong>卸载</strong></li></ol><p>卸载包：<code>yarn remove 包名</code></p><h1 id="yarn-的特别礼物"><a href="#yarn-的特别礼物" class="headerlink" title="yarn 的特别礼物"></a>yarn 的特别礼物</h1><p>在终端命令上，yarn不仅仅是对npm的命令做了一个改名，还增加了一些原本没有的命令，这些命令在某些时候使用起来非常方便</p><ol><li><strong>yarn check</strong></li></ol><p>使用<code>yarn check</code>命令，可以验证package.json文件的依赖记录和lock文件是否一致</p><p>这对于防止篡改非常有用</p><ol start="2"><li><strong>yarn audit</strong></li></ol><p>使用<code>yarn audit</code>命令，可以检查本地安装的包有哪些已知漏洞，以表格的形式列出，漏洞级别分为以下几种：</p><ul><li>INFO：信息级别</li><li>LOW: 低级别</li><li>MODERATE：中级别</li><li>HIGH：高级别</li><li>CRITICAL：关键级别</li></ul><ol start="3"><li><strong>yarn why</strong></li></ol><p>使用<code>yarn why 包名</code>命令，可以在控制台打印出为什么安装了这个包，哪些包会用到它</p><ol start="4"><li><strong>yarn create</strong></li></ol><p>非常有趣的命令</p><p>今后，我们会学习一些脚手架，所谓脚手架，就是使用一个命令来搭建一个工程结构</p><p>过去，我们都是使用如下的做法：</p><ol><li>全局安装脚手架工具</li><li>使用全局命令搭建脚手架</li></ol><p>由于大部分脚手架工具都是以<code>create-xxx</code>的方式命名的，比如react的官方脚手架名称为<code>create-react-app</code></p><p>因此，可以使用<code>yarn create</code>命令来一步完成安装和搭建</p><p>例如：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yarn create react-app my-app# 等同于下面的两条命令yarn global add create-react-appcreate-react-app my-app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;yarn-简介&quot;&gt;&lt;a href=&quot;#yarn-简介&quot; class=&quot;headerlink&quot; title=&quot;yarn 简介&quot;&gt;&lt;/a&gt;yarn 简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;yarn 官网：&lt;a href=&quot;https://www.yarnpkg.</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/05/04/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E5%8C%85%E7%9A%84%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E3%80%81%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2023/05/04/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E5%8C%85%E7%9A%84%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E3%80%81%E4%BD%BF%E7%94%A8/</id>
    <published>2023-05-04T06:35:53.748Z</published>
    <updated>2023-05-11T01:25:02.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="包的安装"><a href="#包的安装" class="headerlink" title="包的安装"></a>包的安装</h1><blockquote><p>安装（install）即下载包<br>由于 npm 的官方 registry 服务器位于国外，可能受网速影响导致下载缓慢或失败。因此，安装好 npm 之后，需要重新设置 registry 的地址为国内地址。目前，淘宝 <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a> 提供了国内的 registry 地址，先设置到该地址。设置方式为<code>npm config set registry https://registry.npm.taobao.org</code>。设置好后，通过命令<code>npm config get registry</code>进行检查</p></blockquote><p>npm 安装一个包，分为两种安装方式：</p><ol><li>本地安装</li><li>全局安装</li></ol><h2 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h2><p>使用命令<code>npm install 包名</code>或<code>npm i 包名</code>即可完成本地安装</p><p>本地安装的包出现在当前目录下的<code>node_modules</code>目录中</p><blockquote><p>随着开发的进展，<code>node_modules</code>目录会变得异常庞大，目录下的内容不适合直接传输到生产环境，因此通常使用<code>.gitignore</code>文件忽略该目录中的内容<br>本地安装适用于绝大部分的包，它会在当前目录及其子目录中发挥作用<br>通常在项目的根目录中使用本地安装<br>安装一个包的时候，npm 会自动管理依赖，它会下载该包的依赖包到<code>node_modules</code>目录中<br>如果本地安装的包带有 CLI，npm 会将它的 CLI 脚本文件放置到<code>node_modules/.bin</code>下，使用命令<code>npx 命令名</code>即可调用</p></blockquote><h2 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h2><p>全局安装的包放置在一个特殊的全局目录，该目录可以通过命令<code>npm config get prefix</code>查看</p><p>使用命令<code>npm install --global 包名</code> 或 <code>npm i -g 包名</code></p><p>重要：<strong>全局安装的包并非所有工程可用，它仅提供全局的 CLI 工具</strong></p><p>大部分情况下，都不需要全局安装包，除非：</p><ol><li>包的版本非常稳定，很少有大的更新</li><li>提供的 CLI 工具在各个工程中使用的非常频繁</li><li>CLI 工具仅为开发环境提供支持，而非部署环境</li></ol><h1 id="包配置"><a href="#包配置" class="headerlink" title="包配置"></a>包配置</h1><p>目前遇到的问题：</p><ol><li>拷贝工程后如何还原？</li><li>如何区分开发依赖和生产依赖？</li><li>如果自身的项目也是一个包，如何描述包的信息</li></ol><p>以上这些问题都需要通过包的<strong>配置文件</strong>解决</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>npm 将每个使用 npm 的工程本身都看作是一个包，包的信息需要通过一个名称固定的配置文件来描述</p><p><strong>配置文件的名称固定为：package.json</strong></p><p>可以手动创建该文件，而更多的时候，是通过命令<code>npm init</code>创建的</p><p>配置文件中可以描述大量的信息，包括：</p><ul><li>name：包的名称，该名称必须是<strong>英文单词字符</strong>，支持连接符</li><li>version：版本<ul><li>版本规范：主版本号.次版本号.补丁版本号</li><li>主版本号：仅当程序发生了重大变化时才会增长，如新增了重要功能、新增了大量的API、技术架构发生了重大变化</li><li>次版本号：仅当程序发生了一些小变化时才会增长，如新增了一些小功能、新增了一些辅助型的API</li><li>补丁版本号：仅当解决了一些 bug 或 进行了一些局部优化时更新，如修复了某个函数的 bug、提升了某个函数的运行效率</li></ul></li><li>description：包的描述</li><li>homepage：官网地址</li><li>author：包的作者，必须是有效的 npm 账户名，书写规范是 <code>account &lt;mail&gt;</code>，例如：<code>zhangsan &lt;zhangsan@gmail.com&gt;</code>，不正确的账号和邮箱可能导致发布包时失败 </li><li>repository：包的仓储地址，通常指 git 或 svn 的地址，它是一个对象<ul><li>type：仓储类型，git 或 svn</li><li>url：地址</li></ul></li><li>main：包的入口文件，使用包的人默认从该入口文件导入包的内容</li><li>keywords: 搜索关键字，发布包后，可以通过该数组中的关键字搜索到包</li></ul><p>使用<code>npm init --yes</code>或<code>npm init -y</code>可以在生成配置文件时自动填充默认配置</p><h2 id="保存依赖关系"><a href="#保存依赖关系" class="headerlink" title="保存依赖关系"></a>保存依赖关系</h2><p>大部分时候，我们仅仅是开发项目，并不会把它打包发布出去，尽管如此，我们仍然需要package.json文件</p><p><strong>package.json文件最重要的作用，是记录当前工程的依赖</strong></p><ul><li>dependencies：生产环境的依赖包</li><li>devDependencies：仅开发环境的依赖包</li></ul><p>配置好依赖后，使用下面的命令即可安装依赖</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 本地安装所有依赖 dependencies + devDependenciesnpm installnpm i## 仅安装生产环境的依赖 dependenciesnpm install --production<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样一来，代码移植就不是问题了，只需要移植源代码和package.json文件，不用移植node_modules目录，然后在移植之后通过命令即可重新恢复安装</p><p>为了更加方便的添加依赖，npm支持在使用install命令时，加入一些额外的参数，用于将安装的依赖包保存到package.json文件中</p><p>涉及的命令如下</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 安装依赖到生产环境npm i 包名npm i --save 包名npm i -S 包名## 安装依赖到开发环境npm i --save-dev 包名npm i -D 包名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>自动保存的依赖版本，例如<code>^15.1.3</code>，这种书写方式叫做语义版本号（semver version）</p></blockquote><h1 id="包的使用"><a href="#包的使用" class="headerlink" title="包的使用"></a>包的使用</h1><p>nodejs 对 npm 支持非常良好</p><p>当使用 nodejs 导入模块时，如果模块路径不是以 ./ 或 ../ 开头，则 node 会认为导入的模块来自于 node_modules 目录，例如：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"lodash"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它首先会从当前目录的以下位置寻找文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">node_modules&#x2F;lodash.jsnode_modules&#x2F;lodash&#x2F;入口文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>若当前目录没有这样的文件，则会回溯到上级目录按照同样的方式查找</p><p>如果到顶级目录都无法找到文件，则抛出错误</p><p>上面提到的入口文件按照以下规则确定</p><ol><li>查看导入包的package.json文件，读取main字段作为入口文件</li><li>若不包含main字段，则使用index.js作为入口文件</li></ol><blockquote><p>入口文件的规则同样适用于自己工程中的模块<br>在 node 中，还可以手动指定路径来导入相应的文件，这种情况比较少见</p></blockquote><h1 id="语义版本"><a href="#语义版本" class="headerlink" title="语义版本"></a>语义版本</h1><p>思考：如果你编写了一个包A，依赖另外一个包B，你在编写代码时，包B的版本是2.4.1，你是希望使用你包的人一定要安装包B，并且是2.4.1版本，还是希望他可以安装更高的版本，如果你希望它安装更高的版本，高的什么程度呢？</p><p>回顾：版本号规则</p><p>版本规范：主版本号.次版本号.补丁版本号</p><ul><li>主版本号：仅当程序发生了重大变化时才会增长，如新增了重要功能、新增了大量的API、技术架构发生了重大变化</li><li>次版本号：仅当程序发生了一些小变化时才会增长，如新增了一些小功能、新增了一些辅助型的API</li><li>补丁版本号：仅当解决了一些 bug 或 进行了一些局部优化时更新，如修复了某个函数的 bug、提升了某个函数的运行效率</li></ul><p>有的时候，我们希望：安装我的依赖包的时候，次版本号和补丁版本号是可以有提升的，但是主版本号不能变化</p><p>有的时候，我们又希望：安装我的依赖包的时候，只有补丁版本号可以提升，其他都不能提升</p><p>甚至我们希望依赖包保持固定的版本，尽管这比较少见</p><p>这样一来，就需要在配置文件中描述清楚具体的依赖规则，而不是直接写上版本号那么简单。</p><p>这种规则的描述，即<strong>语义版本</strong></p><p>语义版本的书写规则非常丰富，下面列出了一些常见的书写方式</p><table><thead><tr><th align="center">符号</th><th align="center">描述</th><th align="center">示例</th><th align="center">示例描述</th></tr></thead><tbody><tr><td align="center">&gt;</td><td align="center">大于某个版本</td><td align="center">&gt;1.2.1</td><td align="center">大于1.2.1版本</td></tr><tr><td align="center">&gt;=</td><td align="center">大于等于某个版本</td><td align="center">&gt;=1.2.1</td><td align="center">大于等于1.2.1版本</td></tr><tr><td align="center">&lt;</td><td align="center">小于某个版本</td><td align="center">&lt;1.2.1</td><td align="center">小于1.2.1版本</td></tr><tr><td align="center">&lt;=</td><td align="center">小于等于某个版本</td><td align="center">&lt;=1.2.1</td><td align="center">小于等于1.2.1版本</td></tr><tr><td align="center">-</td><td align="center">介于两个版本之间</td><td align="center">1.2.1 - 1.4.5</td><td align="center">介于1.2.1和1.4.5之间</td></tr><tr><td align="center">x</td><td align="center">不固定的版本号</td><td align="center">1.3.x</td><td align="center">只要保证主版本号是1，次版本号是3即可</td></tr><tr><td align="center">~</td><td align="center">补丁版本号可增</td><td align="center">~1.3.4</td><td align="center">保证主版本号是1，次版本号是3，补丁版本号大于等于4</td></tr><tr><td align="center">^</td><td align="center">此版本和补丁版本可增</td><td align="center">^1.3.4</td><td align="center">保证主版本号是1，次版本号可以大于等于3，补丁版本号可以大于等于4</td></tr><tr><td align="center">*</td><td align="center">最新版本</td><td align="center">*</td><td align="center">始终安装最新版本</td></tr></tbody></table><h2 id="避免还原的差异"><a href="#避免还原的差异" class="headerlink" title="避免还原的差异"></a>避免还原的差异</h2><p>版本依赖控制始终是一个两难的问题</p><p>如果允许版本增加，可以让依赖包的bug得以修复（补丁版本号），可以带来一些意外的惊喜（次版本号），但同样可能带来不确定的风险（新的bug）</p><p>如果不允许版本增加，可以获得最好的稳定性，但失去了依赖包自我优化的能力</p><p>而有的时候情况更加复杂，如果依赖包升级后，依赖也发生了变化，会有更多不确定的情况出现</p><p>基于此，npm 在安装包的时候，会自动生成一个 package-lock.json 文件，该文件记录了安装包时的确切依赖关系</p><p>当移植工程时，如果移植了 package-lock.json 文件，恢复安装时，会按照 package-lock.json 文件中的确切依赖进行安装，最大限度的避免了差异</p><h2 id="扩展-npm的差异版本处理"><a href="#扩展-npm的差异版本处理" class="headerlink" title="[扩展]npm的差异版本处理"></a>[扩展]npm的差异版本处理</h2><p>面对这种情况，在 node_modules 目录中，不会使用扁平的目录结构，而会形成嵌套的目录，如下图：</p><pre class="line-numbers language-none"><code class="language-none">├── node_modules│   ├── a │   │   ├── node_modules│   │   │   ├── c│   │   │   |   |—— c包的文件│   │   │── a包的文件     │   ├── b │   │   ├── node_modules│   │   │   ├── c│   │   │   |   |—— c包的文件│   │   │── b包的文件           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="npm-脚本-（npm-scripts）"><a href="#npm-脚本-（npm-scripts）" class="headerlink" title="npm 脚本 （npm scripts）"></a>npm 脚本 （npm scripts）</h1><p>在开发的过程中，我们可能会反复使用很多的 CLI 命令，例如：</p><ul><li>启动工程命令（node 或 一些第三方包提供的CLI命令）</li><li>部署工程命令（一些第三方包提供的CLI命令）</li><li>测试工程命令（一些第三方包提供的CLI命令）</li></ul><p>这些命令纷繁复杂，根据第三方包的不同命令也会不一样，非常难以记忆</p><p>于是，npm 非常贴心的支持了脚本，只需要在 package.json 中配置 scripts 字段，即可配置各种脚本名称</p><p>之后，我们就可以运行简单的指令来完成各种操作了</p><p>运行方式是 <code>npm run 脚本名称</code></p><p>不仅如此，npm 还对某些常用的脚本名称进行了简化，下面的脚本名称是不需要使用run的：</p><ul><li>start</li><li>stop</li><li>test</li></ul><p>一些细节：</p><ul><li>脚本中可以省略npx</li><li>start脚本有默认值：node server.js</li></ul><h1 id="运行环境配置"><a href="#运行环境配置" class="headerlink" title="运行环境配置"></a>运行环境配置</h1><p>我们书写的代码一般有三种运行环境：</p><ol><li>开发环境</li><li>生产环境</li><li>测试环境</li></ol><p>有的时候，我们可能需要在 node 代码中根据不同的环境做出不同的处理</p><p>如何优雅的让 node 知道处于什么环境，是极其重要的</p><p>通常我们使用如下的处理方式：</p><p>node中有一个全局变量 global (可以类比浏览器环境的window)，该变量是一个对象，对象中的所有属性均可以直接使用</p><p>global有一个属性是process，该属性是一个对象，包含了当前运行node程序的计算机的很多信息，其中有一个信息是env，是一个对象，包含了计算机中所有的系统变量</p><p>通常，我们通过系统变量 NODE_ENV 的值，来判定node程序处于何种环境</p><p>有两种方式设置 NODE_ENV 的值</p><ol><li>永久设置</li><li>临时设置</li></ol><p>我们一般使用临时设置</p><p>因此，我们可以配置 scripts 脚本，在设置好了 NODE_ENV 后启动程序</p><blockquote><p>为了避免不同系统的设置方式的差异，可以使用第三方库 cross-env 对环境变量进行设置</p></blockquote><h2 id="在node中读取package-json"><a href="#在node中读取package-json" class="headerlink" title="在node中读取package.json"></a>在node中读取package.json</h2><p>有的时候，我们可能在 package.json 中配置一些自定义的字段，这些字段需要在node中读取</p><p>在node 中，可以直接导入一个json格式的文件，它会自动将其转换为js对象</p><h1 id="其他npm命令-ignore"><a href="#其他npm命令-ignore" class="headerlink" title="其他npm命令 {ignore}"></a>其他npm命令 {ignore}</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>精确安装最新版本</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install --save-exact 包名 npm install -E 包名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>安装指定版本</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install 包名@版本号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><ol><li>查询包安装路径</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm root [-g]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>查看包信息</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm view 包名 [子信息]## view aliases：v info show<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>查询安装包</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm list [-g] [--depth&#x3D;依赖深度]## list aliases: ls  la  ll<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><ol><li>检查有哪些包需要更新</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm outdated<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>更新包</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm update [-g] [包名]## update 别名（aliases）：up、upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="卸载包"><a href="#卸载包" class="headerlink" title="卸载包"></a>卸载包</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm uninstall [-g] 包名## uninstall aliases: remove, rm, r, un, unlink<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="npm-配置"><a href="#npm-配置" class="headerlink" title="npm 配置"></a>npm 配置</h2><p>npm的配置会对其他命令产生或多或少的影响</p><p>安装好npm之后，最终会产生两个配置文件，一个是用户配置，一个是系统配置，当两个文件的配置项有冲突的时候，用户配置会覆盖系统配置</p><p>通常，我们不关心具体的配置文件，而只关心最终生效的配置</p><p>通过下面的命令可以查询目前生效的各种配置</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm config ls [-l] [--json]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另外，可以通过下面的命令操作配置</p><ol><li>获取某个配置项</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm config get 配置项<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>设置某个配置项</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm config set 配置项&#x3D;值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>移除某个配置项</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm config delete 配置项<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="发布包"><a href="#发布包" class="headerlink" title="发布包"></a>发布包</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>移除淘宝镜像源</li><li>到npm官网注册一个账号，并完成邮箱认证</li><li>本地使用 npm cli 进行登录<ol><li>使用命令<code>npm login</code>登录</li><li>使用命令<code>npm whoami</code>查看当前登录的账号</li><li>使用命令<code>npm logout</code>注销</li></ol></li><li>创建工程根目录</li><li>使用npm init进行初始化</li></ol><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><ol><li>开发</li><li>确定版本</li><li>使用命令<code>npm publish</code>完成发布</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;包的安装&quot;&gt;&lt;a href=&quot;#包的安装&quot; class=&quot;headerlink&quot; title=&quot;包的安装&quot;&gt;&lt;/a&gt;包的安装&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;安装（install）即下载包&lt;br&gt;由于 npm 的官方 registry 服务器位于国外，可能</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>AMD和CMD</title>
    <link href="http://example.com/2023/04/19/%E5%B7%A5%E7%A8%8B%E5%8C%96/AMD%E5%92%8CCMD/"/>
    <id>http://example.com/2023/04/19/%E5%B7%A5%E7%A8%8B%E5%8C%96/AMD%E5%92%8CCMD/</id>
    <published>2023-04-18T16:00:00.000Z</published>
    <updated>2023-04-19T09:30:36.632Z</updated>
    
    <content type="html"><![CDATA[<p><em>AMD和CMD在ES6出了官方标准以后就很少使用了，所以这里只做了就可以</em></p><h1 id="浏览器端模块化的难题"><a href="#浏览器端模块化的难题" class="headerlink" title="浏览器端模块化的难题"></a>浏览器端模块化的难题</h1><p><strong>CommonJS的工作原理</strong></p><p>当使用<code>require(模块路径)</code>导入一个模块时，node会做以下两件事情（不考虑模块缓存）：</p><ol><li>通过模块路径找到本机文件，并读取文件内容</li><li>将文件中的代码放入到一个函数环境中执行，并将执行后module.exports的值作为require函数的返回结果</li></ol><p>正是这两个步骤，使得CommonJS在node端可以良好的被支持</p><p>可以认为，<strong>CommonJS是同步的</strong>，必须要等到加载完文件并执行完代码后才能继续向后执行</p><p><strong>当浏览器遇到CommonJS</strong></p><p>当想要把CommonJS放到浏览器端时，就遇到了一些挑战</p><ol><li>浏览器要加载JS文件，需要远程从服务器读取，而网络传输的效率远远低于node环境中读取本地文件的效率。由于CommonJS是同步的，这会极大的降低运行性能</li><li>如果需要读取JS文件内容并把它放入到一个环境中执行，需要浏览器厂商的支持，可是浏览器厂商不愿意提供支持，最大的原因是CommonJS属于社区标准，并非官方标准</li></ol><p><strong>新的规范</strong></p><p>基于以上两点原因，浏览器无法支持模块化</p><p>可这并不代表模块化不能在浏览器中实现</p><p>要在浏览器中实现模块化，只要能解决上面的两个问题就行了</p><p>解决办法其实很简单：</p><ol><li>远程加载JS浪费了时间？做成异步即可，加载完成后调用一个回调就行了</li><li>模块中的代码需要放置到函数中执行？编写模块时，直接放函数中就行了</li></ol><p>基于这种简单有效的思路，出现了AMD和CMD规范，有效的解决了浏览器模块化的问题。</p><h1 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h1><p>全称是Asynchronous Module Definition，即异步模块加载机制</p><p>require.js实现了AMD规范</p><p>在AMD中，导入和导出模块的代码，都必须放置在define函数中</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">// src引入require.js;通过data-main 确定模块化的入口文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">data-main</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./js/index.js<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./js/require.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span>依赖的模块列表<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">模块名称列表</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 位置一一对应</span>    <span class="token operator">*</span><span class="token comment">//模块内部的代码*</span>    <span class="token operator">*</span><span class="token keyword">return</span><span class="token operator">*</span> 导出的内容<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 或者</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span>exports<span class="token punctuation">,</span>module</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment">// 导入</span>  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 导出</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h1><p>全称是Common Module Definition，公共模块定义规范</p><p>sea.js实现了CMD规范</p><p>在CMD中，导入和导出模块的代码，都必须放置在define函数中</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./js/sea.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> // 引入sea.js<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token comment">// 确认入口文件</span>    seajs<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"./js/index"</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">*</span><span class="token comment">//模块内部的代码*</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// CMD支持异步写法</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    require<span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    require<span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>从使用时看AMD和CMD基本类似，AMD也支持CMD的写法，为什么还有个CMD呢？其实最开始的时候AMD只有一种写法，后面出来了CMD以后，开发者更喜欢CMD的写法，因为与commonjs写法比较类似，AMD再去更新了CMD的写法</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;AMD和CMD在ES6出了官方标准以后就很少使用了，所以这里只做了就可以&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;浏览器端模块化的难题&quot;&gt;&lt;a href=&quot;#浏览器端模块化的难题&quot; class=&quot;headerlink&quot; title=&quot;浏览器端模块化的难题&quot;&gt;&lt;/a&gt;浏览器</summary>
      
    
    
    
    
    <category term="工程化" scheme="http://example.com/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>构建工具</title>
    <link href="http://example.com/2023/04/01/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    <id>http://example.com/2023/04/01/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/</id>
    <published>2023-03-31T16:00:00.000Z</published>
    <updated>2023-04-12T03:20:22.751Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>工程化，为复杂应用而生</strong></p></blockquote><h1 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h1><p><strong>webpack是用来搭建前端工程的</strong></p><p>它运行在node环境中，它所做的事情，简单来说，就是<strong>打包</strong></p><img src="http://mdrs.yuanjin.tech/img/20210508172954.png" alt="image-20210508172953979" style="zoom:50%;" /><p>具体来说，就是以某个模块作为入口，根据入口分析出所有模块的依赖关系，然后对各种模块进行合并、压缩，形成最终的打包结果</p><p><strong>在webpack的世界中，一切皆是模块</strong></p><h1 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h1><blockquote><p>以<code>src/main.js</code>作为入口文件</p><p>按照习惯，所有的模块均放置在<code>src</code>目录中</p></blockquote><ol><li><p> 安装依赖</p></li><li><p>编写多个模块</p><p>随意编写一些模块，可以是js、图片、音视频，以入口模块为起点，形成依赖关系</p></li><li><p>运行<code>npm run build</code>命令，进行打包</p></li><li><p>查看打包结果</p><p>打包结果放置在dist目录中</p></li></ol><p>通过上面的体验，可以发现，webpack给我们带来了至少以下好处：</p><ul><li><p>可以大胆的使用任意模块化标准</p><p>无须担心兼容性问题，因为webpack完成打包后，已经没有了任何模块化语句</p></li><li><p>可以将一些非JS代码也视为模块</p><p>这样可以对css、图片等资源进行更加细粒度的划分</p></li><li><p>在前端开发中，也可以使用npm</p><p>webpack不会运行你的源代码，无论是你自己写的模块，还是通过npm安装的模块，webpack一视同仁，统统视为依赖，最终合并到打包结果中</p></li><li><p>非常适合开发单页应用</p><p>单页应用是前端用户体验最好的web应用</p><p>所谓单页应用，是指只有一个html页面，页面中没有任何内容，所有的内容均靠js生成</p><p>要优雅的实现单页应用，最好依托于前端框架，比如vue、react</p></li></ul><h1 id="页面模板"><a href="#页面模板" class="headerlink" title="页面模板"></a>页面模板</h1><p>对于单页应用而言，只有一个空白的页面，所有内容都靠JS代码创建</p><p>webpack会自动生成一个页面，并且在页面中会自动加入对js和css的引用</p><p>它生成页面时，参考的是<code>public/index.html</code>，其称之为页面模板</p><h1 id="public目录"><a href="#public目录" class="headerlink" title="public目录"></a>public目录</h1><p>webpack会非常暴力的将public目录中的所有文件（除页面模板外），复制到打包结果中</p><h1 id="开发服务器"><a href="#开发服务器" class="headerlink" title="开发服务器"></a>开发服务器</h1><p>如果每次修改完代码，都要经过<code>打包-&gt;运行</code>，未免太过麻烦</p><p>在开发阶段，我们可以运行<code>npm run serve</code>命令获得更好的打包体验</p><p>该命令会让<code>webpack</code>启动一个<strong>开发服务器</strong>。</p><p>在这个阶段，webpack并不会形成打包结果文件，而是把打包的内容放到内存中，当我们请求服务器时，服务器从内存中给予我们打包结果</p><p>与此同时，当源码发生变动时，webpack会自动重新打包，同时刷新页面以访问到最新的打包结果</p><p><img src="http://mdrs.yuanjin.tech/img/20210508194443.png" alt="image-20210508194442940"></p><h1 id="文件缓存"><a href="#文件缓存" class="headerlink" title="文件缓存"></a>文件缓存</h1><p>可以看到，除了页面外，其他的资源在打包完成后，文件名多了一些奇奇怪怪的字符</p><p>例如：<code>js/app-9ea93.js</code></p><p>其中，<code>9ea93</code>这样的字符称之为<code>hash</code>，它会随着模块内容的变化而变化</p><p><strong>源码内容不变，hash不变；源码内容变化，hash变化</strong></p><p>之所以这样做，是因为生产环境中，浏览器会对除页面外的静态资源进行缓存</p><p>如果不设置hash值，一旦代码更新，浏览器还会使用之前缓存的结果，无法使用最新的代码</p><img src="http://mdrs.yuanjin.tech/img/20210508183135.png" alt="image-20210508183135487" style="zoom:50%;" /><p>有了hash值之后，即可解决此问题</p><p><img src="http://mdrs.yuanjin.tech/img/20210508183454.png" alt="image-20210508183454385"></p><p>webpack会在打包时自动处理hash值，并不会对我们写代码造成任何影响，但作为一个前端开发者，有必要了解这一点</p><h1 id="资源路径"><a href="#资源路径" class="headerlink" title="资源路径"></a>资源路径</h1><p><strong>除代码和样式模块外，其他模块被视为资源模块</strong></p><p>值得特别注意的是，<strong>资源模块在源代码中的路径和打包后的路径是不一样的</strong>，这就导致我们在编写代码的时候，根本无法知晓最终的路径</p><p>最常见的例子，就是在css中使用背景图片</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span><span class="token punctuation">&#123;</span>  <span class="token comment">/* 背景图使用了源码中的路径 */</span>  <span class="token property">backgroud</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'../assets/1.png'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>它能正常工作吗？</p><p>它能！</p><p>因为webpack非常智能的发现了这一点，对于css中的路径，webpack在打包时，会将其自动转换为打包结果的路径，比如，上面的代码在打包完成后，可能被转换为下面的格式</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span><span class="token punctuation">&#123;</span>  <span class="token comment">/* css中的资源路径会被自动替换，我们无须关心 */</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/img/1492ea.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但如果我们要通过js动态的使用路径，webpack是无法识别的</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 打包前</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'./assets/1.png'</span><span class="token punctuation">;</span> <span class="token comment">// 该路径无法被转换</span>img<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span><span class="token comment">// 打包后</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'./assets/1.png'</span><span class="token punctuation">;</span> <span class="token comment">// ❌</span>img<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正确的做法是，通过模块化的方式导入资源，并获取资源路径</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 打包前</span><span class="token keyword">import</span> url <span class="token keyword">from</span> <span class="token string">'./assets/1.png'</span><span class="token punctuation">;</span> <span class="token comment">// 打包后，url得到的将是真实的路径</span>img<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span><span class="token comment">// 打包后</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'/img/1492ea.png'</span><span class="token punctuation">;</span> <span class="token comment">// ✅</span>img<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="缺省的文件和后缀名"><a href="#缺省的文件和后缀名" class="headerlink" title="缺省的文件和后缀名"></a>缺省的文件和后缀名</h1><p>导入模块时，所有js模块均可省略<code>.js</code>，若导入的模块文件名为<code>index.js</code>，可省略文件名</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">'./home'</span><span class="token punctuation">;</span> <span class="token comment">// 若存在home.js，可省略js</span><span class="token keyword">import</span> <span class="token string">'./movie'</span><span class="token punctuation">;</span> <span class="token comment">// 若movie是一个目录，此次导入的是 ./movie/index.js</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="路径别名"><a href="#路径别名" class="headerlink" title="路径别名"></a>路径别名</h1><p>随着体量的增长，不可避免的，会形成层级极深的目录</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">root  |- src    |- a        |- a1            |- a2               |- index.js    |- b        |- b1            |- index.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果需要在<code>./src/a/a1/a2/index.js</code>中导入<code>./src/b/b1/index.js</code>，则可能产生下面特别恶心的代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">'../../../b/b1/index.js'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>webpack提供了别名供我们快速定位到<code>./src</code>目录，通常，该别名为<code>@</code></p><p>上面的导入代码可简化为</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">'@/b/b1'</span><span class="token punctuation">;</span> <span class="token comment">// @表示src目录，同时省略了index.js</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="js兼容性"><a href="#js兼容性" class="headerlink" title="js兼容性"></a>js兼容性</h1><p>当webpack读取到js代码时，会自动对其进行兼容性处理</p><p>具体的处理方案涉及到两个配置文件：</p><ul><li><code>babel.config.js</code>：通过配置该文件，可以设置对哪些js代码进行降级处理</li><li><code>.browserslistrc</code>：通过配置该文件，可以设置在降级时，要兼容哪些浏览器，兼容的范围越光，降级产生的代码就越多，自然，打包后的体积就越大</li></ul><p>你无须知晓具体的配置方式</p><h1 id="打包压缩"><a href="#打包压缩" class="headerlink" title="打包压缩"></a>打包压缩</h1><p>webpack在打包时，会对所有js和css代码进行压缩</p><p>对于js，除了压缩之外，还会对其中的各种名称进行混淆</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">(</span>self<span class="token punctuation">.</span>webpackChunkmovie_list<span class="token operator">=</span>self<span class="token punctuation">.</span>webpackChunkmovie_list<span class="token operator">||</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">587</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">3587</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span>t<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token string">"use strict"</span><span class="token punctuation">;</span>n<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">5666</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">1539</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">8674</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">1249</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">2222</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> e<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">9755</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token operator">=</span>n<span class="token punctuation">.</span><span class="token function">n</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> o<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">i</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>o<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token string">'&lt;li>\n  &lt;a href="'</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>url<span class="token punctuation">,</span><span class="token string">'" target="_blank">\n    &lt;img src="'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>cover<span class="token punctuation">,</span><span class="token string">'" title="'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>title<span class="token punctuation">,</span><span class="token string">'">\n  &lt;/a>\n  &lt;a href="'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>url<span class="token punctuation">,</span><span class="token string">'" target="_blank" class="'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"qmUYQv1xlJhGMQKz-kfAp"</span><span class="token punctuation">,</span><span class="token string">'">'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>title<span class="token punctuation">,</span><span class="token string">'&lt;/a>\n  &lt;p class="'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"_3yV5wC-URYTUP0sPvaE0ZR"</span><span class="token punctuation">,</span><span class="token string">'">'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>rate<span class="token punctuation">,</span><span class="token string">"&lt;/p>\n  &lt;/li>"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>o<span class="token operator">=</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"&lt;ul>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"_1fsrc5VinfYHBXCF1s58qS"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> c<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">8138</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> u<span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>混淆的作用一方面是为了进一步压缩包体积，另一方面是为了让我们的代码更难被其他人理解利用</p><h1 id="源码地图-source-map"><a href="#源码地图-source-map" class="headerlink" title="源码地图 source map"></a>源码地图 source map</h1><p>我们运行的是webpack打包后的结果，而打包后的结果是很难阅读的</p><p>但这样一来会带来新的问题，如果代码报错，我们就难以知道到底是那一行代码写的有问题</p><p>此时源码地图就发挥了作用</p><p>可以发现，js代码打包后都会跟上一个同名的、后缀为<code>.map</code>的文件，该文件就保存了原始代码的内容</p><p>请放心，这个内容人类是看不懂的，但浏览器可以看懂</p><p>当代码报错时，浏览器会定位到源码地图中的对应代码，而不是把真实报错的代码展示给我们</p><p>你无须关心这一点，但可以自然的从其中获得巨大的便利</p><h1 id="css工程化"><a href="#css工程化" class="headerlink" title="css工程化"></a>css工程化</h1><p>webpack能够识别<strong>所有</strong>的样式代码，包括<code>css</code>、<code>less</code>、<code>sass</code>、<code>stylus</code></p><p>在打包时，会将它们转换成纯正的<code>css</code></p><p>除此之外，它还具备以下的神奇能力</p><h2 id="自动厂商前缀"><a href="#自动厂商前缀" class="headerlink" title="自动厂商前缀"></a>自动厂商前缀</h2><p>css有很多兼容性问题，解决这些兼容性问题的最常见办法，就是加上厂商前缀。</p><p>比如：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 兼容性不好的代码 */</span><span class="token selector">.container</span><span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> 1s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 兼容性好的代码 */</span><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> -webkit-flex<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">-webkit-transition</span><span class="token punctuation">:</span> 1s<span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> 1s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>webpack会根据<code>.browserlistrc</code>中指定的浏览器范围，<strong>按需、自动</strong>加上厂商前缀</p><p>我们开发无须关心</p><h2 id="css-module"><a href="#css-module" class="headerlink" title="css module"></a>css module</h2><p>css文件多了后，你怎么保证它们里面没有冲突的类样式？</p><p>靠层级选择器？就不担心效率？</p><p>靠命名规范？就不担心脑袋爆炸？</p><p>要靠就靠css module</p><p>当样式文件以<code>xxx.mdoule.xxx</code>的方式命名时，webpack会将该文件当成一个开启了<code>css module</code>的文件</p><p>比如：<code>index.module.less</code>、<code>movie.module.css</code>，都是开启了<code>css module</code>的文件</p><p><strong>文件中的所有类名都会被hash化</strong></p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token comment">// 源码</span><span class="token selector">.container</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token selector">.list</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token selector">.item</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 打包结果，绝无可能重名</span><span class="token selector">._2GFVidHvoHtfgtrdifua24</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token selector">._1fsrc5VinfYHBXCF1s58qS</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token selector">.urPUKUukdS_UTSuWRI5-5</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在就一个问题，我们在使用类名时，如何知道它打包结果的类名呢？</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">'./index.module.less'</span><span class="token punctuation">;</span>dom<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ❌ 最终的类名可不是这个</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>正确的方式如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// styles 是一个对象，里面映射了源码类名和打包类名的关系</span><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">'./index.module.less'</span><span class="token punctuation">;</span>dom<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ✅ 属性container中记录的就是container转换后的类名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="真正的webpack没有那么神奇"><a href="#真正的webpack没有那么神奇" class="headerlink" title="真正的webpack没有那么神奇"></a>真正的webpack没有那么神奇</h1><p>实际上，webpack没有做这么多事，我们不能把功劳（怨念）全归结于它</p><p>它只是站在巨人（其他流氓）肩膀上而已</p><p>下图可以看个热闹</p><p><img src="http://mdrs.yuanjin.tech/img/20210508203658.png" alt="image-20210508203658298"></p><p>webpack通过插件（plugin）和加载器（loader）将这些技术整合在一起</p><p>工程中的文件：</p><ul><li><code>.browserslistrc</code>，表达适配的浏览器范围，会被工程化中的其他技术所使用</li><li><code>babel.config.js</code>，<code>babel</code>的配置文件，做js降级处理</li><li><code>postcss.config.js</code>，<code>postcss</code>的配置文件，做css代码转换</li><li><code>webpack.config.js</code>，<code>webpack</code>的配置文件，整合其他工程化技术，以及配置打包细节、开发服务器、路径别名等等</li></ul><h1 id="对我们开发的影响"><a href="#对我们开发的影响" class="headerlink" title="对我们开发的影响"></a>对我们开发的影响</h1><ol><li><p>学会访问开发服务器查看效果</p></li><li><p>学会动态获取资源文件路径</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> url <span class="token keyword">from</span> <span class="token string">'./assets/1.png'</span><span class="token punctuation">;</span> img<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>学会省略文件和后缀名</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">'./home'</span><span class="token punctuation">;</span> <span class="token comment">// 若存在home.js，可省略js</span><span class="token keyword">import</span> <span class="token string">'./movie'</span><span class="token punctuation">;</span> <span class="token comment">// 若movie是一个目录，此次导入的是 ./movie/index.js</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>学会使用别名简化导入代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">'@/b/b1'</span><span class="token punctuation">;</span> <span class="token comment">// 实际导入： src/b/b1/index.js  (若b1是目录)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>学会使用css module</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// styles 是一个对象，里面映射了源码类名和打包类名的关系</span><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">'./index.module.less'</span><span class="token punctuation">;</span>dom<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;工程化，为复杂应用而生&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;核心&quot;&gt;&lt;a href=&quot;#核心&quot; class=&quot;headerlink&quot; title=&quot;核心&quot;&gt;&lt;/a&gt;核心&lt;/h1&gt;&lt;p&gt;&lt;strong</summary>
      
    
    
    
    
    <category term="工程化" scheme="http://example.com/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>less</title>
    <link href="http://example.com/2023/03/31/%E5%B7%A5%E7%A8%8B%E5%8C%96/less/"/>
    <id>http://example.com/2023/03/31/%E5%B7%A5%E7%A8%8B%E5%8C%96/less/</id>
    <published>2023-03-30T16:00:00.000Z</published>
    <updated>2023-03-31T05:47:30.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是Less？"><a href="#什么是Less？" class="headerlink" title="什么是Less？"></a>什么是Less？</h1><p><strong>Less</strong>是一种更加简洁的样式代码，它非常像CSS，但又不太一样，它让编写样式变得更容易</p><p>下面是css代码和Less代码的对比，它们都表达了一样的含义</p><p><img src="http://mdrs.yuanjin.tech/img/20210507125034.png" alt="image-20210507125034131"></p><p><strong>Less代码虽好，但它无法被浏览器识别</strong>，因此需要一个工具将其转换为血统纯正的css代码</p><p>由于<strong>node环境具有读写文件的能力</strong>，于是在node环境中可以轻松的完成文件的转换</p><p><code>npm</code>上有一个包叫做<code>less</code>，它运行在node环境中，通过它可以完成对Less代码的转换</p><img src="http://mdrs.yuanjin.tech/img/20210507105107.png" alt="image-20210507105107556" style="zoom:50%;" /><p><strong>可以看出，node环境在前端工程化中，充当了一个辅助的角色，它并不直接运行前端代码，而是让我们编写前端代码更加舒适便利，在后续的课程中，你还会不断的体会到这一点</strong></p><p><strong>转换代码，称之为编译(compile)，转换代码的工具，称之为编译器(compiler)</strong></p><h1 id="体验Less"><a href="#体验Less" class="headerlink" title="体验Less"></a>体验Less</h1><ol><li><p>新建<code>index.less</code>文件，编写下面的<code>less</code>代码</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token variable">@green<span class="token punctuation">:</span></span> #008c8c<span class="token punctuation">;</span><span class="token selector">.list</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@green</span><span class="token punctuation">;</span>  <span class="token selector">li</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span>    <span class="token selector">&amp;:hover</span> <span class="token punctuation">&#123;</span>      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token variable">@green</span><span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用<code>npm</code>下载<code>less</code></p><p><code>less</code>包提供了一个<code>cli</code>工具<code>lessc</code>，你可以有两种方案使用它</p><p><strong>方案一：全局安装less</strong></p><p>这种方案可以让你在任何终端目录使用<code>lessc</code>命令，但不利于版本控制</p><p><strong>方案二：本地安装less</strong></p><p>这种方案会把<code>less</code>安装到工程目录的<code>node_modules</code>中，你无法全局使用<code>lessc</code>命令，但可以在当前工程目录中使用<code>npx lessc</code>运行该命令</p><blockquote><p>npx是npm提供的一个小工具，它可以运行当前项目中安装到node_modules的cli命令</p><p>如果配置<code>package.json</code>脚本，无须使用<code>npx</code></p><p>如果可以，应该尽量使用本地安装，而非全局安装</p></blockquote><p>如果可以，应该尽量使用本地安装，而非全局安装</p></li><li><p>使用<code>lessc</code>命令，对编写的<code>less</code>文件进行编译</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 将 index.less 编译成为 index.csslessc index.less index.css<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>新建一个页面，引用编译结果<code>index.css</code></p></li></ol><blockquote><p>目前，编写less代码会遇到一点小麻烦，就是每次编写后，都需要运行命令进行编译</p><p>这个麻烦只是暂时的，将来很快就可以解决</p></blockquote><h1 id="Less的核心语法"><a href="#Less的核心语法" class="headerlink" title="Less的核心语法"></a>Less的核心语法</h1><blockquote><p>Less官网：<a href="https://lesscss.org/">https://lesscss.org/</a></p><p>Less民间中文网：<a href="https://less.bootcss.com/">https://less.bootcss.com/</a></p></blockquote><p>Less提供了非常多的功能，帮助我们更加轻松的编写css代码</p><p>其中，我们最常用的功能有下面3个：</p><ul><li><a href="https://less.bootcss.com/#%E5%8F%98%E9%87%8F%EF%BC%88variables%EF%BC%89">变量</a></li><li><a href="https://less.bootcss.com/#%E5%B5%8C%E5%A5%97%EF%BC%88nesting%EF%BC%89">嵌套</a></li><li><a href="https://less.bootcss.com/#%E6%B7%B7%E5%90%88%EF%BC%88mixins%EF%BC%89">混合</a></li></ul><p>另外，你需要关注Less的特殊<a href="https://less.bootcss.com/#%E6%B3%A8%E9%87%8A%EF%BC%88comments%EF%BC%89">注释</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是Less？&quot;&gt;&lt;a href=&quot;#什么是Less？&quot; class=&quot;headerlink&quot; title=&quot;什么是Less？&quot;&gt;&lt;/a&gt;什么是Less？&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Less&lt;/strong&gt;是一种更加简洁的样式代码，它非常像CSS，但又不太</summary>
      
    
    
    
    
    <category term="工程化" scheme="http://example.com/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>npm</title>
    <link href="http://example.com/2023/03/30/%E5%B7%A5%E7%A8%8B%E5%8C%96/npm/"/>
    <id>http://example.com/2023/03/30/%E5%B7%A5%E7%A8%8B%E5%8C%96/npm/</id>
    <published>2023-03-29T16:00:00.000Z</published>
    <updated>2023-03-31T02:00:03.092Z</updated>
    
    <content type="html"><![CDATA[<h1 id="包的安装"><a href="#包的安装" class="headerlink" title="包的安装"></a>包的安装</h1><blockquote><p>安装（install）即下载包<br>由于 npm 的官方 registry 服务器位于国外，可能受网速影响导致下载缓慢或失败。因此，安装好 npm 之后，需要重新设置 registry 的地址为国内地址。目前，淘宝 <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a> 提供了国内的 registry 地址，先设置到该地址。设置方式为<code>npm config set registry https://registry.npm.taobao.org</code>。设置好后，通过命令<code>npm config get registry</code>进行检查</p><p>或者安装nrm 进行切换</p></blockquote><p>npm 安装一个包，分为两种安装方式：</p><ol><li>本地安装</li><li>全局安装</li></ol><h2 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h2><p>使用命令<code>npm install 包名</code>或<code>npm i 包名</code>即可完成本地安装</p><p>本地安装的包出现在当前目录下的<code>node_modules</code>目录中</p><blockquote><p>随着开发的进展，<code>node_modules</code>目录会变得异常庞大，目录下的内容不适合直接传输到生产环境，因此通常使用<code>.gitignore</code>文件忽略该目录中的内容<br>本地安装适用于绝大部分的包，它会在当前目录及其子目录中发挥作用<br>通常在项目的根目录中使用本地安装<br>安装一个包的时候，npm 会自动管理依赖，它会下载该包的依赖包到<code>node_modules</code>目录中<br>如果本地安装的包带有 CLI，npm 会将它的 CLI 脚本文件放置到<code>node_modules/.bin</code>下，使用命令<code>npx 命令名</code>即可调用</p></blockquote><h2 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h2><p>全局安装的包放置在一个特殊的全局目录，该目录可以通过命令<code>npm config get prefix</code>查看</p><p>使用命令<code>npm install --global 包名</code> 或 <code>npm i -g 包名</code></p><p>重要：<strong>全局安装的包并非所有工程可用，它仅提供全局的 CLI 工具</strong></p><p>大部分情况下，都不需要全局安装包，除非：</p><ol><li>包的版本非常稳定，很少有大的更新</li><li>提供的 CLI 工具在各个工程中使用的非常频繁</li><li>CLI 工具仅为开发环境提供支持，而非部署环境</li></ol><h1 id="包配置"><a href="#包配置" class="headerlink" title="包配置"></a>包配置</h1><p>目前遇到的问题：</p><ol><li>拷贝工程后如何还原？</li><li>如何区分开发依赖和生产依赖？</li><li>如果自身的项目也是一个包，如何描述包的信息</li></ol><p>以上这些问题都需要通过包的<strong>配置文件</strong>解决</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>npm 将每个使用 npm 的工程本身都看作是一个包，包的信息需要通过一个名称固定的配置文件来描述</p><p><strong>配置文件的名称固定为：package.json</strong></p><p>可以手动创建该文件，而更多的时候，是通过命令<code>npm init</code>创建的</p><p>配置文件中可以描述大量的信息，包括：</p><ul><li>name：包的名称，该名称必须是<strong>英文单词字符</strong>，支持连接符</li><li>version：版本<ul><li>版本规范：主版本号.次版本号.补丁版本号</li><li>主版本号：仅当程序发生了重大变化时才会增长，如新增了重要功能、新增了大量的API、技术架构发生了重大变化</li><li>次版本号：仅当程序发生了一些小变化时才会增长，如新增了一些小功能、新增了一些辅助型的API</li><li>补丁版本号：仅当解决了一些 bug 或 进行了一些局部优化时更新，如修复了某个函数的 bug、提升了某个函数的运行效率</li></ul></li><li>description：包的描述</li><li>homepage：官网地址</li><li>author：包的作者，必须是有效的 npm 账户名，书写规范是 <code>account &lt;mail&gt;</code>，例如：<code>zhangsan &lt;zhangsan@gmail.com&gt;</code>，不正确的账号和邮箱可能导致发布包时失败</li><li>repository：包的仓储地址，通常指 git 或 svn 的地址，它是一个对象<ul><li>type：仓储类型，git 或 svn</li><li>url：地址</li></ul></li><li>main：包的入口文件，使用包的人默认从该入口文件导入包的内容</li><li>keywords: 搜索关键字，发布包后，可以通过该数组中的关键字搜索到包</li></ul><p>使用<code>npm init --yes</code>或<code>npm init -y</code>可以在生成配置文件时自动填充默认配置</p><h2 id="保存依赖关系"><a href="#保存依赖关系" class="headerlink" title="保存依赖关系"></a>保存依赖关系</h2><p>大部分时候，我们仅仅是开发项目，并不会把它打包发布出去，尽管如此，我们仍然需要package.json文件</p><p><strong>package.json文件最重要的作用，是记录当前工程的依赖</strong></p><ul><li>dependencies：生产环境的依赖包</li><li>devDependencies：仅开发环境的依赖包</li></ul><p>配置好依赖后，使用下面的命令即可安装依赖</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 本地安装所有依赖 dependencies + devDependenciesnpm installnpm i## 仅安装生产环境的依赖 dependenciesnpm install --production<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样一来，代码移植就不是问题了，只需要移植源代码和package.json文件，不用移植node_modules目录，然后在移植之后通过命令即可重新恢复安装</p><p>为了更加方便的添加依赖，npm支持在使用install命令时，加入一些额外的参数，用于将安装的依赖包保存到package.json文件中</p><p>涉及的命令如下</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 安装依赖到生产环境npm i 包名npm i --save 包名npm i -S 包名## 安装依赖到开发环境npm i --save-dev 包名npm i -D 包名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>自动保存的依赖版本，例如<code>^15.1.3</code>，这种书写方式叫做语义版本号（semver version），具体规则后续讲解</p></blockquote><h1 id="包的使用"><a href="#包的使用" class="headerlink" title="包的使用"></a>包的使用</h1><p>nodejs 对 npm 支持非常良好</p><p>当使用 nodejs 导入模块时，如果模块路径不是以 ./ 或 ../ 开头，则 node 会认为导入的模块来自于 node_modules 目录，例如：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"lodash"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它首先会从当前目录的以下位置寻找文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">node_modules&#x2F;lodash.jsnode_modules&#x2F;lodash&#x2F;入口文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>若当前目录没有这样的文件，则会回溯到上级目录按照同样的方式查找</p><p>如果到顶级目录都无法找到文件，则抛出错误</p><p>上面提到的入口文件按照以下规则确定</p><ol><li>查看导入包的package.json文件，读取main字段作为入口文件</li><li>若不包含main字段，则使用index.js作为入口文件</li></ol><blockquote><p>入口文件的规则同样适用于自己工程中的模块<br>在 node 中，还可以手动指定路径来导入相应的文件，这种情况比较少见</p></blockquote><h1 id="语义版本"><a href="#语义版本" class="headerlink" title="语义版本"></a>语义版本</h1><p>思考：如果你编写了一个包A，依赖另外一个包B，你在编写代码时，包B的版本是2.4.1，你是希望使用你包的人一定要安装包B，并且是2.4.1版本，还是希望他可以安装更高的版本，如果你希望它安装更高的版本，高的什么程度呢？</p><p>回顾：版本号规则</p><p>版本规范：主版本号.次版本号.补丁版本号</p><ul><li>主版本号：仅当程序发生了重大变化时才会增长，如新增了重要功能、新增了大量的API、技术架构发生了重大变化</li><li>次版本号：仅当程序发生了一些小变化时才会增长，如新增了一些小功能、新增了一些辅助型的API</li><li>补丁版本号：仅当解决了一些 bug 或 进行了一些局部优化时更新，如修复了某个函数的 bug、提升了某个函数的运行效率</li></ul><p>有的时候，我们希望：安装我的依赖包的时候，次版本号和补丁版本号是可以有提升的，但是主版本号不能变化</p><p>有的时候，我们又希望：安装我的依赖包的时候，只有补丁版本号可以提升，其他都不能提升</p><p>甚至我们希望依赖包保持固定的版本，尽管这比较少见</p><p>这样一来，就需要在配置文件中描述清楚具体的依赖规则，而不是直接写上版本号那么简单。</p><p>这种规则的描述，即<strong>语义版本</strong></p><p>语义版本的书写规则非常丰富，下面列出了一些常见的书写方式</p><table><thead><tr><th align="center">符号</th><th align="center">描述</th><th align="center">示例</th><th align="center">示例描述</th></tr></thead><tbody><tr><td align="center">&gt;</td><td align="center">大于某个版本</td><td align="center">&gt;1.2.1</td><td align="center">大于1.2.1版本</td></tr><tr><td align="center">&gt;=</td><td align="center">大于等于某个版本</td><td align="center">&gt;=1.2.1</td><td align="center">大于等于1.2.1版本</td></tr><tr><td align="center">&lt;</td><td align="center">小于某个版本</td><td align="center">&lt;1.2.1</td><td align="center">小于1.2.1版本</td></tr><tr><td align="center">&lt;=</td><td align="center">小于等于某个版本</td><td align="center">&lt;=1.2.1</td><td align="center">小于等于1.2.1版本</td></tr><tr><td align="center">-</td><td align="center">介于两个版本之间</td><td align="center">1.2.1 - 1.4.5</td><td align="center">介于1.2.1和1.4.5之间</td></tr><tr><td align="center">x</td><td align="center">不固定的版本号</td><td align="center">1.3.x</td><td align="center">只要保证主版本号是1，次版本号是3即可</td></tr><tr><td align="center">~</td><td align="center">补丁版本号可增</td><td align="center">~1.3.4</td><td align="center">保证主版本号是1，次版本号是3，补丁版本号大于等于4</td></tr><tr><td align="center">^</td><td align="center">此版本和补丁版本可增</td><td align="center">^1.3.4</td><td align="center">保证主版本号是1，次版本号可以大于等于3，补丁版本号可以大于等于4</td></tr><tr><td align="center">*</td><td align="center">最新版本</td><td align="center">*</td><td align="center">始终安装最新版本</td></tr></tbody></table><h2 id="避免还原的差异"><a href="#避免还原的差异" class="headerlink" title="避免还原的差异"></a>避免还原的差异</h2><p>版本依赖控制始终是一个两难的问题</p><p>如果允许版本增加，可以让依赖包的bug得以修复（补丁版本号），可以带来一些意外的惊喜（次版本号），但同样可能带来不确定的风险（新的bug）</p><p>如果不允许版本增加，可以获得最好的稳定性，但失去了依赖包自我优化的能力</p><p>而有的时候情况更加复杂，如果依赖包升级后，依赖也发生了变化，会有更多不确定的情况出现</p><p>基于此，npm 在安装包的时候，会自动生成一个 package-lock.json 文件，该文件记录了安装包时的确切依赖关系</p><p>当移植工程时，如果移植了 package-lock.json 文件，恢复安装时，会按照 package-lock.json 文件中的确切依赖进行安装，最大限度的避免了差异</p><h2 id="扩展-npm的差异版本处理"><a href="#扩展-npm的差异版本处理" class="headerlink" title="[扩展]npm的差异版本处理"></a>[扩展]npm的差异版本处理</h2><p>如果两个包依赖同一个包的不同版本，如下图</p><p><img src="/imgs/module/2019-12-17-15-17-47.png"> </p><p>面对这种情况，在 node_modules 目录中，不会使用扁平的目录结构，而会形成嵌套的目录，如下：</p><pre class="line-numbers language-none"><code class="language-none">├── node_modules│   ├── a │   │   ├── node_modules│   │   │   ├── c│   │   │   |   |—— c包的文件│   │   │── a包的文件     │   ├── b │   │   ├── node_modules│   │   │   ├── c│   │   │   |   |—— c包的文件│   │   │── b包的文件           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="npm-脚本-（npm-scripts）"><a href="#npm-脚本-（npm-scripts）" class="headerlink" title="npm 脚本 （npm scripts）"></a>npm 脚本 （npm scripts）</h1><p>在开发的过程中，我们可能会反复使用很多的 CLI 命令，例如：</p><ul><li>启动工程命令（node 或 一些第三方包提供的CLI命令）</li><li>部署工程命令（一些第三方包提供的CLI命令）</li><li>测试工程命令（一些第三方包提供的CLI命令）</li></ul><p>这些命令纷繁复杂，根据第三方包的不同命令也会不一样，非常难以记忆</p><p>于是，npm 非常贴心的支持了脚本，只需要在 package.json 中配置 scripts 字段，即可配置各种脚本名称</p><p>之后，我们就可以运行简单的指令来完成各种操作了</p><p>运行方式是 <code>npm run 脚本名称</code></p><p>不仅如此，npm 还对某些常用的脚本名称进行了简化，下面的脚本名称是不需要使用run的：</p><ul><li>start</li><li>stop</li><li>test</li></ul><p>一些细节：</p><ul><li>脚本中可以省略npx</li><li>start脚本有默认值：node server.js</li></ul><h1 id="运行环境配置"><a href="#运行环境配置" class="headerlink" title="运行环境配置"></a>运行环境配置</h1><p>我们书写的代码一般有三种运行环境：</p><ol><li>开发环境</li><li>生产环境</li><li>测试环境</li></ol><p>有的时候，我们可能需要在 node 代码中根据不同的环境做出不同的处理</p><p>如何优雅的让 node 知道处于什么环境，是极其重要的</p><p>通常我们使用如下的处理方式：</p><p>node中有一个全局变量 global (可以类比浏览器环境的window)，该变量是一个对象，对象中的所有属性均可以直接使用</p><p>global有一个属性是process，该属性是一个对象，包含了当前运行node程序的计算机的很多信息，其中有一个信息是env，是一个对象，包含了计算机中所有的系统变量</p><p>通常，我们通过系统变量 NODE_ENV 的值，来判定node程序处于何种环境</p><p>有两种方式设置 NODE_ENV 的值</p><ol><li>永久设置</li><li>临时设置</li></ol><p>我们一般使用临时设置</p><p>因此，我们可以配置 scripts 脚本，在设置好了 NODE_ENV 后启动程序</p><blockquote><p>为了避免不同系统的设置方式的差异，可以使用第三方库 cross-env 对环境变量进行设置</p></blockquote><h2 id="在node中读取package-json"><a href="#在node中读取package-json" class="headerlink" title="在node中读取package.json"></a>在node中读取package.json</h2><p>有的时候，我们可能在 package.json 中配置一些自定义的字段，这些字段需要在node中读取</p><p>在node 中，可以直接导入一个json格式的文件，它会自动将其转换为js对象</p><h1 id="其他npm命令-ignore"><a href="#其他npm命令-ignore" class="headerlink" title="其他npm命令 {ignore}"></a>其他npm命令 {ignore}</h1><p>[toc]</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>精确安装最新版本</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install --save-exact 包名 npm install -E 包名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>安装指定版本</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install 包名@版本号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><ol><li>查询包安装路径</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm root [-g]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>查看包信息</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm view 包名 [子信息]## view aliases：v info show<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>查询安装包</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm list [-g] [--depth&#x3D;依赖深度]## list aliases: ls  la  ll<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><ol><li>检查有哪些包需要更新</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm outdated<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>更新包</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm update [-g] [包名]## update 别名（aliases）：up、upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="卸载包"><a href="#卸载包" class="headerlink" title="卸载包"></a>卸载包</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm uninstall [-g] 包名## uninstall aliases: remove, rm, r, un, unlink<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="npm-配置"><a href="#npm-配置" class="headerlink" title="npm 配置"></a>npm 配置</h2><p>npm的配置会对其他命令产生或多或少的影响</p><p>安装好npm之后，最终会产生两个配置文件，一个是用户配置，一个是系统配置，当两个文件的配置项有冲突的时候，用户配置会覆盖系统配置</p><p>通常，我们不关心具体的配置文件，而只关心最终生效的配置</p><p>通过下面的命令可以查询目前生效的各种配置</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm config ls [-l] [--json]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另外，可以通过下面的命令操作配置</p><ol><li>获取某个配置项</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm config get 配置项<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>设置某个配置项</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm config set 配置项&#x3D;值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>移除某个配置项</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm config delete 配置项<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="发布包"><a href="#发布包" class="headerlink" title="发布包"></a>发布包</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>移除淘宝镜像源</li><li>到npm官网注册一个账号，并完成邮箱认证</li><li>本地使用 npm cli 进行登录<ol><li>使用命令<code>npm login</code>登录</li><li>使用命令<code>npm whoami</code>查看当前登录的账号</li><li>使用命令<code>npm logout</code>注销</li></ol></li><li>创建工程根目录</li><li>使用npm init进行初始化</li></ol><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><ol><li>开发</li><li>确定版本</li><li>使用命令<code>npm publish</code>完成发布</li></ol><p># 开源协议</p><p><img src="/imgs/module/2019-12-18-16-03-02.png"></p><p>可以通过网站 <a href="http://choosealicense.online/appendix/">http://choosealicense.online/appendix/</a> 选择协议，并复制协议内容</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;包的安装&quot;&gt;&lt;a href=&quot;#包的安装&quot; class=&quot;headerlink&quot; title=&quot;包的安装&quot;&gt;&lt;/a&gt;包的安装&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;安装（install）即下载包&lt;br&gt;由于 npm 的官方 registry 服务器位于国外，可能</summary>
      
    
    
    
    
    <category term="工程化" scheme="http://example.com/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>包管理器概述</title>
    <link href="http://example.com/2023/03/30/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8%E6%A6%82%E8%BF%B0/"/>
    <id>http://example.com/2023/03/30/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8%E6%A6%82%E8%BF%B0/</id>
    <published>2023-03-29T16:00:00.000Z</published>
    <updated>2023-03-30T06:31:51.026Z</updated>
    
    <content type="html"><![CDATA[<h1 id="包管理工具概述"><a href="#包管理工具概述" class="headerlink" title="包管理工具概述"></a>包管理工具概述</h1><blockquote><p>前置知识：JavaScript、ES6、模块化、git<br>所有代码均书写在 nodejs 环境中，不涉及浏览器环境</p></blockquote><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>模块（module）</strong></p><p>通常以单个文件形式存在的功能片段，入口文件通常称之为<strong>入口模块</strong>或<strong>主模块</strong></p><p><strong>库（library，简称lib）</strong></p><p>以一个或多个模块组成的完整功能块，为开发中某一方面的问题提供完整的解决方案</p><p><strong>包（package）</strong></p><p>包含元数据的库，这些元数据包括：名称、描述、git主页、许可证协议、作者、依赖等等</p><p><img src="/imgs/module/2019-12-13-10-39-18.png"></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>CommonJS 的出现，使 node 环境下的 JS 代码可以用模块更加细粒度的划分。一个类、一个函数、一个对象、一个配置等等均可以作为模块，这种细粒度的划分，是开发大型应用的基石。</p><p>为了解决在开发过程中遇到的常见问题，比如加密、提供常见的工具方法、模拟数据等等，一时间，在前端社区涌现了大量的第三方库。这些库使用 CommonJS 标准书写而成，非常容易使用。</p><p>然而，在下载使用这些第三方库的时候，遇到难以处理的问题：</p><ul><li><strong>下载过程繁琐</strong><ul><li>进入官网或 github 主页</li><li>找到并下载相应的版本</li><li>拷贝到工程的目录中</li><li>如果遇到有同名的库，需要更改名称</li></ul></li><li><strong>如果该库需要依赖其他库，还需要按照要求先下载其他库</strong></li><li><strong>开发环境中安装的大量的库如何在生产环境中还原，又如何区分</strong></li><li><strong>更新一个库极度麻烦</strong></li><li><strong>自己开发的库，如何在下一次开发使用</strong></li></ul><p><strong>以上问题，就是包管理工具要解决的问题</strong></p><h2 id="前端包管理器"><a href="#前端包管理器" class="headerlink" title="前端包管理器"></a>前端包管理器</h2><blockquote><p>npm：重点<br>yarn：次重点<br>其他：了解</p></blockquote><p>几乎可以这样认为，前端所有的包管理器都是基于 npm 的，目前，npm 即是一个包管理器，也是其他包管理的基石</p><p>npm 全称为 node package manager，即 node 包管理器，它运行在 node 环境中，让开发者可以用简单的方式完成包的查找、安装、更新、卸载、上传等操作</p><blockquote><p>npm 之所以要运行在 node 环境，而不是浏览器环境，根本原因是因为浏览器环境无法提供下载、删除、读取本地文件的功能。而 node 属于服务器环境，没有浏览器的种种限制，理论上可以完全掌控运行 node 的计算机。</p></blockquote><p>npm 的出现，弥补了 node 没有包管理器的缺陷，于是很快，node 在安装文件中内置了 npm，当开发者安装好 node 之后，就自动安装了 npm，不仅如此，node 环境还专门为 npm 提供了良好的支持，使用 npm 下载的包更加方便了。</p><p>npm 由三部分组成：</p><ul><li>registry：入口<ul><li>可以把它想象成一个庞大的数据库</li><li>第三方库的开发者，将自己的库按照 npm 的规范，打包上传到数据库中</li><li>使用者通过统一的地址下载第三方包</li></ul></li><li>官网：<a href="https://www.npmjs.com/">https://www.npmjs.com/</a><ul><li>查询包</li><li>注册、登录、管理个人信息</li></ul></li><li>CLI：command-line interface 命令行接口<ul><li>讲解的重点</li><li>安装好 npm 后，通过 CLI 来使用 npm 的各种功能</li></ul></li></ul><blockquote><p>node 和 npm 是互相成就的，node 的出现让 npm 火了，npm 的火爆带动了大量的第三方库的发展，很多优秀的第三方库打包上传到了 npm，这些第三方库又为 node 带来了大量的用户</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;包管理工具概述&quot;&gt;&lt;a href=&quot;#包管理工具概述&quot; class=&quot;headerlink&quot; title=&quot;包管理工具概述&quot;&gt;&lt;/a&gt;包管理工具概述&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;前置知识：JavaScript、ES6、模块化、git&lt;br&gt;所有代码均书</summary>
      
    
    
    
    
    <category term="工程化" scheme="http://example.com/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>CommonJs</title>
    <link href="http://example.com/2023/03/29/%E5%B7%A5%E7%A8%8B%E5%8C%96/CommonJs/"/>
    <id>http://example.com/2023/03/29/%E5%B7%A5%E7%A8%8B%E5%8C%96/CommonJs/</id>
    <published>2023-03-28T16:00:00.000Z</published>
    <updated>2023-03-30T06:20:05.306Z</updated>
    
    <content type="html"><![CDATA[<p>在nodejs中，由于有且仅有一个入口文件（启动文件），而开发一个应用肯定会涉及到多个文件配合，因此，nodejs对模块化的需求比浏览器端要大的多</p><p><img src="/imgs/module/2019-12-02-11-15-01.png"><br>由于nodejs刚刚发布的时候，前端没有统一的、官方的模块化规范，因此，它选择使用社区提供的CommonJS作为模块化规范</p><p>在学习CommonJS之前，首先认识两个重要的概念：<strong>模块的导出</strong>和<strong>模块的导入</strong></p><h2 id="模块的导出"><a href="#模块的导出" class="headerlink" title="模块的导出"></a>模块的导出</h2><p>要理解模块的导出，首先要理解模块的含义</p><p>什么是模块？</p><p>模块就是一个JS文件，它实现了一部分功能，并隐藏自己的内部实现，同时提供了一些接口供其他模块使用</p><p>模块有两个核心要素：<strong>隐藏</strong>和<strong>暴露</strong></p><p>隐藏的，是自己内部的实现</p><p>暴露的，是希望外部使用的接口</p><p>任何一个正常的模块化标准，都应该默认隐藏模块中的所有实现，而通过一些语法或api调用来暴露接口</p><p><strong>暴露接口的过程即模块的导出</strong></p><p><img src="/imgs/module/2019-12-02-11-27-12.png"></p><h2 id="模块的导入"><a href="#模块的导入" class="headerlink" title="模块的导入"></a>模块的导入</h2><p>当需要使用一个模块时，使用的是该模块暴露的部分（导出的部分），隐藏的部分是永远无法使用的。</p><p><strong>当通过某种语法或api去使用一个模块时，这个过程叫做模块的导入</strong></p><h2 id="CommonJS规范"><a href="#CommonJS规范" class="headerlink" title="CommonJS规范"></a>CommonJS规范</h2><p>CommonJS使用<code>exports</code>导出模块，<code>require</code>导入模块</p><p>具体规范如下：</p><ol><li>如果一个JS文件中存在<code>exports</code>或<code>require</code>，该JS文件是一个模块</li><li>模块内的所有代码均为隐藏代码，包括全局变量、全局函数，这些全局的内容均不应该对全局变量造成任何污染</li><li>如果一个模块需要暴露一些API提供给外部使用，需要通过<code>exports</code>导出，<code>exports</code>是一个空的对象，你可以为该对象添加任何需要导出的内容</li><li>如果一个模块需要导入其他模块，通过<code>require</code>实现，<code>require</code>是一个函数，传入模块的路径即可返回该模块导出的整个内容</li></ol><h2 id="nodejs对CommonJS的实现"><a href="#nodejs对CommonJS的实现" class="headerlink" title="nodejs对CommonJS的实现"></a>nodejs对CommonJS的实现</h2><p>为了实现CommonJS规范，nodejs对模块做出了以下处理</p><ol><li><p>为了保证高效的执行，仅加载必要的模块。nodejs只有执行到<code>require</code>函数时才会加载并执行模块</p></li><li><p>为了隐藏模块中的代码，nodejs执行模块时，会将模块中的所有代码放置到一个函数中执行，以保证不污染全局变量。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//模块中的代码</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>为了保证顺利的导出模块内容，nodejs做了以下处理</p><ol><li>在模块开始执行前，初始化一个值<code>module.exports = &#123;&#125;</code></li><li><code>module.exports</code>即模块的导出值</li><li>为了方便开发者便捷的导出，nodejs在初始化完<code>module.exports</code>后，又声明了一个变量<code>exports = module.exports</code></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> exports <span class="token operator">=</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>    <span class="token comment">//模块中的代码</span>    <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>为了避免反复加载同一个模块，nodejs默认开启了模块缓存，如果加载的模块已经被加载过了，则会自动使用之前的导出结果</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在nodejs中，由于有且仅有一个入口文件（启动文件），而开发一个应用肯定会涉及到多个文件配合，因此，nodejs对模块化的需求比浏览器端要大的多&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/imgs/module/2019-12-02-11-15-01.png&quot;&gt;&lt;br&gt;由于no</summary>
      
    
    
    
    
    <category term="工程化" scheme="http://example.com/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>ES module</title>
    <link href="http://example.com/2023/03/29/%E5%B7%A5%E7%A8%8B%E5%8C%96/ES%20module/"/>
    <id>http://example.com/2023/03/29/%E5%B7%A5%E7%A8%8B%E5%8C%96/ES%20module/</id>
    <published>2023-03-28T16:00:00.000Z</published>
    <updated>2023-03-30T06:18:49.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6模块化简介"><a href="#ES6模块化简介" class="headerlink" title="ES6模块化简介"></a>ES6模块化简介</h1><p>ECMA组织参考了众多社区模块化标准，终于在2015年，随着ES6发布了官方的模块化标准，后成为ES6模块化</p><p>ES6模块化具有以下的特点</p><ol><li>使用依赖<strong>预声明</strong>的方式导入模块<ol><li>依赖延迟声明<ol><li>优点：某些时候可以提高效率</li><li>缺点：无法在一开始确定模块依赖关系（比较模糊）</li></ol></li><li>依赖预声明<ol><li>优点：在一开始可以确定模块依赖关系</li><li>缺点：某些时候效率较低</li></ol></li></ol></li><li>灵活的多种导入导出方式</li><li>规范的路径表示法：所有路径必须以./或../开头</li></ol><h1 id="基本导入导出"><a href="#基本导入导出" class="headerlink" title="基本导入导出"></a>基本导入导出</h1><h2 id="模块的引入"><a href="#模块的引入" class="headerlink" title="模块的引入"></a>模块的引入</h2><p><strong>注意：这一部分非模块化标准</strong></p><p>目前，浏览器使用以下方式引入一个ES6模块文件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>入口文件<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="模块的基本导出和导入"><a href="#模块的基本导出和导入" class="headerlink" title="模块的基本导出和导入"></a>模块的基本导出和导入</h2><p>ES6中的模块导入导出分为两种：</p><ol><li>基本导入导出</li><li>默认导入导出</li></ol><p><img src="/imgs/module/2019-12-03-17-00-44.png"></p><h3 id="基本导出"><a href="#基本导出" class="headerlink" title="基本导出"></a>基本导出</h3><p>类似于 <code>exports.xxx = xxxx</code></p><p>基本导出可以有多个，每个必须有名称</p><p>基本导出的语法如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> 声明表达式<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>具名符号<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于基本导出必须具有名称，所以要求导出内容必须跟上<strong>声明表达式</strong>或<strong>具名符号</strong></p><h3 id="基本导入"><a href="#基本导入" class="headerlink" title="基本导入"></a>基本导入</h3><p>由于使用的是<strong>依赖预加载</strong>，因此，导入任何其他模块，导入代码必须放置到所有代码之前</p><p>对于基本导出，如果要进行导入，使用下面的代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>导入的符号列表<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"模块路径"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意以下细节：</p><ul><li>导入时，可以通过关键字<code>as</code>对导入的符号进行重命名</li><li>导入时使用的符号是常量，不可修改</li><li>可以使用*号导入所有的基本导出，形成一个对象</li></ul><h1 id="默认导入导出"><a href="#默认导入导出" class="headerlink" title="默认导入导出"></a>默认导入导出</h1><p><img src="/imgs/module/2019-12-03-17-00-44.png"></p><h2 id="默认导出"><a href="#默认导出" class="headerlink" title="默认导出"></a>默认导出</h2><p>每个模块，除了允许有多个基本导出之外，还允许有一个默认导出</p><p>默认导出类似于CommonJS中的<code>module.exports</code>，由于只有一个，因此无需具名</p><p>具体的语法是</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> 默认导出的数据<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>默认导出的数据 <span class="token keyword">as</span> <span class="token keyword">default</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于每个模块仅允许有一个默认导出，因此，每个模块不能出现多个默认导出语句</p><h2 id="默认导入"><a href="#默认导入" class="headerlink" title="默认导入"></a>默认导入</h2><p>需要想要导入一个模块的默认导出，需要使用下面的语法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> 接收变量名 <span class="token keyword">from</span> <span class="token string">"模块路径"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>类似于CommonJS中的</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> 接收变量名 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"模块路径"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于默认导入时变量名是自行定义的，因此没有别名一说</p><p>如果希望同时导入某个模块的默认导出和基本导出，可以使用下面的语法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> 接收默认导出的变量<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>接收基本导出的变量<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"模块路径"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：如果使用*号，会将所有基本导出和默认导出聚合到一个对象中，默认导出会作为属性default存在</p><h1 id="ES6模块化的其他细节"><a href="#ES6模块化的其他细节" class="headerlink" title="ES6模块化的其他细节"></a>ES6模块化的其他细节</h1><ol><li><strong>尽量导出不可变值</strong></li></ol><p>当导出一个内容时，尽量保证该内容是不可变的（大部分情况都是如此）</p><p>因为，虽然导入后，无法更改导入内容，但是在导入的模块内部却有可能发生更改，这将导致一些无法预料的事情发生</p><ol start="2"><li><strong>可以使用无绑定的导入用于执行一些初始化代码</strong></li></ol><p>如果我们只是想执行模块中的一些代码，而不需要导入它的任何内容，可以使用无绑定的导入：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">"模块路径"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><strong>可以使用绑定再导出，来重新导出来自另一个模块的内容</strong></li></ol><p>有的时候，我们可能需要用一个模块封装多个模块，然后有选择的将多个模块的内容分别导出，可以使用下面的语法轻松完成</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>绑定的标识符<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"模块路径"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/imgs/module/2019-12-04-14-33-14.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ES6模块化简介&quot;&gt;&lt;a href=&quot;#ES6模块化简介&quot; class=&quot;headerlink&quot; title=&quot;ES6模块化简介&quot;&gt;&lt;/a&gt;ES6模块化简介&lt;/h1&gt;&lt;p&gt;ECMA组织参考了众多社区模块化标准，终于在2015年，随着ES6发布了官方的模块化标准，后</summary>
      
    
    
    
    
    <category term="工程化" scheme="http://example.com/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>浏览器渲染原理</title>
    <link href="http://example.com/2023/03/16/js/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/"/>
    <id>http://example.com/2023/03/16/js/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/</id>
    <published>2023-03-15T16:00:00.000Z</published>
    <updated>2023-03-16T06:06:39.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="渲染时间点"><a href="#渲染时间点" class="headerlink" title="渲染时间点"></a>渲染时间点</h1><p><img src="/imgs/%E6%B8%B2%E6%9F%93%E6%97%B6%E9%97%B4.png" alt="Image text"></p><h1 id="渲染流⽔线"><a href="#渲染流⽔线" class="headerlink" title="渲染流⽔线"></a>渲染流⽔线</h1><p><img src="/imgs/%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B.png" alt="Image text"></p><h2 id="1-解析-HTML-Parse-HTML"><a href="#1-解析-HTML-Parse-HTML" class="headerlink" title="1. 解析 HTML - Parse HTML"></a>1. 解析 HTML - Parse HTML</h2><p>  <img src="/imgs/%E8%A7%A3%E6%9E%90.png" alt="Image text"><br>  <img src="/imgs/%E8%A7%A3%E6%9E%902.png" alt="Image text"><br>  <img src="/imgs/%E8%A7%A3%E6%9E%903.png" alt="Image text"></p><p>  为了提⾼解析效率，浏览器会启动⼀个预解析器率先下载和解析 CSS<br>  <img src="/imgs/%E8%A7%A3%E6%9E%904.png" alt="Image text"></p><p>  渲染主线程遇到 JS 时必须暂停⼀切⾏为，等待下载执⾏完后才能继续预解析线程可以分担⼀点下载 JS 的任务<br>  <img src="/imgs/%E8%A7%A3%E6%9E%905.png" alt="Image text"></p><h2 id="2-样式计算-Recalculate-Style"><a href="#2-样式计算-Recalculate-Style" class="headerlink" title="2. 样式计算 - Recalculate Style"></a>2. 样式计算 - Recalculate Style</h2><p>   <img src="/imgs/%E8%AE%A1%E7%AE%97%E6%A0%B7%E5%BC%8F.png" alt="Image text"></p><h2 id="3-布局-Layout"><a href="#3-布局-Layout" class="headerlink" title="3. 布局 - Layout"></a>3. 布局 - Layout</h2><p>  <img src="/imgs/%E5%B8%83%E5%B1%80.png" alt="Image text"><br>  DOM 树 和 Layout 树不⼀定是⼀⼀对应的<br>  <img src="/imgs/%E5%B8%83%E5%B1%802.png" alt="Image text"><br>  <img src="/imgs/%E5%B8%83%E5%B1%803.png" alt="Image text"><br>  <img src="/imgs/%E5%B8%83%E5%B1%804.png" alt="Image text"></p><h2 id="4-分层-Layer"><a href="#4-分层-Layer" class="headerlink" title="4. 分层 - Layer"></a>4. 分层 - Layer</h2><p>  页面变动的时候不会整体重绘<br> <img src="/imgs/%E5%88%86%E5%B1%82.png" alt="Image text"></p><h2 id="5-绘制-Paint"><a href="#5-绘制-Paint" class="headerlink" title="5. 绘制 - Paint"></a>5. 绘制 - Paint</h2><p><img src="/imgs/%E7%BB%98%E5%88%B6.png" alt="Image text"><br>渲染主线程的⼯作到此为⽌，剩余步骤交给其他线程完成<br><img src="/imgs/%E7%BB%98%E5%88%B62.png" alt="Image text"></p><h2 id="6-分块-Tiling"><a href="#6-分块-Tiling" class="headerlink" title="6. 分块 - Tiling"></a>6. 分块 - Tiling</h2><p><img src="/imgs/%E5%88%86%E5%9D%97.png" alt="Image text"><br><img src="/imgs/%E5%88%86%E5%9D%972.png" alt="Image text"></p><h2 id="7-光栅化-Raster"><a href="#7-光栅化-Raster" class="headerlink" title="7. 光栅化 - Raster"></a>7. 光栅化 - Raster</h2><p><img src="/imgs/%E5%85%89%E6%A0%85%E5%8C%96.png" alt="Image text"><br><img src="/imgs/%E5%85%89%E6%A0%85%E5%8C%962.png" alt="Image text"></p><h2 id="8-画-Draw"><a href="#8-画-Draw" class="headerlink" title="8. 画 - Draw"></a>8. 画 - Draw</h2><p><img src="/imgs/%E7%94%BB.png" alt="Image text"></p><h1 id="完整过程"><a href="#完整过程" class="headerlink" title="完整过程"></a>完整过程</h1><p><img src="/imgs/%E5%AE%8C%E6%95%B4%E8%BF%87%E7%A8%8B.png" alt="Image text"></p><h1 id="常⻅⾯试题"><a href="#常⻅⾯试题" class="headerlink" title="常⻅⾯试题"></a>常⻅⾯试题</h1><h2 id="什么是-reflow-？"><a href="#什么是-reflow-？" class="headerlink" title="什么是 reflow ？"></a>什么是 reflow ？</h2><p><img src="/imgs/reflow.png" alt="Image text"></p><h2 id="什么是-什么是-repaint"><a href="#什么是-什么是-repaint" class="headerlink" title="什么是 什么是 repaint?"></a>什么是 什么是 repaint?</h2><p><img src="/imgs/repaint.png" alt="Image text"></p><h2 id="什么是-什么是-为什么-transform-效率⾼？"><a href="#什么是-什么是-为什么-transform-效率⾼？" class="headerlink" title="什么是 什么是 为什么 transform 效率⾼？"></a>什么是 什么是 为什么 transform 效率⾼？</h2><p><img src="/imgs/transform.png" alt="Image text"><br><img src="/imgs/transform2.png" alt="Image text"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;渲染时间点&quot;&gt;&lt;a href=&quot;#渲染时间点&quot; class=&quot;headerlink&quot; title=&quot;渲染时间点&quot;&gt;&lt;/a&gt;渲染时间点&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/imgs/%E6%B8%B2%E6%9F%93%E6%97%B6%E9%97%B4.png&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>代码评审</title>
    <link href="http://example.com/2023/03/02/%E5%B7%A5%E4%BD%9C%E9%A1%B9%E7%9B%AE/%E5%B7%A5%E4%BD%9C-%E4%BB%A3%E7%A0%81%E8%AF%84%E5%AE%A1/"/>
    <id>http://example.com/2023/03/02/%E5%B7%A5%E4%BD%9C%E9%A1%B9%E7%9B%AE/%E5%B7%A5%E4%BD%9C-%E4%BB%A3%E7%A0%81%E8%AF%84%E5%AE%A1/</id>
    <published>2023-03-01T16:00:00.000Z</published>
    <updated>2023-03-02T03:38:52.140Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码规范的必要性"><a href="#代码规范的必要性" class="headerlink" title="代码规范的必要性"></a>代码规范的必要性</h1><ol><li>规范的代码可以促进团队合作</li><li>规范的代码可以减少bug处理</li><li>规范的代码可以降低维护成本</li><li>养成代码规范的习惯，有助于程序员自身的成长<br>…</li></ol><h1 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h1><h2 id="超长if判断"><a href="#超长if判断" class="headerlink" title="超长if判断"></a>超长if判断</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        i<span class="token punctuation">.</span>isThum <span class="token operator">=</span> <span class="token operator">!</span>i<span class="token punctuation">.</span>isThum<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span>isThum <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 判断类型，后续要添加(没有5)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span>sourceType <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">articleCommentThumb</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                i<span class="token punctuation">.</span>likeCount<span class="token operator">++</span><span class="token punctuation">;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"点赞成功"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"点赞失败"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span>sourceType <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">perfumeCommentThumb</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>commentId<span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                i<span class="token punctuation">.</span>likeCount<span class="token operator">++</span><span class="token punctuation">;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"点赞成功"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"点赞失败"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span>sourceType <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">moodLike</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>              moodId<span class="token operator">:</span> i<span class="token punctuation">.</span>commentId<span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                i<span class="token punctuation">.</span>likeCount<span class="token operator">++</span><span class="token punctuation">;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"点赞成功"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"点赞失败"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span>sourceType <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> datas <span class="token operator">=</span> <span class="token punctuation">&#123;</span>              id<span class="token operator">:</span> i<span class="token punctuation">.</span>commentId<span class="token punctuation">,</span>              title<span class="token operator">:</span> i<span class="token punctuation">.</span>title<span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token function">ordinaryThumb</span><span class="token punctuation">(</span>datas<span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                i<span class="token punctuation">.</span>likeCount<span class="token operator">++</span><span class="token punctuation">;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"点赞成功"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"点赞失败"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">memberGrowthActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 判断类型，后续要添加</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span>sourceType <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">articleCommentThumb</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                i<span class="token punctuation">.</span>likeCount<span class="token operator">--</span><span class="token punctuation">;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"取消点赞"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"取消失败"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span>sourceType <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">perfumeCommentThumb</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>commentId<span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                i<span class="token punctuation">.</span>likeCount<span class="token operator">--</span><span class="token punctuation">;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"取消点赞"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"取消失败"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span>sourceType <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> datas <span class="token operator">=</span> <span class="token punctuation">&#123;</span>              id<span class="token operator">:</span> i<span class="token punctuation">.</span>commentId<span class="token punctuation">,</span>              title<span class="token operator">:</span> i<span class="token punctuation">.</span>title<span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token function">ordinaryThumb</span><span class="token punctuation">(</span>datas<span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                i<span class="token punctuation">.</span>likeCount<span class="token operator">--</span><span class="token punctuation">;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"取消点赞"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"取消失败"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span>sourceType <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">moodLike</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>              moodId<span class="token operator">:</span> i<span class="token punctuation">.</span>commentId<span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                i<span class="token punctuation">.</span>likeCount<span class="token operator">--</span><span class="token punctuation">;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"取消点赞"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"取消失败"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>阅读性太差</li><li>缺少注释</li><li>复用性几乎没有</li></ol><h2 id="修改思路"><a href="#修改思路" class="headerlink" title="修改思路"></a>修改思路</h2><ol><li>不管取消点赞还是点赞，调用的接口都是同一个，所以没必要根据现有状态判断执行两次，唯一的变化是数量的减少和状态的修改</li><li>同一个属性多个不同的状态，可以改写成<code>object[key]()</code>的方式调用</li><li>根据数值判断的状态需要注释，时间长了就不记得了状态值得意思</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 点击成功执行</span><span class="token keyword">const</span> <span class="token function-variable function">successPrompt</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> title <span class="token operator">=</span> <span class="token string">'点赞成功'</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>isThum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    i<span class="token punctuation">.</span>likeCount<span class="token operator">--</span><span class="token punctuation">;</span>    title <span class="token operator">=</span> <span class="token string">'取消成功'</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>    i<span class="token punctuation">.</span>likeCount<span class="token operator">++</span><span class="token punctuation">;</span>    title <span class="token operator">=</span> <span class="token string">'点赞成功'</span>  <span class="token punctuation">&#125;</span>  uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      title<span class="token punctuation">,</span>      icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>      duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 点击失败</span><span class="token keyword">const</span> <span class="token function-variable function">failurePrompt</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> title <span class="token operator">=</span> <span class="token string">'点赞失败'</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>isThum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    title <span class="token operator">=</span> <span class="token string">'点赞失败'</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>    title <span class="token operator">=</span> <span class="token string">'取消失败'</span>  <span class="token punctuation">&#125;</span>  uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    title<span class="token punctuation">,</span>    icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>    duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 这里写一下注释</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token number">1</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">perfumeCommentThumb</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>commentId<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">successPrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">failurePrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">moodLike</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>moodId<span class="token operator">:</span> i<span class="token punctuation">.</span>commentId<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">successPrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">failurePrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">ordinaryThumb</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      id<span class="token operator">:</span> i<span class="token punctuation">.</span>commentId<span class="token punctuation">,</span>      title<span class="token operator">:</span> i<span class="token punctuation">.</span>title<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">successPrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">failurePrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">.</span>sourceType<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;代码规范的必要性&quot;&gt;&lt;a href=&quot;#代码规范的必要性&quot; class=&quot;headerlink&quot; title=&quot;代码规范的必要性&quot;&gt;&lt;/a&gt;代码规范的必要性&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;规范的代码可以促进团队合作&lt;/li&gt;
&lt;li&gt;规范的代码可以减少bug处理&lt;/l</summary>
      
    
    
    
    
    <category term="美逆项目" scheme="http://example.com/tags/%E7%BE%8E%E9%80%86%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>JS 事件循环</title>
    <link href="http://example.com/2023/02/28/js/js-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"/>
    <id>http://example.com/2023/02/28/js/js-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</id>
    <published>2023-02-27T16:00:00.000Z</published>
    <updated>2023-04-04T08:22:16.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浏览器的进程模型"><a href="#浏览器的进程模型" class="headerlink" title="浏览器的进程模型"></a>浏览器的进程模型</h1><h2 id="何为进程？"><a href="#何为进程？" class="headerlink" title="何为进程？"></a>何为进程？</h2><pre><code>每个应⽤⾄少有⼀个进程，进程之间相互独⽴，即使要通信，也需要双⽅同意。</code></pre><h2 id="何为线程？"><a href="#何为线程？" class="headerlink" title="何为线程？"></a>何为线程？</h2><pre><code>有了进程后，就可以运⾏程序的代码了。运⾏代码的「⼈」称之为「线程」。⼀个进程⾄少有⼀个线程，所以在进程开启后会⾃动创建⼀个线程来运⾏代码，该线程称之为主线程。如果程序需要同时执⾏多块代码，主线程就会启动更多的线程来执⾏代码，所以⼀个进程中可以包含多个线程。</code></pre><h1 id="浏览器有哪些进程和线程？"><a href="#浏览器有哪些进程和线程？" class="headerlink" title="浏览器有哪些进程和线程？"></a>浏览器有哪些进程和线程？</h1><h2 id="浏览器是⼀个多进程多线程的应⽤程序"><a href="#浏览器是⼀个多进程多线程的应⽤程序" class="headerlink" title="浏览器是⼀个多进程多线程的应⽤程序"></a>浏览器是⼀个多进程多线程的应⽤程序</h2><p>  浏览器内部⼯作极其复杂。</p><p>  为了避免相互影响，为了减少连环崩溃的⼏率，当启动浏览器后，它会⾃动启动多个进程</p><blockquote><p>可以在浏览器的任务管理器中查看当前的所有进程</p></blockquote><p>其中，最主要的进程有：</p><ul><li><p>浏览器进程<br>  主要负责界⾯显示、⽤户交互、⼦进程管理等。浏览器进程内部会启动多个线程处理不同的任务。</p></li><li><p>⽹络进程<br>  负责加载⽹络资源。⽹络进程内部会启动多个线程来处理不同的⽹络任务。</p></li><li><p>渲染进程<br>  渲染进程启动后，会开启⼀个渲染主线程，主线程负责执⾏ HTML、CSS、JS 代码。<br>  默认情况下，浏览器会为每个标签⻚开启⼀个新的渲染进程，以保证不同的标签⻚之间不相互影响</p></li></ul><h1 id="渲染主线程是如何⼯作的？"><a href="#渲染主线程是如何⼯作的？" class="headerlink" title="渲染主线程是如何⼯作的？"></a>渲染主线程是如何⼯作的？</h1><p>  渲染主线程是浏览器中最繁忙的线程，需要它处理的任务包括但不限于：</p><ul><li>解析 HTML</li><li>解析 CSS</li><li>计算样式</li><li>布局</li><li>处理图层</li><li>每秒把⻚⾯画 60 次</li><li>执⾏全局 JS 代码</li><li>执⾏事件处理函数</li><li>执⾏计时器的回调函数<br>…</li></ul><h2 id="如何调度任务？"><a href="#如何调度任务？" class="headerlink" title="如何调度任务？"></a>如何调度任务？</h2><p><img src="/imgs/eventLoop.png" alt="Image text"></p><ol><li>在最开始的时候，渲染主线程会进⼊⼀个⽆限循环</li><li>每⼀次循环会检查消息队列中是否有任务存在。如果有，就取出第⼀个任务执⾏，执⾏完⼀个后进⼊下⼀次循环；如果没有，则进⼊休眠状态。</li><li>其他所有线程（包括其他进程的线程）可以随时向消息队列添加任务。新任务会加到消息队列的末尾。在添加新任务时，如果主线程是休眠状态，则会将其唤醒以继续循环拿取任务</li></ol><p><em>整个过程，被称之为事件循环（消息循环）</em></p><h2 id="何为异步？"><a href="#何为异步？" class="headerlink" title="何为异步？"></a>何为异步？</h2><p>代码在执⾏过程中，会遇到⼀些⽆法⽴即处理的任务，⽐如：</p><ul><li>计时完成后需要执⾏的任务 —— setTimeout 、 setInterval</li><li>⽹络通信完成后需要执⾏的任务 – XHR 、 Fetch</li><li>⽤户操作后需要执⾏的任务 – addEventListener<br>如果让渲染主线程等待这些任务的时机达到，就会导致主线程⻓期处于「阻塞」的状态，从⽽导致浏览器「卡死」</li></ul><p><em>渲染主线程承担着极其重要的⼯作，⽆论如何都不能阻塞！</em><br><img src="/imgs/%E5%BC%82%E6%AD%A5.png" alt="Image text"></p><blockquote><p>⾯试题：如何理解 JS 的异步？<br>  参考答案：<br>  JS是⼀⻔单线程的语⾔，这是因为它运⾏在浏览器的渲染主线程中，⽽渲染主线程只有⼀个。⽽渲染主线程承担着诸多的⼯作，渲染⻚⾯、执⾏ JS 都在其中运⾏。<br>  如果使⽤同步的⽅式，就极有可能导致主线程产⽣阻塞，从⽽导致消息队列中的很多其他任务⽆法得到执⾏。这样⼀来，⼀⽅⾯会导致繁忙的主线程⽩⽩的消耗时间，另⼀⽅⾯导致⻚⾯⽆法及时更新，给⽤户造成卡死现象。所以浏览器采⽤异步的⽅式来避免。具体做法是当某些任务发⽣时，⽐如计时器、⽹络、事件监听，主线程将任务交给其他线程去处理，⾃身⽴即结束任务的执⾏，转⽽执⾏后续代码。当其他线程完成时，将事先传递的回调函数包装成任务，加⼊到消息队列末尾排队，等待主线程调度执⾏。<br>  在这种异步模式下，浏览器永不阻塞，从⽽最⼤限度的保证了单线程的流畅运⾏</p></blockquote><h1 id="任务有优先级吗？"><a href="#任务有优先级吗？" class="headerlink" title="任务有优先级吗？"></a>任务有优先级吗？</h1><p>任务没有优先级，在消息队列中先进先出但<b>消息队列是有优先级的</b></p><ul><li>每个任务都有⼀个任务类型，同⼀个类型的任务必须在⼀个队列，不同类型的任务可以分属于不同的队列。</li><li>在⼀次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执⾏。浏览器必须准备好⼀个微队列，微队列中的任务优先所有其他任务执⾏</li></ul><blockquote><p>随着浏览器的复杂度急剧提升，W3C 不再使⽤宏队列的说法</p></blockquote><p>在⽬前 chrome 的实现中，⾄少包含了下⾯的队列：</p><ul><li>微队列：⽤户存放需要最快执⾏的任务，优先级「最⾼」</li><li>交互队列：⽤于存放⽤户操作后产⽣的事件处理任务，优先级「⾼」</li><li>延时队列：⽤于存放计时器到达后的回调任务，优先级「中」</li></ul><blockquote><p>⾯试题：阐述⼀下 JS 的事件循环<br>参考答案：事件循环⼜叫做消息循环，是浏览器渲染主线程的⼯作⽅式。在 Chrome 的源码中，它开启⼀个不会结束的 for 循环，每次循环从消息队列中取出第⼀个任务执⾏，⽽其他线程只需要在合适的时候将任务加⼊到队列末尾即可。<br>过去把消息队列简单分为宏队列和微队列，这种说法⽬前已⽆法满⾜复杂的浏览器环境，取⽽代之的是⼀种更加灵活多变的处理⽅式。根据 W3C 官⽅的解释，每个任务有不同的类型，同类型的任务必须在同⼀个队列，不同的任务可以属于不同的队列。不同任务队列有不同的优先级在⼀次事件循环中，由浏览器⾃⾏决定取哪⼀个队列的任务。但浏览器必须有⼀个微队列，微队列的任务⼀定具有最⾼的优先级，必须优先调度执⾏。</p></blockquote><blockquote><p>⾯试题：JS 中的计时器能做到精确计时吗？为什么？<br>参考答案：<br>不⾏，因为：<br>1.计算机硬件没有原⼦钟，⽆法做到精确计时<br>2.操作系统的计时函数本身就有少量偏差，由于 JS 的计时器最终调⽤的是操作系统的函数，也就携带了这些偏差<br>3.按照 W3C 的标准，浏览器实现计时器时，如果嵌套层级超过 5 层，则会带有 4 毫秒的最少时间，这样在计时时间少于 4 毫秒时⼜带来了偏差<br>4.受事件循环的影响，计时器的回调函数只能在主线程空闲时运⾏，因此⼜带来了偏差</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浏览器的进程模型&quot;&gt;&lt;a href=&quot;#浏览器的进程模型&quot; class=&quot;headerlink&quot; title=&quot;浏览器的进程模型&quot;&gt;&lt;/a&gt;浏览器的进程模型&lt;/h1&gt;&lt;h2 id=&quot;何为进程？&quot;&gt;&lt;a href=&quot;#何为进程？&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>addEventListener方法使用</title>
    <link href="http://example.com/2022/09/23/js/js-addEventListener/"/>
    <id>http://example.com/2022/09/23/js/js-addEventListener/</id>
    <published>2022-09-23T03:27:15.101Z</published>
    <updated>2022-09-23T07:27:47.020Z</updated>
    
    <content type="html"><![CDATA[<p> addEventListener() 方法用于向指定元素添加监听事件。且同一元素目标可重复添加，不会覆盖之前相同事件，配合 removeEventListener() 方法来移除事件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>元素id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"目标元素被点击了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参数说明：有三个参数<br>参数一、事件名称，字符串，必填。</p><p>事件名称不用带 “on” 前缀，点击事件直接写：”click”，键盘放开事件写：”keyup”<br>参数二、执行函数，必填。</p><p>填写需要执行的函数，如：function(){代码…}<br>当目标对象事件触发时，会传入一个事件参数，参数名称可自定义，如填写event，不需要也可不填写。 事件对象的类型取决于特定的事件。例如， “click” 事件属于 MouseEvent(鼠标事件) 对象。<br>function(event){console.log(event)}<br>参数三、触发类型，布尔型，可空 </p><p>true - 事件在捕获阶段执行<br>false - 事件在冒泡阶段执行，默认是false</p><p>参数一的事件类型大致有如下选择</p><h2 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h2><p>click 当用户点击某个对象时调用的事件句柄。<br>contextmenu 在用户点击鼠标右键打开上下文菜单时触发<br>dblclick 当用户双击某个对象时调用的事件句柄。<br>mousedown 鼠标按钮被按下。<br>mouseenter 当鼠标指针移动到元素上时触发。<br>mouseleave 当鼠标指针移出元素时触发<br>mousemove 鼠标被移动。<br>mouseover 鼠标移到某元素之上。<br>mouseout 鼠标从某元素移开。<br>mouseup 鼠标按键被松开。</p><h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><p>属性 描述 DOM<br>keydown 某个键盘按键被按下。<br>keypress 某个键盘按键被按下并松开。<br>keyup 某个键盘按键被松开。</p><h2 id="框架-对象（Frame-Object）事件"><a href="#框架-对象（Frame-Object）事件" class="headerlink" title="框架/对象（Frame/Object）事件"></a>框架/对象（Frame/Object）事件</h2><p>abort 图像的加载被中断。 ( )<br>beforeunload 该事件在即将离开页面（刷新或关闭）时触发<br>error 在加载文档或图像时发生错误。 ( , 和 )<br>hashchange 该事件在当前 URL 的锚部分发生修改时触发。<br>load 一张页面或一幅图像完成加载。<br>pageshow 该事件在用户访问页面时触发<br>pagehide 该事件在用户离开当前网页跳转到另外一个页面时触发<br>resize 窗口或框架被重新调整大小。<br>scroll 当文档被滚动时发生的事件。<br>unload 用户退出页面。 ( 和 )</p><h2 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h2><p>blur 元素失去焦点时触发<br>change 该事件在表单元素的内容改变时触发( , , , 和 )<br>focus 元素获取焦点时触发<br>focusin 元素即将获取焦点是触发<br>focusout 元素即将失去焦点是触发<br>input 元素获取用户输入是触发<br>reset 表单重置时触发<br>search 用户向搜索域输入文本时触发 (</p><h2 id="剪贴板事件"><a href="#剪贴板事件" class="headerlink" title="剪贴板事件"></a>剪贴板事件</h2><p>copy 该事件在用户拷贝元素内容时触发<br>cut 该事件在用户剪切元素内容时触发<br>paste 该事件在用户粘贴元素内容时触发</p><h2 id="打印事件"><a href="#打印事件" class="headerlink" title="打印事件"></a>打印事件</h2><p>afterprint 该事件在页面已经开始打印，或者打印窗口已经关闭时触发<br>beforeprint 该事件在页面即将开始打印时触发</p><h2 id="拖动事件"><a href="#拖动事件" class="headerlink" title="拖动事件"></a>拖动事件</h2><p>drag 该事件在元素正在拖动时触发<br>dragend 该事件在用户完成元素的拖动时触发<br>dragenter 该事件在拖动的元素进入放置目标时触发<br>dragleave 该事件在拖动元素离开放置目标时触发<br>dragover 该事件在拖动元素在放置目标上时触发<br>dragstart 该事件在用户开始拖动元素时触发<br>drop 该事件在拖动元素放置在目标区域时触发</p><h2 id="多媒体（Media）事件"><a href="#多媒体（Media）事件" class="headerlink" title="多媒体（Media）事件"></a>多媒体（Media）事件</h2><p>abort 事件在视频/音频（audio/video）终止加载时触发。<br>canplay 事件在用户可以开始播放视频/音频（audio/video）时触发。<br>canplaythrough 事件在视频/音频（audio/video）可以正常播放且无需停顿和缓冲时触发。<br>durationchange 事件在视频/音频（audio/video）的时长发生变化时触发。<br>emptied The event occurs when the current playlist is empty<br>ended 事件在视频/音频（audio/video）播放结束时触发。<br>error 事件在视频/音频（audio/video）数据加载期间发生错误时触发。<br>loadeddata 事件在浏览器加载视频/音频（audio/video）当前帧时触发触发。<br>loadedmetadata 事件在指定视频/音频（audio/video）的元数据加载后触发。<br>loadstart 事件在浏览器开始寻找指定视频/音频（audio/video）触发。<br>pause 事件在视频/音频（audio/video）暂停时触发。<br>play 事件在视频/音频（audio/video）开始播放时触发。<br>playing 事件在视频/音频（audio/video）暂停或者在缓冲后准备重新开始播放时触发。<br>progress 事件在浏览器下载指定的视频/音频（audio/video）时触发。<br>ratechange 事件在视频/音频（audio/video）的播放速度发送改变时触发。<br>seeked 事件在用户重新定位视频/音频（audio/video）的播放位置后触发。<br>seeking 事件在用户开始重新定位视频/音频（audio/video）时触发。<br>stalled 事件在浏览器获取媒体数据，但媒体数据不可用时触发。<br>suspend 事件在浏览器读取媒体数据中止时触发。<br>timeupdate 事件在当前的播放位置发送改变时触发。<br>volumechange 事件在音量发生改变时触发。<br>waiting 事件在视频由于要播放下一帧而需要缓冲时触发。</p><h2 id="动画事件"><a href="#动画事件" class="headerlink" title="动画事件"></a>动画事件</h2><p>animationend 该事件在 CSS 动画结束播放时触发<br>animationiteration 该事件在 CSS 动画重复播放时触发<br>animationstart 该事件在 CSS 动画开始播放时触发</p><h2 id="过渡事件"><a href="#过渡事件" class="headerlink" title="过渡事件"></a>过渡事件</h2><p>transitionend 该事件在 CSS 完成过渡后触发。</p><h2 id="其他事件"><a href="#其他事件" class="headerlink" title="其他事件"></a>其他事件</h2><p>message 该事件通过或者从对象(WebSocket, Web Worker, Event Source 或者子 frame 或父窗口)接收到消息时触发<br>online 该事件在浏览器开始在线工作时触发。<br>offline 该事件在浏览器开始离线工作时触发。<br>popstate 该事件在窗口的浏览历史（history 对象）发生改变时触发。 event occurs when the window’s history changes<br>show 该事件当</p><h2 id="元素在上下文菜单显示时触发"><a href="#元素在上下文菜单显示时触发" class="headerlink" title="元素在上下文菜单显示时触发"></a>元素在上下文菜单显示时触发</h2><p>storage 该事件在 Web Storage(HTML 5 Web 存储)更新时触发<br>toggle 该事件在用户打开或关闭 元素时触发<br>wheel 该事件在鼠标滚轮在元素上下滚动时触发</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; addEventListener() 方法用于向指定元素添加监听事件。且同一元素目标可重复添加，不会覆盖之前相同事件，配合 removeEventListener() 方法来移除事件&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-js&quot; da</summary>
      
    
    
    
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>前端生成文档</title>
    <link href="http://example.com/2022/06/13/%E5%B7%A5%E5%85%B7/%E5%89%8D%E7%AB%AF%E7%94%9F%E6%88%90%E6%96%87%E6%A1%A3/"/>
    <id>http://example.com/2022/06/13/%E5%B7%A5%E5%85%B7/%E5%89%8D%E7%AB%AF%E7%94%9F%E6%88%90%E6%96%87%E6%A1%A3/</id>
    <published>2022-06-12T16:00:00.000Z</published>
    <updated>2022-06-13T07:54:20.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端生成文档"><a href="#前端生成文档" class="headerlink" title="前端生成文档"></a>前端生成文档</h1><h2 id="需要插件file-saver、html-docx-js"><a href="#需要插件file-saver、html-docx-js" class="headerlink" title="需要插件file-saver、html-docx-js"></a>需要插件file-saver、html-docx-js</h2><pre class="line-numbers language-none"><code class="language-none">yarn add file-saver --saveyarn add html-docx-js --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="生成方式"><a href="#生成方式" class="headerlink" title="生成方式"></a>生成方式</h2><p>主要通过将html代码转化成文档</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">gogogo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>下载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./node_modules/file-saver/dist/FileSaver.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./node_modules/html-docx-js/dist/html-docx.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./htmlTemp.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">gogogo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> domString <span class="token operator">=</span> <span class="token function">htmlTemp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> converted <span class="token operator">=</span> htmlDocx<span class="token punctuation">.</span><span class="token function">asBlob</span><span class="token punctuation">(</span>domString<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">saveAs</span><span class="token punctuation">(</span>converted<span class="token punctuation">,</span> <span class="token string">"1111.docx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*  注意事项:    1. 经过反复尝试, 设置div高度在docx文件中无效      解决设置上下垂直距离方法： &lt;div class="item-kong">&amp;nbsp;&amp;nbsp;&lt;/div>*/</span><span class="token comment">// 打印word的html模板</span><span class="token keyword">function</span> <span class="token function">htmlTemp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> d <span class="token operator">=</span> <span class="token string">"测试"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> htmlTemp <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;!DOCTYPE html>    &lt;html lang="en">    &lt;head>      &lt;meta charset="UTF-8">      &lt;meta http-equiv="X-UA-Compatible" content="IE=edge">      &lt;meta name="viewport" content="width=device-width, initial-scale=1.0">      &lt;title>&lt;/title>      &lt;style>        .head-title&#123;          text-align: center;          font-size: 20px;        &#125;        .base-title&#123;          font-size: 20px;          font-weight: 800;        &#125;        .base-items .item&#123;          font-size: 14px;          height: 20px;          line-height:20px;        &#125;        .set-color-one &#123;          color:#e63f32;        &#125;        .set-color-two&#123;          color:#fc011a;        &#125;        .err-msg&#123;          font-size: 28px;          font-weight: 800;          color:red;        &#125;      &lt;/style>    &lt;/head>    &lt;body>      &lt;div class="head-title">自评得分&lt;/div>      &lt;div class="part-one">        &lt;div class="base-title">一、基本信息&lt;/div>        &lt;div>&amp;nbsp;&amp;nbsp;&lt;/div>        &lt;div class="base-items">          &lt;div class="item">计划名称：&lt;/div>          &lt;div class="item">自评组：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>          &lt;div class="item">填报人：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>          &lt;div class="item">实评时间：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>          &lt;div class="item">自评组长：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>          &lt;div class="item">自评组员：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>        &lt;/div>        &lt;div>&amp;nbsp;&amp;nbsp;&lt;/div>      &lt;/div>      &lt;div class="part-two">        &lt;div class="base-title">二、</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">考评项目&lt;/div>        &lt;div>&amp;nbsp;&amp;nbsp;&lt;/div>        &lt;div class="base-items">          </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">        &lt;/div>        &lt;div>&amp;nbsp;&amp;nbsp;&lt;/div>      &lt;/div>      &lt;div class="part-three">        &lt;div class="base-title">三、自评得分统计&lt;/div>        &lt;div>&amp;nbsp;&amp;nbsp;&lt;/div>        &lt;div class="base-items">          &lt;div>总扣分项(不计小项)：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>          &lt;div>总目标分：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>          &lt;div>总扣分值：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>          &lt;div>总实得分：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>          &lt;div>总得分率：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>        &lt;/div>        &lt;div>&amp;nbsp;&amp;nbsp;&lt;/div>      &lt;/div>      &lt;div class="part-four">        &lt;div class="base-title">四、主要问题及整改建议（凡扣分项均应有问题与整改建议）&lt;/div>        &lt;div>&amp;nbsp;&amp;nbsp;&lt;/div>        &lt;div class="base-items">          &lt;div></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>        &lt;/div>        &lt;div>&amp;nbsp;&amp;nbsp;&lt;/div>      &lt;/div>    &lt;/body>  &lt;/html></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token keyword">return</span> htmlTemp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端生成文档&quot;&gt;&lt;a href=&quot;#前端生成文档&quot; class=&quot;headerlink&quot; title=&quot;前端生成文档&quot;&gt;&lt;/a&gt;前端生成文档&lt;/h1&gt;&lt;h2 id=&quot;需要插件file-saver、html-docx-js&quot;&gt;&lt;a href=&quot;#需要插件file-s</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>新疆纤检项目总结</title>
    <link href="http://example.com/2022/06/09/%E5%B7%A5%E4%BD%9C%E9%A1%B9%E7%9B%AE/%E6%96%B0%E7%96%86%E7%BA%A4%E6%A3%80%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2022/06/09/%E5%B7%A5%E4%BD%9C%E9%A1%B9%E7%9B%AE/%E6%96%B0%E7%96%86%E7%BA%A4%E6%A3%80%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</id>
    <published>2022-06-08T16:00:00.000Z</published>
    <updated>2022-06-10T03:13:01.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用技术"><a href="#使用技术" class="headerlink" title="使用技术"></a>使用技术</h1><p>vue2.0 + element + axios + vue-router + vuex + pdf.js</p><h1 id="项目概要"><a href="#项目概要" class="headerlink" title="项目概要"></a>项目概要</h1><p><em>新疆维吾尔自治区纤维质量监测中心</em>的一个用来管理培训的项目<br>从用户的角度来说一共有两种：管理人员和用户（用户分为企业用户和个人用户）主要的功能是对用户进行培训开班，可以理解为一个报名系统。还有一些附带的功能。</p><ul><li>培训管理系统</li><li>知识库</li><li>信用平台</li><li>统一登录平台</li></ul><h1 id="培训管理系统"><a href="#培训管理系统" class="headerlink" title="培训管理系统"></a>培训管理系统</h1><p>普通管理系统    O(∩_∩)O哈哈~</p><ul><li>系统管理<ul><li>菜单管理</li><li>角色管理</li><li>用户管理</li><li>资源分配</li></ul></li><li>首页</li><li>培训管理</li><li>班级管理</li><li>证书管理</li><li>订单管理</li><li>财务管理</li></ul><p>通过角色分配不同的菜单，进入对应的角色页面</p><h1 id="知识库"><a href="#知识库" class="headerlink" title="知识库"></a>知识库</h1><p>知识库分页用户查看页面和后台页面</p><ul><li>后台</li></ul><ul><li>首页</li><li>标准管理<ul><li>全部标准</li><li>录入标准</li><li>分类</li><li>回收站</li></ul></li></ul><ul><li>查看页面<br>主要功能</li></ul><ul><li>查看后台增加的标准</li><li>查看pdf<em>这里有个查看pdf并且不让下载打印，使用到pdf.js，然后再插件里面通过js控制不让打印</em><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>      <span class="token comment">// function stop() &#123;</span>      <span class="token comment">//   return false;</span>      <span class="token comment">// &#125;</span>      <span class="token comment">// document.oncontextmenu = stop;</span>      <span class="token keyword">const</span> <span class="token function-variable function">disabled</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// console.log('禁止脚本，运行成功');</span>        <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>          rightKey<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否开启右键菜单</span>          controller<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否开启控制台</span>          print<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否允许打印</span>          savePage<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否允许 ctrl + s 保存网页 乌发禁用菜单保存</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">loadStyleString</span><span class="token punctuation">(</span><span class="token parameter">cssText</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">var</span> style <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"style"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          style<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"text/css"</span><span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// firefox、safari、chrome和Opera</span>            style<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>cssText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// IE早期的浏览器 ,需要使用style元素的stylesheet属性的cssText属性</span>            style<span class="token punctuation">.</span>styleSheet<span class="token punctuation">.</span>cssText <span class="token operator">=</span> cssText<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// disabeld</span>        <span class="token comment">// 禁用部分功能</span>        <span class="token comment">// 右键禁用</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">.</span>rightKey<span class="token punctuation">)</span> document<span class="token punctuation">.</span><span class="token function-variable function">oncontextmenu</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">// 打印</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">.</span>print<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> cssIndex <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token operator">...</span>document<span class="token punctuation">.</span>styleSheets<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>href <span class="token operator">==</span> <span class="token keyword">null</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 禁止打印 添加媒体查询 css 打印时隐藏所有内容</span>          <span class="token function">loadStyleString</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">                @media print &#123;                    body &#123;                        display: none;                    &#125;                    html::after &#123;                        content: "禁止打印!";                        position: absolute;                        top: 0;                        left: 0;                        width: 100%;                        height: 100%;                        display: flex;                        align-items: center;                        justify-content: center;                        font-size: 80px;                        letter-spacing: 15px;                        color: brown;                    &#125;                &#125;            </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 禁用 ctrl + s 和 F12 控制台</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>          <span class="token string">"keydown"</span><span class="token punctuation">,</span>          <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode <span class="token operator">==</span> <span class="token number">123</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>config<span class="token punctuation">.</span>controller<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>              <span class="token comment">// alert('禁止打开控制台')</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//可以判断是不是mac，如果是mac,ctrl变为花键</span>            <span class="token comment">//event.preventDefault() 方法阻止元素发生默认的行为。</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>              e<span class="token punctuation">.</span>keyCode <span class="token operator">==</span> <span class="token number">83</span> <span class="token operator">&amp;&amp;</span>              <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>platform<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">"Mac"</span><span class="token punctuation">)</span> <span class="token operator">?</span> e<span class="token punctuation">.</span>metaKey <span class="token operator">:</span> e<span class="token punctuation">.</span>ctrlKey<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>              <span class="token operator">!</span>config<span class="token punctuation">.</span>savePage            <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>              <span class="token comment">// Process event...</span>              <span class="token comment">// alert('禁止保存网页')</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token boolean">false</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 控制台</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">.</span>controller<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">var</span> threshold <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>          <span class="token keyword">var</span> widthThreshold <span class="token operator">=</span>            window<span class="token punctuation">.</span>outerWidth <span class="token operator">-</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">></span> threshold<span class="token punctuation">;</span>          <span class="token keyword">var</span> heightThreshold <span class="token operator">=</span>            window<span class="token punctuation">.</span>outerHeight <span class="token operator">-</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">></span> threshold<span class="token punctuation">;</span>          <span class="token keyword">function</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">loadStyleString</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">                        body &#123;                            display: none;                        &#125;                        html::after &#123;                            content: "请关闭控台，并F5重新刷新页面!";                            position: absolute;                            top: 0;                            left: 0;                            width: 100%;                            height: 100%;                            display: flex;                            align-items: center;                            justify-content: center;                            font-size: 50px;                            letter-spacing: 15px;                            color: brown;                        &#125;                </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">//</span>          <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">x</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>            <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token punctuation">;</span>            re<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>widthThreshold <span class="token operator">||</span> heightThreshold<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"load"</span><span class="token punctuation">,</span> disabled<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="信用平台"><a href="#信用平台" class="headerlink" title="信用平台"></a>信用平台</h1><p>主要就是增删改，上传一些企业用户的基础信息</p><h1 id="项目感受"><a href="#项目感受" class="headerlink" title="项目感受"></a>项目感受</h1><p>还是比较简单的项目，以后还是想挑战难一点的东西。不想再写业务逻辑了。。。。。。只接触到dpf.js禁止打印一个新东西</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">reolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token function">reolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用技术&quot;&gt;&lt;a href=&quot;#使用技术&quot; class=&quot;headerlink&quot; title=&quot;使用技术&quot;&gt;&lt;/a&gt;使用技术&lt;/h1&gt;&lt;p&gt;vue2.0 + element + axios + vue-router + vuex + pdf.js&lt;/p&gt;
&lt;h1 </summary>
      
    
    
    
    
    <category term="项目总结" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>管理系统的菜单和路由</title>
    <link href="http://example.com/2022/04/22/%E5%B7%A5%E4%BD%9C%E9%A1%B9%E7%9B%AE/%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%8F%9C%E5%8D%95%E5%92%8C%E8%B7%AF%E7%94%B1/"/>
    <id>http://example.com/2022/04/22/%E5%B7%A5%E4%BD%9C%E9%A1%B9%E7%9B%AE/%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%8F%9C%E5%8D%95%E5%92%8C%E8%B7%AF%E7%94%B1/</id>
    <published>2022-04-21T16:00:00.000Z</published>
    <updated>2022-06-09T07:36:53.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端菜单和路由"><a href="#前端菜单和路由" class="headerlink" title="前端菜单和路由"></a>前端菜单和路由</h1><h2 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h2><ol><li>直接前端写死菜单</li><li>根据路由来渲染</li></ol><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol><li>前端直接写死</li><li>后端返回</li></ol><h2 id="根据路由渲染的菜单怎么区分哪些是菜单"><a href="#根据路由渲染的菜单怎么区分哪些是菜单" class="headerlink" title="根据路由渲染的菜单怎么区分哪些是菜单"></a>根据路由渲染的菜单怎么区分哪些是菜单</h2><h3 id="前端直接写死"><a href="#前端直接写死" class="headerlink" title="前端直接写死"></a>前端直接写死</h3><p>在写路由的时候可以加上属性 hidden: true<br>如果 hidden是true的时候我们就不把这个路由显示为菜单</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">'/enterprise'</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> Layout<span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'enterprise'</span><span class="token punctuation">,</span>    meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">'企业管理'</span><span class="token punctuation">,</span> icon<span class="token operator">:</span> <span class="token string">'product'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>      path<span class="token operator">:</span> <span class="token string">'information'</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">'information'</span><span class="token punctuation">,</span>      <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/enterprise/information'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">'企业信息'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      hidden<span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      path<span class="token operator">:</span> <span class="token string">'detail'</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">'detail'</span><span class="token punctuation">,</span>      <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/enterprise/detail'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">'新增企业'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      hidden<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="后端返回（大多数情况也后端返回的）"><a href="#后端返回（大多数情况也后端返回的）" class="headerlink" title="后端返回（大多数情况也后端返回的）"></a>后端返回（大多数情况也后端返回的）</h3><ol><li>后端返回的话就会有个菜单管理，我们可以新增菜单和配置菜单的地址和我们前端组件的相对地址</li><li>后端返回的数据也有两种格式（1.直接返回菜单树 2.返回的是一维数组，这时候我们需要根据id和pid的关系处理成菜单树）</li><li>需要使用递归生成路由表<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 处理路由</span><span class="token keyword">const</span> <span class="token function-variable function">loadView</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 路由懒加载</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">@/views</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span> resolve<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 这个方法返回的结果是一个路由表  跟你手写的路由表是一样的  我这里删除了一些其他的逻辑  只留了主要逻辑  不能拿到其他项目使用!!!</span><span class="token keyword">function</span> <span class="token function">settingUpDynamicRouting</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>extend<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 这里根据type === 1 来判断是布局组件还是布局页面下的二级路由 （每个项目判断的方式都不一样，看你们公司怎么判断，而且每个项目也都不一样，你明白原理就行）</span>        obj<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token function">settingUpDynamicRouting</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span>        obj<span class="token punctuation">.</span>component <span class="token operator">=</span> Layout <span class="token comment">// Layout这个是布局组件，你也可以理解为一级路由</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>extend<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// type === 2  是二级路由，就是布局页面下展示的页面</span>        obj<span class="token punctuation">.</span>component <span class="token operator">=</span> <span class="token function">loadView</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>extend<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token comment">// loadView()  通过这个方法动态获取组件</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token comment">// 最后需要通过router.addRoutes()方法把我们要添加的路由加进去。  （这句话可以不管：这里是我们现在常用的vue-router的方法  最新版本的好像是改名字了  但是用法是一样的）</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">// async 你能理解的话就看，要是不懂的话就不管。这个也可以不要，可以后面学学</span>  <span class="token keyword">const</span> hasToken <span class="token operator">=</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>hasToken<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 登录了</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>menuList<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 有路由信息，我这里请求的时候也存到了vuex，因为vuex里面的数据刷新以后就没有了，所以刷新页面以后是会重新请求的</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 没有路由信息，就重新去请求</span>        store          <span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'user/getMenu'</span><span class="token punctuation">,</span> userInfo<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token comment">// 处理路由数据的方法我放到vuex里面去做了，所以这个方法返回的是直接可以使用的路由表</span>          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 获取获取菜单</span>            router<span class="token punctuation">.</span><span class="token function">addRoutes</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// 动态添加可访问路由表。 （router除了可以添加路由表，也有删除路由的方法，这些东西平常你多看文档）</span>            <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>to<span class="token punctuation">,</span> replace<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 路由添加以后进入要去的页面</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>             <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">'/login'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 请求失败的话去登录页面。我这里让用户去登录页面了，因为大部分是因为token过期，但是这个做其实不太好，应该在请求响应拦截器做这件事</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">// 没登录</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>whiteList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// whiteList这个是路由的白名单，如登录页面，注册页面等不需要登录能够直接进去的</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 进入页面</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 否则就跳到到登录页面</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/login?redirect=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>to<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>动态路由的菜单渲染部分是一样的 根据hidden来判断要显示哪些菜单按钮</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端菜单和路由&quot;&gt;&lt;a href=&quot;#前端菜单和路由&quot; class=&quot;headerlink&quot; title=&quot;前端菜单和路由&quot;&gt;&lt;/a&gt;前端菜单和路由&lt;/h1&gt;&lt;h2 id=&quot;菜单&quot;&gt;&lt;a href=&quot;#菜单&quot; class=&quot;headerlink&quot; title=&quot;菜</summary>
      
    
    
    
    
    <category term="管理系统" scheme="http://example.com/tags/%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>关于面试</title>
    <link href="http://example.com/2022/03/15/%E9%9D%A2%E8%AF%95/%E5%85%B3%E4%BA%8E%E9%9D%A2%E8%AF%95/"/>
    <id>http://example.com/2022/03/15/%E9%9D%A2%E8%AF%95/%E5%85%B3%E4%BA%8E%E9%9D%A2%E8%AF%95/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-03-15T08:56:06.351Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面试注意事项"><a href="#面试注意事项" class="headerlink" title="面试注意事项"></a>面试注意事项</h1><ol><li>要写清楚自己会哪些东西</li><li>要把上家公司描述清楚，做什么业务的，项目来源于什么</li><li>工作经历，尽量详细，具体到做了什么项目，用了什么技术</li><li>项目要写清楚项目交付结果或者上线反应</li><li>注意写的时候不要有读的有问题的介绍</li><li>投简历可以多投，投放时间尽量在上班时间</li><li>面试可以多接受，去不了的可以要求视频面或者电话面</li><li>面试过程中不要紧张，把自己当做一个工作很多年的工作者，听清楚面试官说的话。没听清或者不懂的地方可以再问面试官</li><li>面试官问一个问题以后如果你知道后面涉及到的问题尽量往深了说、尽量详细、逻辑要清楚。</li><li>如果面试官问的问题确实不会，就说这方面的东西没有用到过(但是不要是非常常见的知识点哈),不太清楚,稍后会去了解。</li><li>面试前要多刷题，如果面试官问你平常怎么学习，你就说看文档，买课看视频都可以。</li><li>面试完成以后要立即把面试官问的问题记录下来，并且找到答案。然后总结一下面试</li></ol><h1 id="我面试的套路"><a href="#我面试的套路" class="headerlink" title="我面试的套路"></a>我面试的套路</h1><blockquote><p>我会让面试者先自我介绍,然后根据他的介绍引出问题。</p></blockquote><p>要求：</p><ol><li>个人信息</li><li>上家公司是做什么的</li><li>团队的组成和运作方式</li><li>掌握哪些技术</li><li>讲一个简历上的项目<br>（项目是做什么的，怎么搭建，用了什么技术以及使用目的，项目是否交付或者上线，评价如何，个人对这个项目的评价或者感受，学习到了什么。。。）</li></ol><p>  <strong>如果面试者介绍的比较简单我会主动去问</strong><br>6. 针对他自我介绍的项目具体问怎么使用某一个技术。<br>    如:<br>      1、怎么使用router,有哪些钩子函数，怎么使用，什么场景下使用。…<br>      2、响应式原理。。。<br>7. css方面的 flex px/rem/em什么意思以及比例的计算（我个人面试css问的比较少）<br>8. js方面</p><ul><li>js数据类型 -&gt; 基础数据类型和引用数据类型的区别 -&gt; 怎么解决引用数据类型赋值问题 -&gt; 深拷贝和浅拷贝的区别 -&gt; 使用JSON深拷贝的弊端 -&gt; 手写深拷贝方法的逻辑</li><li>js类型转换 -&gt; 哪些操作造成类型转换 -&gt; 怎么判断类型(判断的方法很多，如果你说typeof，就会问你他的弊端，最好的方式是Object.prototype.toString.call([]))</li><li>作用域 -&gt; 查找方式 -&gt; 闭包 -&gt; 闭包会造成什么 -&gt; 为什么会这样 -&gt;js垃圾回收机制 -&gt; 标记清除/引用计数的逻辑 -&gt; 怎么解决闭包中的变量无法释放</li><li>原型链 -&gt; 查找方式 -&gt; <strong>proto</strong> 与 prototype 的区别</li><li>es6 -&gt; 用过哪些特性 -&gt; let、const、var的区别 -&gt; 箭头函数与普通函数的区别</li><li>怎么创建一个原生请求(new XMLHttpRequest()) -&gt; 怎么封装一个通用请求</li><li>js执行机制 -&gt; 事件循环 -&gt; 微任务宏任务 -&gt; 哪些是微任务哪些是宏任务</li><li>Promise怎么使用、async\await怎么使用 -&gt; async\await实现原理 -&gt; 怎么在async\await中抛出错误</li></ul><ol start="9"><li>再就是vue或者react上的问题了，这个问的太广了。可以是使用层面上，也可以是源码级别的。这种就网上看看常见的记住，或者直接背下来</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;面试注意事项&quot;&gt;&lt;a href=&quot;#面试注意事项&quot; class=&quot;headerlink&quot; title=&quot;面试注意事项&quot;&gt;&lt;/a&gt;面试注意事项&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;要写清楚自己会哪些东西&lt;/li&gt;
&lt;li&gt;要把上家公司描述清楚，做什么业务的，项目来源于什么&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>网络基础</title>
    <link href="http://example.com/2022/01/26/%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/01/26/%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</id>
    <published>2022-01-25T16:00:00.000Z</published>
    <updated>2022-02-11T03:46:34.003Z</updated>
    
    <content type="html"><![CDATA[<p>网络数据传输方式<br>一层一层的打包 然后一层一层的解析<br><img src="/imgs/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E4%BC%A0%E8%BE%93.png" alt="image text"></p><ol><li>发送者的数据从应用层到传输层 会增加TCP Header (端口)</li><li>然后到网络层 会增加IP header (IP地址)</li><li>然后到链路层 会增加以太网 Header (MAC地址) 通过传输介质到接收者 </li><li>以太网发现有个 以太网的Header 就把这个包给对应的MAC地址</li><li>然后传到网络层 IP协议解析这个包 找到对应的IP地址 发送过去</li><li>然后传到传输层 解析到端口  传给对应端口的应用</li></ol><h1 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h1><p><img src="/imgs/%E4%BB%A5%E5%A4%AA%E7%BD%91.png" alt="image text"></p><h2 id="网卡和MAC地址"><a href="#网卡和MAC地址" class="headerlink" title="网卡和MAC地址"></a>网卡和MAC地址</h2><p>MAC地址： 00-05-5D-E8-0F-A3<br>交换机就是根据MAC地址转发数据的</p><ol><li>电脑通过网卡连接网络</li><li>每块网卡有个厂商设定的MAC地址（又称物理地址）</li><li>这个地址是设备的唯一标识</li><li>网卡的MAC地址可以通过驱动改变（只要在同一个链路里面没有相同的话不会有影响）</li></ol><h2 id="以太网的Header"><a href="#以太网的Header" class="headerlink" title="以太网的Header"></a>以太网的Header</h2><ol><li>目标MAC地址（6字节）</li><li>源MAC地址（6字节）</li><li>类型 （2字节）</li><li>数据（46~1500字节）</li><li>FCS（4字节，帧检验序列）</li></ol><h1 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h1><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p><img src="/imgs/ip%E5%9C%B0%E5%9D%80.png" alt="image text"><br><img src="/imgs/%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81.png" alt="image text"></p><ol><li>又32位二进制数组成</li><li>分为<em>网络标识</em>和<em>主机标识</em>两部分</li><li><em>子网掩码</em>确定了32位里面哪些是主机标识哪些是网络标识<br>1为网络标识，0为主机标识</li></ol><h2 id="路由控制"><a href="#路由控制" class="headerlink" title="路由控制"></a>路由控制</h2><h3 id="在同一个网络下的数据传输："><a href="#在同一个网络下的数据传输：" class="headerlink" title="在同一个网络下的数据传输："></a>在同一个网络下的数据传输：</h3><p><img src="/imgs/ARP%E5%B9%BF%E6%92%AD%E6%9F%A5%E8%AF%A2IP%E5%AF%B9%E5%BA%94%E7%9A%84MAC%E5%9C%B0%E5%9D%801.png" alt="alt"><br><img src="/imgs/ARP%E5%93%8D%E5%BA%94.png" alt="alt"></p><ol><li>应用层192.168.0.1 给 192.168.0.1 发送信息</li><li>传输层 增加TCP Header 记录端口： from 80 to 80 </li><li>网络层 增加IP Header 记录ip: from 192.168.0.1 to 192.168.0.2</li><li>以太网 增加以太网 Header from 00-05-5D-E8-A3 to ???<br>这个时候以太网知道发送者的MAC地址，同时在MAC地址表记录下来，但是不知道接收者192.168.0.2 的MAC地址</li><li>这时候会发一个ARP广播 对应的信息有发送者的ip和MAC地址接收者的IP地址和<strong>MAC（FFFFFF）</strong> </li><li>交换机收到目标MAC地址为FFFFFF 会发送一个广播给连接交换机的所有电脑 查询对目标IP对应电脑MAC地址</li><li>当目标电脑收到信息以后会将MAC地址告诉发送者，同时也会经过交换机，交换机会在MAC地址表记录下来</li><li>知道目标的MAC地址以后就可以将MAC地址补到之前缺失的MAC地址上</li><li>最后一层层解析数据就到了192.168.0.2的电脑上</li></ol><h3 id="网络之间的数据传输"><a href="#网络之间的数据传输" class="headerlink" title="网络之间的数据传输"></a>网络之间的数据传输</h3><p><img src="/imgs/%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92%E8%BF%87%E7%A8%8B1.png" alt="alt"><br><img src="/imgs/%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%9302.png" alt="alt"></p><ol><li>将出数据从192.168.0.1 发送给 172.6.0.1 因为ip不是在同一个网段所以会发送给网关（192.168.0.254）</li><li>但是不知道网关的MAC地址，所以会发起ARP查询</li><li>然后收到网关的ARP响应，将MAC地址补上并且把数据发送给网关192.168.0.254）</li><li>网关收到192.168.0.1发来的数据，发现目标的IP地址也不是自己，然后查询路由表得知自己应该发送给路由器B 也就是192.168.1.254</li><li>然后再次发起ARP查询 找到192.168.1.254 MAC地址 并发送给过去</li><li>直到发送到路由器C，路由器C查询他自己的路由表发现，这个网段是自己直连的，然后查询ARP缓存里面有没有IP对应的MAC地址，只要172.6.0.1往外面发过数据，那么他的MAC地址就会被缓存下来，如果没有发送过那就发起ARP广播查询172.6.0.1MAC地址，拿到地址以后将目标的MAC地址更改为172.6.0.1MAC地址，将数据发送过去。</li><li>经过网络层和传输层172.6.0.1拿到最终数据</li></ol><h1 id="IP分片和重组"><a href="#IP分片和重组" class="headerlink" title="IP分片和重组"></a>IP分片和重组</h1><ol><li>不同的网络上最大传输单元（MTU）的大小是不一样的</li><li>IP协议这是网络的上层封装，它对此进行了抽象</li><li>路径发现MTU会在发送数据帧超过网络MTU时自动调整并重发数据</li><li>IP报文由路由器进行分片，目标主机进行重组</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;网络数据传输方式&lt;br&gt;一层一层的打包 然后一层一层的解析&lt;br&gt;&lt;img src=&quot;/imgs/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E4%BC%A0%E8%BE%93.png&quot; alt=&quot;image text&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;</summary>
      
    
    
    
    
    <category term="网络基础" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>前端常见面试题</title>
    <link href="http://example.com/2022/01/24/%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://example.com/2022/01/24/%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2022-01-23T16:00:00.000Z</published>
    <updated>2022-03-15T07:30:54.424Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h1><h2 id="单页面应用（SPA）"><a href="#单页面应用（SPA）" class="headerlink" title="单页面应用（SPA）"></a>单页面应用（SPA）</h2><p>  是加载单个 HTML 页面并在用户与应用程序交互时动态更新该页面的。它将所有的活动局限于一个 Web 页面中，仅在该 Web 页面初始化时加载相应的 HTML 、 JavaScript 、 CSS 。一旦页面加载完成， SPA 不会因为用户的操作而进行页面的重新加载或跳转，而是利用 JavaScript 动态的变换 HTML（采用的是 div 切换显示和隐藏），从而实现UI与用户的交互。在 SPA 应用中，应用加载之后就不会再有整页刷新。相反，展示逻辑预先加载，并有赖于内容Region（区域）中的视图切换来展示内容。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>有良好的交互体验<br>能提升页面切换体验，用户在访问应用页面是不会频繁的去切换浏览页面，从而避免了页面的重新加载；    2. 前后端分离开发<br>单页Web应用可以和 RESTful 规约一起使用，通过 REST API 提供接口数据，并使用 Ajax 异步获取，这样有助于分离客户端和服务器端工作。更进一步，可以在客户端也可以分解为静态页面和页面交互两个部分；    3. 减轻服务器压力<br>服务器只用出数据就可以，不用管展示逻辑和页面合成，吞吐能力会提高几倍；    4. 共用一套后端程序代码<br>不用修改后端程序代码就可以同时用于 Web 界面、手机、平板等多种客户端；<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3></li><li>SEO难度较高<br>由于所有的内容都在一个页面中动态替换显示，所以在SEO上其有着天然的弱势，所以如果你的站点对SEO很看重，且要用单页应用，那么就做些静态页面给搜索引擎用吧；</li><li>前进、后退管理<br>由于单页Web应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理，当然此问题也有解决方案，比如利用URI中的散列+iframe实现；</li><li>初次加载耗时多<br>为实现单页Web应用功能及显示效果，需要在加载页面的时候将JavaScript、CSS统一加载，部分页面可以在需要的时候加载。所以必须对JavaScript及CSS代码进行合并压缩处理；<h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3>在SPA中，通常一开始就会加载所有必需的代码（HTML，JavaScript和CSS），有时候考虑到首屏加载太慢会按需加载，按需加载就是按照当前呈现的不同页面加载不同的文件，而不是最开始就把所有文件都加载出来，从而避免首屏加载很慢。<br>当首屏加载完毕后，设备&amp;网络处于空闲状态，可以对其他路由组件进行预加载，以便提升页面切换性能。<br>根据路由拆分减少初始加载体积,利用异步加载方式，在路由注册时提供异步拉取组件的方法，仅在需要进入对应路由时，对应组件才会被加载进来。    * 初次加载的速度<br> 单页应用的第一页加载会比基于服务器的应用慢。这是因为首次加载必须先拿到框架和应用程序的代码，再在浏览器中呈现所需的视图。基于服务器的应用程序只需将所需的HTML推送到浏览器，从而减少了延迟和下载用时。    * 加快页面加载速度<br> 有一些方法可以加快单页应用的初次加载速度，比如采用多项缓存措施、需要时再加载某些模块（懒加载）。    * 页面生命周期<br> 单页应用在初始页面加载时被完全加载，然后页面区域被替换或更新为按需从服务器加载的新页面片段。为避免过度下载未使用的功能，单页应用通常会逐渐下载更多内容，如所需要的功能、页面的一小块，或者完整的一页。</li></ol><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><h2 id="vue的响应式原理"><a href="#vue的响应式原理" class="headerlink" title="vue的响应式原理"></a>vue的响应式原理</h2><h2 id="data为什么是函数"><a href="#data为什么是函数" class="headerlink" title="data为什么是函数"></a>data为什么是函数</h2><h2 id="v-if-和-v-show-的区别"><a href="#v-if-和-v-show-的区别" class="headerlink" title="v-if 和 v-show 的区别"></a>v-if 和 v-show 的区别</h2><h2 id="v-mode-原理"><a href="#v-mode-原理" class="headerlink" title="v-mode 原理"></a>v-mode 原理</h2><h2 id="computed、watch、method"><a href="#computed、watch、method" class="headerlink" title="computed、watch、method"></a>computed、watch、method</h2><h2 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h2><h2 id="vue组件通讯"><a href="#vue组件通讯" class="headerlink" title="vue组件通讯"></a>vue组件通讯</h2><h2 id="vue单向数据流"><a href="#vue单向数据流" class="headerlink" title="vue单向数据流"></a>vue单向数据流</h2><h2 id="keep-alive组件"><a href="#keep-alive组件" class="headerlink" title="keep-alive组件"></a>keep-alive组件</h2><h2 id="slot-插槽"><a href="#slot-插槽" class="headerlink" title="slot 插槽"></a>slot 插槽</h2><h2 id="vue检测数组或对象的变化"><a href="#vue检测数组或对象的变化" class="headerlink" title="vue检测数组或对象的变化"></a>vue检测数组或对象的变化</h2><h2 id="虚拟dom"><a href="#虚拟dom" class="headerlink" title="虚拟dom"></a>虚拟dom</h2><h2 id="nextTick的原理"><a href="#nextTick的原理" class="headerlink" title="nextTick的原理"></a>nextTick的原理</h2><h2 id="vueX"><a href="#vueX" class="headerlink" title="vueX"></a>vueX</h2><h2 id="vue-rouer的两种模式"><a href="#vue-rouer的两种模式" class="headerlink" title="vue-rouer的两种模式"></a>vue-rouer的两种模式</h2><h2 id="vue-router有哪几种导航钩子"><a href="#vue-router有哪几种导航钩子" class="headerlink" title="vue-router有哪几种导航钩子"></a>vue-router有哪几种导航钩子</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vue&quot;&gt;&lt;a href=&quot;#vue&quot; class=&quot;headerlink&quot; title=&quot;vue&quot;&gt;&lt;/a&gt;vue&lt;/h1&gt;&lt;h2 id=&quot;单页面应用（SPA）&quot;&gt;&lt;a href=&quot;#单页面应用（SPA）&quot; class=&quot;headerlink&quot; title=&quot;单</summary>
      
    
    
    
    
    <category term="面试题" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
</feed>
