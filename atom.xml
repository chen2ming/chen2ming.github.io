<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>chenMing</title>
  
  <subtitle>(ง •̀_•́)ง</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-09-23T07:27:47.020Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>chenMing</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>addEventListener方法使用</title>
    <link href="http://example.com/2022/09/23/js-addEventListener/"/>
    <id>http://example.com/2022/09/23/js-addEventListener/</id>
    <published>2022-09-23T03:27:15.101Z</published>
    <updated>2022-09-23T07:27:47.020Z</updated>
    
    <content type="html"><![CDATA[<p> addEventListener() 方法用于向指定元素添加监听事件。且同一元素目标可重复添加，不会覆盖之前相同事件，配合 removeEventListener() 方法来移除事件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>元素id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"目标元素被点击了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参数说明：有三个参数<br>参数一、事件名称，字符串，必填。</p><p>事件名称不用带 “on” 前缀，点击事件直接写：”click”，键盘放开事件写：”keyup”<br>参数二、执行函数，必填。</p><p>填写需要执行的函数，如：function(){代码…}<br>当目标对象事件触发时，会传入一个事件参数，参数名称可自定义，如填写event，不需要也可不填写。 事件对象的类型取决于特定的事件。例如， “click” 事件属于 MouseEvent(鼠标事件) 对象。<br>function(event){console.log(event)}<br>参数三、触发类型，布尔型，可空 </p><p>true - 事件在捕获阶段执行<br>false - 事件在冒泡阶段执行，默认是false</p><p>参数一的事件类型大致有如下选择</p><h2 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h2><p>click 当用户点击某个对象时调用的事件句柄。<br>contextmenu 在用户点击鼠标右键打开上下文菜单时触发<br>dblclick 当用户双击某个对象时调用的事件句柄。<br>mousedown 鼠标按钮被按下。<br>mouseenter 当鼠标指针移动到元素上时触发。<br>mouseleave 当鼠标指针移出元素时触发<br>mousemove 鼠标被移动。<br>mouseover 鼠标移到某元素之上。<br>mouseout 鼠标从某元素移开。<br>mouseup 鼠标按键被松开。</p><h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><p>属性 描述 DOM<br>keydown 某个键盘按键被按下。<br>keypress 某个键盘按键被按下并松开。<br>keyup 某个键盘按键被松开。</p><h2 id="框架-对象（Frame-Object）事件"><a href="#框架-对象（Frame-Object）事件" class="headerlink" title="框架/对象（Frame/Object）事件"></a>框架/对象（Frame/Object）事件</h2><p>abort 图像的加载被中断。 ( )<br>beforeunload 该事件在即将离开页面（刷新或关闭）时触发<br>error 在加载文档或图像时发生错误。 ( , 和 )<br>hashchange 该事件在当前 URL 的锚部分发生修改时触发。<br>load 一张页面或一幅图像完成加载。<br>pageshow 该事件在用户访问页面时触发<br>pagehide 该事件在用户离开当前网页跳转到另外一个页面时触发<br>resize 窗口或框架被重新调整大小。<br>scroll 当文档被滚动时发生的事件。<br>unload 用户退出页面。 ( 和 )</p><h2 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h2><p>blur 元素失去焦点时触发<br>change 该事件在表单元素的内容改变时触发( , , , 和 )<br>focus 元素获取焦点时触发<br>focusin 元素即将获取焦点是触发<br>focusout 元素即将失去焦点是触发<br>input 元素获取用户输入是触发<br>reset 表单重置时触发<br>search 用户向搜索域输入文本时触发 (</p><h2 id="剪贴板事件"><a href="#剪贴板事件" class="headerlink" title="剪贴板事件"></a>剪贴板事件</h2><p>copy 该事件在用户拷贝元素内容时触发<br>cut 该事件在用户剪切元素内容时触发<br>paste 该事件在用户粘贴元素内容时触发</p><h2 id="打印事件"><a href="#打印事件" class="headerlink" title="打印事件"></a>打印事件</h2><p>afterprint 该事件在页面已经开始打印，或者打印窗口已经关闭时触发<br>beforeprint 该事件在页面即将开始打印时触发</p><h2 id="拖动事件"><a href="#拖动事件" class="headerlink" title="拖动事件"></a>拖动事件</h2><p>drag 该事件在元素正在拖动时触发<br>dragend 该事件在用户完成元素的拖动时触发<br>dragenter 该事件在拖动的元素进入放置目标时触发<br>dragleave 该事件在拖动元素离开放置目标时触发<br>dragover 该事件在拖动元素在放置目标上时触发<br>dragstart 该事件在用户开始拖动元素时触发<br>drop 该事件在拖动元素放置在目标区域时触发</p><h2 id="多媒体（Media）事件"><a href="#多媒体（Media）事件" class="headerlink" title="多媒体（Media）事件"></a>多媒体（Media）事件</h2><p>abort 事件在视频/音频（audio/video）终止加载时触发。<br>canplay 事件在用户可以开始播放视频/音频（audio/video）时触发。<br>canplaythrough 事件在视频/音频（audio/video）可以正常播放且无需停顿和缓冲时触发。<br>durationchange 事件在视频/音频（audio/video）的时长发生变化时触发。<br>emptied The event occurs when the current playlist is empty<br>ended 事件在视频/音频（audio/video）播放结束时触发。<br>error 事件在视频/音频（audio/video）数据加载期间发生错误时触发。<br>loadeddata 事件在浏览器加载视频/音频（audio/video）当前帧时触发触发。<br>loadedmetadata 事件在指定视频/音频（audio/video）的元数据加载后触发。<br>loadstart 事件在浏览器开始寻找指定视频/音频（audio/video）触发。<br>pause 事件在视频/音频（audio/video）暂停时触发。<br>play 事件在视频/音频（audio/video）开始播放时触发。<br>playing 事件在视频/音频（audio/video）暂停或者在缓冲后准备重新开始播放时触发。<br>progress 事件在浏览器下载指定的视频/音频（audio/video）时触发。<br>ratechange 事件在视频/音频（audio/video）的播放速度发送改变时触发。<br>seeked 事件在用户重新定位视频/音频（audio/video）的播放位置后触发。<br>seeking 事件在用户开始重新定位视频/音频（audio/video）时触发。<br>stalled 事件在浏览器获取媒体数据，但媒体数据不可用时触发。<br>suspend 事件在浏览器读取媒体数据中止时触发。<br>timeupdate 事件在当前的播放位置发送改变时触发。<br>volumechange 事件在音量发生改变时触发。<br>waiting 事件在视频由于要播放下一帧而需要缓冲时触发。</p><h2 id="动画事件"><a href="#动画事件" class="headerlink" title="动画事件"></a>动画事件</h2><p>animationend 该事件在 CSS 动画结束播放时触发<br>animationiteration 该事件在 CSS 动画重复播放时触发<br>animationstart 该事件在 CSS 动画开始播放时触发</p><h2 id="过渡事件"><a href="#过渡事件" class="headerlink" title="过渡事件"></a>过渡事件</h2><p>transitionend 该事件在 CSS 完成过渡后触发。</p><h2 id="其他事件"><a href="#其他事件" class="headerlink" title="其他事件"></a>其他事件</h2><p>message 该事件通过或者从对象(WebSocket, Web Worker, Event Source 或者子 frame 或父窗口)接收到消息时触发<br>online 该事件在浏览器开始在线工作时触发。<br>offline 该事件在浏览器开始离线工作时触发。<br>popstate 该事件在窗口的浏览历史（history 对象）发生改变时触发。 event occurs when the window’s history changes<br>show 该事件当</p><h2 id="元素在上下文菜单显示时触发"><a href="#元素在上下文菜单显示时触发" class="headerlink" title="元素在上下文菜单显示时触发"></a>元素在上下文菜单显示时触发</h2><p>storage 该事件在 Web Storage(HTML 5 Web 存储)更新时触发<br>toggle 该事件在用户打开或关闭 元素时触发<br>wheel 该事件在鼠标滚轮在元素上下滚动时触发</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; addEventListener() 方法用于向指定元素添加监听事件。且同一元素目标可重复添加，不会覆盖之前相同事件，配合 removeEventListener() 方法来移除事件&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-js&quot; da</summary>
      
    
    
    
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>前端生成文档</title>
    <link href="http://example.com/2022/06/13/%E5%89%8D%E7%AB%AF%E7%94%9F%E6%88%90%E6%96%87%E6%A1%A3/"/>
    <id>http://example.com/2022/06/13/%E5%89%8D%E7%AB%AF%E7%94%9F%E6%88%90%E6%96%87%E6%A1%A3/</id>
    <published>2022-06-12T16:00:00.000Z</published>
    <updated>2022-06-13T07:54:20.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端生成文档"><a href="#前端生成文档" class="headerlink" title="前端生成文档"></a>前端生成文档</h1><h2 id="需要插件file-saver、html-docx-js"><a href="#需要插件file-saver、html-docx-js" class="headerlink" title="需要插件file-saver、html-docx-js"></a>需要插件file-saver、html-docx-js</h2><pre class="line-numbers language-none"><code class="language-none">yarn add file-saver --saveyarn add html-docx-js --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="生成方式"><a href="#生成方式" class="headerlink" title="生成方式"></a>生成方式</h2><p>主要通过将html代码转化成文档</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">gogogo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>下载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./node_modules/file-saver/dist/FileSaver.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./node_modules/html-docx-js/dist/html-docx.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./htmlTemp.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">gogogo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> domString <span class="token operator">=</span> <span class="token function">htmlTemp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> converted <span class="token operator">=</span> htmlDocx<span class="token punctuation">.</span><span class="token function">asBlob</span><span class="token punctuation">(</span>domString<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">saveAs</span><span class="token punctuation">(</span>converted<span class="token punctuation">,</span> <span class="token string">"1111.docx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*  注意事项:    1. 经过反复尝试, 设置div高度在docx文件中无效      解决设置上下垂直距离方法： &lt;div class="item-kong">&amp;nbsp;&amp;nbsp;&lt;/div>*/</span><span class="token comment">// 打印word的html模板</span><span class="token keyword">function</span> <span class="token function">htmlTemp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> d <span class="token operator">=</span> <span class="token string">"测试"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> htmlTemp <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;!DOCTYPE html>    &lt;html lang="en">    &lt;head>      &lt;meta charset="UTF-8">      &lt;meta http-equiv="X-UA-Compatible" content="IE=edge">      &lt;meta name="viewport" content="width=device-width, initial-scale=1.0">      &lt;title>&lt;/title>      &lt;style>        .head-title&#123;          text-align: center;          font-size: 20px;        &#125;        .base-title&#123;          font-size: 20px;          font-weight: 800;        &#125;        .base-items .item&#123;          font-size: 14px;          height: 20px;          line-height:20px;        &#125;        .set-color-one &#123;          color:#e63f32;        &#125;        .set-color-two&#123;          color:#fc011a;        &#125;        .err-msg&#123;          font-size: 28px;          font-weight: 800;          color:red;        &#125;      &lt;/style>    &lt;/head>    &lt;body>      &lt;div class="head-title">自评得分&lt;/div>      &lt;div class="part-one">        &lt;div class="base-title">一、基本信息&lt;/div>        &lt;div>&amp;nbsp;&amp;nbsp;&lt;/div>        &lt;div class="base-items">          &lt;div class="item">计划名称：&lt;/div>          &lt;div class="item">自评组：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>          &lt;div class="item">填报人：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>          &lt;div class="item">实评时间：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>          &lt;div class="item">自评组长：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>          &lt;div class="item">自评组员：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>        &lt;/div>        &lt;div>&amp;nbsp;&amp;nbsp;&lt;/div>      &lt;/div>      &lt;div class="part-two">        &lt;div class="base-title">二、</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">考评项目&lt;/div>        &lt;div>&amp;nbsp;&amp;nbsp;&lt;/div>        &lt;div class="base-items">          </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">        &lt;/div>        &lt;div>&amp;nbsp;&amp;nbsp;&lt;/div>      &lt;/div>      &lt;div class="part-three">        &lt;div class="base-title">三、自评得分统计&lt;/div>        &lt;div>&amp;nbsp;&amp;nbsp;&lt;/div>        &lt;div class="base-items">          &lt;div>总扣分项(不计小项)：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>          &lt;div>总目标分：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>          &lt;div>总扣分值：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>          &lt;div>总实得分：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>          &lt;div>总得分率：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>        &lt;/div>        &lt;div>&amp;nbsp;&amp;nbsp;&lt;/div>      &lt;/div>      &lt;div class="part-four">        &lt;div class="base-title">四、主要问题及整改建议（凡扣分项均应有问题与整改建议）&lt;/div>        &lt;div>&amp;nbsp;&amp;nbsp;&lt;/div>        &lt;div class="base-items">          &lt;div></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>        &lt;/div>        &lt;div>&amp;nbsp;&amp;nbsp;&lt;/div>      &lt;/div>    &lt;/body>  &lt;/html></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token keyword">return</span> htmlTemp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端生成文档&quot;&gt;&lt;a href=&quot;#前端生成文档&quot; class=&quot;headerlink&quot; title=&quot;前端生成文档&quot;&gt;&lt;/a&gt;前端生成文档&lt;/h1&gt;&lt;h2 id=&quot;需要插件file-saver、html-docx-js&quot;&gt;&lt;a href=&quot;#需要插件file-s</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>我的误区</title>
    <link href="http://example.com/2022/06/10/%E6%88%91%E7%9A%84%E8%AF%AF%E5%8C%BA/"/>
    <id>http://example.com/2022/06/10/%E6%88%91%E7%9A%84%E8%AF%AF%E5%8C%BA/</id>
    <published>2022-06-10T02:42:20.973Z</published>
    <updated>2022-06-13T07:52:39.578Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微任务与宏任务的执行顺序"><a href="#微任务与宏任务的执行顺序" class="headerlink" title="微任务与宏任务的执行顺序"></a>微任务与宏任务的执行顺序</h1><p>先说一下事件循环：先执行宏任务，再检查有没有微任务，如果有就执行微任务，然后渲染dom，最后进入下一次事件循环。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    onsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"宏任务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"微任务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为上面的代码会先输出微任务，再输出宏任务，<br>这是因为宏任务是下一个事件循环开始的宏任务，而微任务是这次事件循环就执行的微任务，他们之间隔了一个dom渲染。所以造成了微任务比宏任务更快执行的错觉。</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;微任务与宏任务的执行顺序&quot;&gt;&lt;a href=&quot;#微任务与宏任务的执行顺序&quot; class=&quot;headerlink&quot; title=&quot;微任务与宏任务的执行顺序&quot;&gt;&lt;/a&gt;微任务与宏任务的执行顺序&lt;/h1&gt;&lt;p&gt;先说一下事件循环：先执行宏任务，再检查有没有微任务，如果有就</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>新疆纤检项目总结</title>
    <link href="http://example.com/2022/06/09/%E6%96%B0%E7%96%86%E7%BA%A4%E6%A3%80%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2022/06/09/%E6%96%B0%E7%96%86%E7%BA%A4%E6%A3%80%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</id>
    <published>2022-06-08T16:00:00.000Z</published>
    <updated>2022-06-10T03:13:01.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用技术"><a href="#使用技术" class="headerlink" title="使用技术"></a>使用技术</h1><p>vue2.0 + element + axios + vue-router + vuex + pdf.js</p><h1 id="项目概要"><a href="#项目概要" class="headerlink" title="项目概要"></a>项目概要</h1><p><em>新疆维吾尔自治区纤维质量监测中心</em>的一个用来管理培训的项目<br>从用户的角度来说一共有两种：管理人员和用户（用户分为企业用户和个人用户）主要的功能是对用户进行培训开班，可以理解为一个报名系统。还有一些附带的功能。</p><ul><li>培训管理系统</li><li>知识库</li><li>信用平台</li><li>统一登录平台</li></ul><h1 id="培训管理系统"><a href="#培训管理系统" class="headerlink" title="培训管理系统"></a>培训管理系统</h1><p>普通管理系统    O(∩_∩)O哈哈~</p><ul><li>系统管理<ul><li>菜单管理</li><li>角色管理</li><li>用户管理</li><li>资源分配</li></ul></li><li>首页</li><li>培训管理</li><li>班级管理</li><li>证书管理</li><li>订单管理</li><li>财务管理</li></ul><p>通过角色分配不同的菜单，进入对应的角色页面</p><h1 id="知识库"><a href="#知识库" class="headerlink" title="知识库"></a>知识库</h1><p>知识库分页用户查看页面和后台页面</p><ul><li>后台</li></ul><ul><li>首页</li><li>标准管理<ul><li>全部标准</li><li>录入标准</li><li>分类</li><li>回收站</li></ul></li></ul><ul><li>查看页面<br>主要功能</li></ul><ul><li>查看后台增加的标准</li><li>查看pdf<em>这里有个查看pdf并且不让下载打印，使用到pdf.js，然后再插件里面通过js控制不让打印</em><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>      <span class="token comment">// function stop() &#123;</span>      <span class="token comment">//   return false;</span>      <span class="token comment">// &#125;</span>      <span class="token comment">// document.oncontextmenu = stop;</span>      <span class="token keyword">const</span> <span class="token function-variable function">disabled</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// console.log('禁止脚本，运行成功');</span>        <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>          rightKey<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否开启右键菜单</span>          controller<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否开启控制台</span>          print<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否允许打印</span>          savePage<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否允许 ctrl + s 保存网页 乌发禁用菜单保存</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">loadStyleString</span><span class="token punctuation">(</span><span class="token parameter">cssText</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">var</span> style <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"style"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          style<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"text/css"</span><span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// firefox、safari、chrome和Opera</span>            style<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>cssText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// IE早期的浏览器 ,需要使用style元素的stylesheet属性的cssText属性</span>            style<span class="token punctuation">.</span>styleSheet<span class="token punctuation">.</span>cssText <span class="token operator">=</span> cssText<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// disabeld</span>        <span class="token comment">// 禁用部分功能</span>        <span class="token comment">// 右键禁用</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">.</span>rightKey<span class="token punctuation">)</span> document<span class="token punctuation">.</span><span class="token function-variable function">oncontextmenu</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">// 打印</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">.</span>print<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> cssIndex <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token operator">...</span>document<span class="token punctuation">.</span>styleSheets<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>href <span class="token operator">==</span> <span class="token keyword">null</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 禁止打印 添加媒体查询 css 打印时隐藏所有内容</span>          <span class="token function">loadStyleString</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">                @media print &#123;                    body &#123;                        display: none;                    &#125;                    html::after &#123;                        content: "禁止打印!";                        position: absolute;                        top: 0;                        left: 0;                        width: 100%;                        height: 100%;                        display: flex;                        align-items: center;                        justify-content: center;                        font-size: 80px;                        letter-spacing: 15px;                        color: brown;                    &#125;                &#125;            </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 禁用 ctrl + s 和 F12 控制台</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>          <span class="token string">"keydown"</span><span class="token punctuation">,</span>          <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode <span class="token operator">==</span> <span class="token number">123</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>config<span class="token punctuation">.</span>controller<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>              <span class="token comment">// alert('禁止打开控制台')</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//可以判断是不是mac，如果是mac,ctrl变为花键</span>            <span class="token comment">//event.preventDefault() 方法阻止元素发生默认的行为。</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>              e<span class="token punctuation">.</span>keyCode <span class="token operator">==</span> <span class="token number">83</span> <span class="token operator">&amp;&amp;</span>              <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>platform<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">"Mac"</span><span class="token punctuation">)</span> <span class="token operator">?</span> e<span class="token punctuation">.</span>metaKey <span class="token operator">:</span> e<span class="token punctuation">.</span>ctrlKey<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>              <span class="token operator">!</span>config<span class="token punctuation">.</span>savePage            <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>              <span class="token comment">// Process event...</span>              <span class="token comment">// alert('禁止保存网页')</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token boolean">false</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 控制台</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">.</span>controller<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">var</span> threshold <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>          <span class="token keyword">var</span> widthThreshold <span class="token operator">=</span>            window<span class="token punctuation">.</span>outerWidth <span class="token operator">-</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">></span> threshold<span class="token punctuation">;</span>          <span class="token keyword">var</span> heightThreshold <span class="token operator">=</span>            window<span class="token punctuation">.</span>outerHeight <span class="token operator">-</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">></span> threshold<span class="token punctuation">;</span>          <span class="token keyword">function</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">loadStyleString</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">                        body &#123;                            display: none;                        &#125;                        html::after &#123;                            content: "请关闭控台，并F5重新刷新页面!";                            position: absolute;                            top: 0;                            left: 0;                            width: 100%;                            height: 100%;                            display: flex;                            align-items: center;                            justify-content: center;                            font-size: 50px;                            letter-spacing: 15px;                            color: brown;                        &#125;                </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">//</span>          <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">x</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>            <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token punctuation">;</span>            re<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>widthThreshold <span class="token operator">||</span> heightThreshold<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"load"</span><span class="token punctuation">,</span> disabled<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="信用平台"><a href="#信用平台" class="headerlink" title="信用平台"></a>信用平台</h1><p>主要就是增删改，上传一些企业用户的基础信息</p><h1 id="项目感受"><a href="#项目感受" class="headerlink" title="项目感受"></a>项目感受</h1><p>还是比较简单的项目，以后还是想挑战难一点的东西。不想再写业务逻辑了。。。。。。只接触到dpf.js禁止打印一个新东西</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">reolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token function">reolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用技术&quot;&gt;&lt;a href=&quot;#使用技术&quot; class=&quot;headerlink&quot; title=&quot;使用技术&quot;&gt;&lt;/a&gt;使用技术&lt;/h1&gt;&lt;p&gt;vue2.0 + element + axios + vue-router + vuex + pdf.js&lt;/p&gt;
&lt;h1 </summary>
      
    
    
    
    
    <category term="项目总结" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>管理系统的菜单和路由</title>
    <link href="http://example.com/2022/04/22/%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%8F%9C%E5%8D%95%E5%92%8C%E8%B7%AF%E7%94%B1/"/>
    <id>http://example.com/2022/04/22/%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%8F%9C%E5%8D%95%E5%92%8C%E8%B7%AF%E7%94%B1/</id>
    <published>2022-04-21T16:00:00.000Z</published>
    <updated>2022-06-09T07:36:53.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端菜单和路由"><a href="#前端菜单和路由" class="headerlink" title="前端菜单和路由"></a>前端菜单和路由</h1><h2 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h2><ol><li>直接前端写死菜单</li><li>根据路由来渲染</li></ol><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol><li>前端直接写死</li><li>后端返回</li></ol><h2 id="根据路由渲染的菜单怎么区分哪些是菜单"><a href="#根据路由渲染的菜单怎么区分哪些是菜单" class="headerlink" title="根据路由渲染的菜单怎么区分哪些是菜单"></a>根据路由渲染的菜单怎么区分哪些是菜单</h2><h3 id="前端直接写死"><a href="#前端直接写死" class="headerlink" title="前端直接写死"></a>前端直接写死</h3><p>在写路由的时候可以加上属性 hidden: true<br>如果 hidden是true的时候我们就不把这个路由显示为菜单</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">'/enterprise'</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> Layout<span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'enterprise'</span><span class="token punctuation">,</span>    meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">'企业管理'</span><span class="token punctuation">,</span> icon<span class="token operator">:</span> <span class="token string">'product'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>      path<span class="token operator">:</span> <span class="token string">'information'</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">'information'</span><span class="token punctuation">,</span>      <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/enterprise/information'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">'企业信息'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      hidden<span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      path<span class="token operator">:</span> <span class="token string">'detail'</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">'detail'</span><span class="token punctuation">,</span>      <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/enterprise/detail'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">'新增企业'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      hidden<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="后端返回（大多数情况也后端返回的）"><a href="#后端返回（大多数情况也后端返回的）" class="headerlink" title="后端返回（大多数情况也后端返回的）"></a>后端返回（大多数情况也后端返回的）</h3><ol><li>后端返回的话就会有个菜单管理，我们可以新增菜单和配置菜单的地址和我们前端组件的相对地址</li><li>后端返回的数据也有两种格式（1.直接返回菜单树 2.返回的是一维数组，这时候我们需要根据id和pid的关系处理成菜单树）</li><li>需要使用递归生成路由表<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 处理路由</span><span class="token keyword">const</span> <span class="token function-variable function">loadView</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 路由懒加载</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">@/views</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span> resolve<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 这个方法返回的结果是一个路由表  跟你手写的路由表是一样的  我这里删除了一些其他的逻辑  只留了主要逻辑  不能拿到其他项目使用!!!</span><span class="token keyword">function</span> <span class="token function">settingUpDynamicRouting</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>extend<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 这里根据type === 1 来判断是布局组件还是布局页面下的二级路由 （每个项目判断的方式都不一样，看你们公司怎么判断，而且每个项目也都不一样，你明白原理就行）</span>        obj<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token function">settingUpDynamicRouting</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span>        obj<span class="token punctuation">.</span>component <span class="token operator">=</span> Layout <span class="token comment">// Layout这个是布局组件，你也可以理解为一级路由</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>extend<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// type === 2  是二级路由，就是布局页面下展示的页面</span>        obj<span class="token punctuation">.</span>component <span class="token operator">=</span> <span class="token function">loadView</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>extend<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token comment">// loadView()  通过这个方法动态获取组件</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token comment">// 最后需要通过router.addRoutes()方法把我们要添加的路由加进去。  （这句话可以不管：这里是我们现在常用的vue-router的方法  最新版本的好像是改名字了  但是用法是一样的）</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">// async 你能理解的话就看，要是不懂的话就不管。这个也可以不要，可以后面学学</span>  <span class="token keyword">const</span> hasToken <span class="token operator">=</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>hasToken<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 登录了</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>menuList<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 有路由信息，我这里请求的时候也存到了vuex，因为vuex里面的数据刷新以后就没有了，所以刷新页面以后是会重新请求的</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 没有路由信息，就重新去请求</span>        store          <span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'user/getMenu'</span><span class="token punctuation">,</span> userInfo<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token comment">// 处理路由数据的方法我放到vuex里面去做了，所以这个方法返回的是直接可以使用的路由表</span>          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 获取获取菜单</span>            router<span class="token punctuation">.</span><span class="token function">addRoutes</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// 动态添加可访问路由表。 （router除了可以添加路由表，也有删除路由的方法，这些东西平常你多看文档）</span>            <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>to<span class="token punctuation">,</span> replace<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 路由添加以后进入要去的页面</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>             <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">'/login'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 请求失败的话去登录页面。我这里让用户去登录页面了，因为大部分是因为token过期，但是这个做其实不太好，应该在请求响应拦截器做这件事</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">// 没登录</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>whiteList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// whiteList这个是路由的白名单，如登录页面，注册页面等不需要登录能够直接进去的</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 进入页面</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 否则就跳到到登录页面</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/login?redirect=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>to<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>动态路由的菜单渲染部分是一样的 根据hidden来判断要显示哪些菜单按钮</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端菜单和路由&quot;&gt;&lt;a href=&quot;#前端菜单和路由&quot; class=&quot;headerlink&quot; title=&quot;前端菜单和路由&quot;&gt;&lt;/a&gt;前端菜单和路由&lt;/h1&gt;&lt;h2 id=&quot;菜单&quot;&gt;&lt;a href=&quot;#菜单&quot; class=&quot;headerlink&quot; title=&quot;菜</summary>
      
    
    
    
    
    <category term="管理系统" scheme="http://example.com/tags/%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>关于面试</title>
    <link href="http://example.com/2022/03/15/%E5%85%B3%E4%BA%8E%E9%9D%A2%E8%AF%95/"/>
    <id>http://example.com/2022/03/15/%E5%85%B3%E4%BA%8E%E9%9D%A2%E8%AF%95/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-03-15T08:56:06.351Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面试注意事项"><a href="#面试注意事项" class="headerlink" title="面试注意事项"></a>面试注意事项</h1><ol><li>要写清楚自己会哪些东西</li><li>要把上家公司描述清楚，做什么业务的，项目来源于什么</li><li>工作经历，尽量详细，具体到做了什么项目，用了什么技术</li><li>项目要写清楚项目交付结果或者上线反应</li><li>注意写的时候不要有读的有问题的介绍</li><li>投简历可以多投，投放时间尽量在上班时间</li><li>面试可以多接受，去不了的可以要求视频面或者电话面</li><li>面试过程中不要紧张，把自己当做一个工作很多年的工作者，听清楚面试官说的话。没听清或者不懂的地方可以再问面试官</li><li>面试官问一个问题以后如果你知道后面涉及到的问题尽量往深了说、尽量详细、逻辑要清楚。</li><li>如果面试官问的问题确实不会，就说这方面的东西没有用到过(但是不要是非常常见的知识点哈),不太清楚,稍后会去了解。</li><li>面试前要多刷题，如果面试官问你平常怎么学习，你就说看文档，买课看视频都可以。</li><li>面试完成以后要立即把面试官问的问题记录下来，并且找到答案。然后总结一下面试</li></ol><h1 id="我面试的套路"><a href="#我面试的套路" class="headerlink" title="我面试的套路"></a>我面试的套路</h1><blockquote><p>我会让面试者先自我介绍,然后根据他的介绍引出问题。</p></blockquote><p>要求：</p><ol><li>个人信息</li><li>上家公司是做什么的</li><li>团队的组成和运作方式</li><li>掌握哪些技术</li><li>讲一个简历上的项目<br>（项目是做什么的，怎么搭建，用了什么技术以及使用目的，项目是否交付或者上线，评价如何，个人对这个项目的评价或者感受，学习到了什么。。。）</li></ol><p>  <strong>如果面试者介绍的比较简单我会主动去问</strong><br>6. 针对他自我介绍的项目具体问怎么使用某一个技术。<br>    如:<br>      1、怎么使用router,有哪些钩子函数，怎么使用，什么场景下使用。…<br>      2、响应式原理。。。<br>7. css方面的 flex px/rem/em什么意思以及比例的计算（我个人面试css问的比较少）<br>8. js方面</p><ul><li>js数据类型 -&gt; 基础数据类型和引用数据类型的区别 -&gt; 怎么解决引用数据类型赋值问题 -&gt; 深拷贝和浅拷贝的区别 -&gt; 使用JSON深拷贝的弊端 -&gt; 手写深拷贝方法的逻辑</li><li>js类型转换 -&gt; 哪些操作造成类型转换 -&gt; 怎么判断类型(判断的方法很多，如果你说typeof，就会问你他的弊端，最好的方式是Object.prototype.toString.call([]))</li><li>作用域 -&gt; 查找方式 -&gt; 闭包 -&gt; 闭包会造成什么 -&gt; 为什么会这样 -&gt;js垃圾回收机制 -&gt; 标记清除/引用计数的逻辑 -&gt; 怎么解决闭包中的变量无法释放</li><li>原型链 -&gt; 查找方式 -&gt; <strong>proto</strong> 与 prototype 的区别</li><li>es6 -&gt; 用过哪些特性 -&gt; let、const、var的区别 -&gt; 箭头函数与普通函数的区别</li><li>怎么创建一个原生请求(new XMLHttpRequest()) -&gt; 怎么封装一个通用请求</li><li>js执行机制 -&gt; 事件循环 -&gt; 微任务宏任务 -&gt; 哪些是微任务哪些是宏任务</li><li>Promise怎么使用、async\await怎么使用 -&gt; async\await实现原理 -&gt; 怎么在async\await中抛出错误</li></ul><ol start="9"><li>再就是vue或者react上的问题了，这个问的太广了。可以是使用层面上，也可以是源码级别的。这种就网上看看常见的记住，或者直接背下来</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;面试注意事项&quot;&gt;&lt;a href=&quot;#面试注意事项&quot; class=&quot;headerlink&quot; title=&quot;面试注意事项&quot;&gt;&lt;/a&gt;面试注意事项&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;要写清楚自己会哪些东西&lt;/li&gt;
&lt;li&gt;要把上家公司描述清楚，做什么业务的，项目来源于什么&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>网络基础</title>
    <link href="http://example.com/2022/01/26/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/01/26/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</id>
    <published>2022-01-25T16:00:00.000Z</published>
    <updated>2022-02-11T03:46:34.003Z</updated>
    
    <content type="html"><![CDATA[<p>网络数据传输方式<br>一层一层的打包 然后一层一层的解析<br><img src="/imgs/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E4%BC%A0%E8%BE%93.png" alt="image text"></p><ol><li>发送者的数据从应用层到传输层 会增加TCP Header (端口)</li><li>然后到网络层 会增加IP header (IP地址)</li><li>然后到链路层 会增加以太网 Header (MAC地址) 通过传输介质到接收者 </li><li>以太网发现有个 以太网的Header 就把这个包给对应的MAC地址</li><li>然后传到网络层 IP协议解析这个包 找到对应的IP地址 发送过去</li><li>然后传到传输层 解析到端口  传给对应端口的应用</li></ol><h1 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h1><p><img src="/imgs/%E4%BB%A5%E5%A4%AA%E7%BD%91.png" alt="image text"></p><h2 id="网卡和MAC地址"><a href="#网卡和MAC地址" class="headerlink" title="网卡和MAC地址"></a>网卡和MAC地址</h2><p>MAC地址： 00-05-5D-E8-0F-A3<br>交换机就是根据MAC地址转发数据的</p><ol><li>电脑通过网卡连接网络</li><li>每块网卡有个厂商设定的MAC地址（又称物理地址）</li><li>这个地址是设备的唯一标识</li><li>网卡的MAC地址可以通过驱动改变（只要在同一个链路里面没有相同的话不会有影响）</li></ol><h2 id="以太网的Header"><a href="#以太网的Header" class="headerlink" title="以太网的Header"></a>以太网的Header</h2><ol><li>目标MAC地址（6字节）</li><li>源MAC地址（6字节）</li><li>类型 （2字节）</li><li>数据（46~1500字节）</li><li>FCS（4字节，帧检验序列）</li></ol><h1 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h1><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p><img src="/imgs/ip%E5%9C%B0%E5%9D%80.png" alt="image text"><br><img src="/imgs/%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81.png" alt="image text"></p><ol><li>又32位二进制数组成</li><li>分为<em>网络标识</em>和<em>主机标识</em>两部分</li><li><em>子网掩码</em>确定了32位里面哪些是主机标识哪些是网络标识<br>1为网络标识，0为主机标识</li></ol><h2 id="路由控制"><a href="#路由控制" class="headerlink" title="路由控制"></a>路由控制</h2><h3 id="在同一个网络下的数据传输："><a href="#在同一个网络下的数据传输：" class="headerlink" title="在同一个网络下的数据传输："></a>在同一个网络下的数据传输：</h3><p><img src="/imgs/ARP%E5%B9%BF%E6%92%AD%E6%9F%A5%E8%AF%A2IP%E5%AF%B9%E5%BA%94%E7%9A%84MAC%E5%9C%B0%E5%9D%801.png" alt="alt"><br><img src="/imgs/ARP%E5%93%8D%E5%BA%94.png" alt="alt"></p><ol><li>应用层192.168.0.1 给 192.168.0.1 发送信息</li><li>传输层 增加TCP Header 记录端口： from 80 to 80 </li><li>网络层 增加IP Header 记录ip: from 192.168.0.1 to 192.168.0.2</li><li>以太网 增加以太网 Header from 00-05-5D-E8-A3 to ???<br>这个时候以太网知道发送者的MAC地址，同时在MAC地址表记录下来，但是不知道接收者192.168.0.2 的MAC地址</li><li>这时候会发一个ARP广播 对应的信息有发送者的ip和MAC地址接收者的IP地址和<strong>MAC（FFFFFF）</strong> </li><li>交换机收到目标MAC地址为FFFFFF 会发送一个广播给连接交换机的所有电脑 查询对目标IP对应电脑MAC地址</li><li>当目标电脑收到信息以后会将MAC地址告诉发送者，同时也会经过交换机，交换机会在MAC地址表记录下来</li><li>知道目标的MAC地址以后就可以将MAC地址补到之前缺失的MAC地址上</li><li>最后一层层解析数据就到了192.168.0.2的电脑上</li></ol><h3 id="网络之间的数据传输"><a href="#网络之间的数据传输" class="headerlink" title="网络之间的数据传输"></a>网络之间的数据传输</h3><p><img src="/imgs/%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92%E8%BF%87%E7%A8%8B1.png" alt="alt"><br><img src="/imgs/%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%9302.png" alt="alt"></p><ol><li>将出数据从192.168.0.1 发送给 172.6.0.1 因为ip不是在同一个网段所以会发送给网关（192.168.0.254）</li><li>但是不知道网关的MAC地址，所以会发起ARP查询</li><li>然后收到网关的ARP响应，将MAC地址补上并且把数据发送给网关192.168.0.254）</li><li>网关收到192.168.0.1发来的数据，发现目标的IP地址也不是自己，然后查询路由表得知自己应该发送给路由器B 也就是192.168.1.254</li><li>然后再次发起ARP查询 找到192.168.1.254 MAC地址 并发送给过去</li><li>直到发送到路由器C，路由器C查询他自己的路由表发现，这个网段是自己直连的，然后查询ARP缓存里面有没有IP对应的MAC地址，只要172.6.0.1往外面发过数据，那么他的MAC地址就会被缓存下来，如果没有发送过那就发起ARP广播查询172.6.0.1MAC地址，拿到地址以后将目标的MAC地址更改为172.6.0.1MAC地址，将数据发送过去。</li><li>经过网络层和传输层172.6.0.1拿到最终数据</li></ol><h1 id="IP分片和重组"><a href="#IP分片和重组" class="headerlink" title="IP分片和重组"></a>IP分片和重组</h1><ol><li>不同的网络上最大传输单元（MTU）的大小是不一样的</li><li>IP协议这是网络的上层封装，它对此进行了抽象</li><li>路径发现MTU会在发送数据帧超过网络MTU时自动调整并重发数据</li><li>IP报文由路由器进行分片，目标主机进行重组</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;网络数据传输方式&lt;br&gt;一层一层的打包 然后一层一层的解析&lt;br&gt;&lt;img src=&quot;/imgs/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E4%BC%A0%E8%BE%93.png&quot; alt=&quot;image text&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;</summary>
      
    
    
    
    
    <category term="网络基础" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>前端常见面试题</title>
    <link href="http://example.com/2022/01/24/%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://example.com/2022/01/24/%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2022-01-23T16:00:00.000Z</published>
    <updated>2022-03-15T07:30:54.424Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h1><h2 id="单页面应用（SPA）"><a href="#单页面应用（SPA）" class="headerlink" title="单页面应用（SPA）"></a>单页面应用（SPA）</h2><p>  是加载单个 HTML 页面并在用户与应用程序交互时动态更新该页面的。它将所有的活动局限于一个 Web 页面中，仅在该 Web 页面初始化时加载相应的 HTML 、 JavaScript 、 CSS 。一旦页面加载完成， SPA 不会因为用户的操作而进行页面的重新加载或跳转，而是利用 JavaScript 动态的变换 HTML（采用的是 div 切换显示和隐藏），从而实现UI与用户的交互。在 SPA 应用中，应用加载之后就不会再有整页刷新。相反，展示逻辑预先加载，并有赖于内容Region（区域）中的视图切换来展示内容。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>有良好的交互体验<br>能提升页面切换体验，用户在访问应用页面是不会频繁的去切换浏览页面，从而避免了页面的重新加载；    2. 前后端分离开发<br>单页Web应用可以和 RESTful 规约一起使用，通过 REST API 提供接口数据，并使用 Ajax 异步获取，这样有助于分离客户端和服务器端工作。更进一步，可以在客户端也可以分解为静态页面和页面交互两个部分；    3. 减轻服务器压力<br>服务器只用出数据就可以，不用管展示逻辑和页面合成，吞吐能力会提高几倍；    4. 共用一套后端程序代码<br>不用修改后端程序代码就可以同时用于 Web 界面、手机、平板等多种客户端；<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3></li><li>SEO难度较高<br>由于所有的内容都在一个页面中动态替换显示，所以在SEO上其有着天然的弱势，所以如果你的站点对SEO很看重，且要用单页应用，那么就做些静态页面给搜索引擎用吧；</li><li>前进、后退管理<br>由于单页Web应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理，当然此问题也有解决方案，比如利用URI中的散列+iframe实现；</li><li>初次加载耗时多<br>为实现单页Web应用功能及显示效果，需要在加载页面的时候将JavaScript、CSS统一加载，部分页面可以在需要的时候加载。所以必须对JavaScript及CSS代码进行合并压缩处理；<h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3>在SPA中，通常一开始就会加载所有必需的代码（HTML，JavaScript和CSS），有时候考虑到首屏加载太慢会按需加载，按需加载就是按照当前呈现的不同页面加载不同的文件，而不是最开始就把所有文件都加载出来，从而避免首屏加载很慢。<br>当首屏加载完毕后，设备&amp;网络处于空闲状态，可以对其他路由组件进行预加载，以便提升页面切换性能。<br>根据路由拆分减少初始加载体积,利用异步加载方式，在路由注册时提供异步拉取组件的方法，仅在需要进入对应路由时，对应组件才会被加载进来。    * 初次加载的速度<br> 单页应用的第一页加载会比基于服务器的应用慢。这是因为首次加载必须先拿到框架和应用程序的代码，再在浏览器中呈现所需的视图。基于服务器的应用程序只需将所需的HTML推送到浏览器，从而减少了延迟和下载用时。    * 加快页面加载速度<br> 有一些方法可以加快单页应用的初次加载速度，比如采用多项缓存措施、需要时再加载某些模块（懒加载）。    * 页面生命周期<br> 单页应用在初始页面加载时被完全加载，然后页面区域被替换或更新为按需从服务器加载的新页面片段。为避免过度下载未使用的功能，单页应用通常会逐渐下载更多内容，如所需要的功能、页面的一小块，或者完整的一页。</li></ol><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><h2 id="vue的响应式原理"><a href="#vue的响应式原理" class="headerlink" title="vue的响应式原理"></a>vue的响应式原理</h2><h2 id="data为什么是函数"><a href="#data为什么是函数" class="headerlink" title="data为什么是函数"></a>data为什么是函数</h2><h2 id="v-if-和-v-show-的区别"><a href="#v-if-和-v-show-的区别" class="headerlink" title="v-if 和 v-show 的区别"></a>v-if 和 v-show 的区别</h2><h2 id="v-mode-原理"><a href="#v-mode-原理" class="headerlink" title="v-mode 原理"></a>v-mode 原理</h2><h2 id="computed、watch、method"><a href="#computed、watch、method" class="headerlink" title="computed、watch、method"></a>computed、watch、method</h2><h2 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h2><h2 id="vue组件通讯"><a href="#vue组件通讯" class="headerlink" title="vue组件通讯"></a>vue组件通讯</h2><h2 id="vue单向数据流"><a href="#vue单向数据流" class="headerlink" title="vue单向数据流"></a>vue单向数据流</h2><h2 id="keep-alive组件"><a href="#keep-alive组件" class="headerlink" title="keep-alive组件"></a>keep-alive组件</h2><h2 id="slot-插槽"><a href="#slot-插槽" class="headerlink" title="slot 插槽"></a>slot 插槽</h2><h2 id="vue检测数组或对象的变化"><a href="#vue检测数组或对象的变化" class="headerlink" title="vue检测数组或对象的变化"></a>vue检测数组或对象的变化</h2><h2 id="虚拟dom"><a href="#虚拟dom" class="headerlink" title="虚拟dom"></a>虚拟dom</h2><h2 id="nextTick的原理"><a href="#nextTick的原理" class="headerlink" title="nextTick的原理"></a>nextTick的原理</h2><h2 id="vueX"><a href="#vueX" class="headerlink" title="vueX"></a>vueX</h2><h2 id="vue-rouer的两种模式"><a href="#vue-rouer的两种模式" class="headerlink" title="vue-rouer的两种模式"></a>vue-rouer的两种模式</h2><h2 id="vue-router有哪几种导航钩子"><a href="#vue-router有哪几种导航钩子" class="headerlink" title="vue-router有哪几种导航钩子"></a>vue-router有哪几种导航钩子</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vue&quot;&gt;&lt;a href=&quot;#vue&quot; class=&quot;headerlink&quot; title=&quot;vue&quot;&gt;&lt;/a&gt;vue&lt;/h1&gt;&lt;h2 id=&quot;单页面应用（SPA）&quot;&gt;&lt;a href=&quot;#单页面应用（SPA）&quot; class=&quot;headerlink&quot; title=&quot;单</summary>
      
    
    
    
    
    <category term="面试题" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>docker</title>
    <link href="http://example.com/2022/01/23/docker/"/>
    <id>http://example.com/2022/01/23/docker/</id>
    <published>2022-01-22T16:00:00.000Z</published>
    <updated>2022-01-23T07:02:29.800Z</updated>
    
    <content type="html"><![CDATA[<p>docke常用命令：</p><table><thead><tr><th>命令</th><th>意义</th></tr></thead><tbody><tr><td>docker pull &lt;镜像名称&gt;</td><td>获取镜像</td></tr><tr><td>docker run -it &lt;镜像名称&gt; /bin/bash</td><td>启动容器</td></tr><tr><td>exit</td><td>退出终端</td></tr><tr><td>docker ps -a</td><td>查看所有的容器</td></tr><tr><td>docker rm -f &lt;容器id&gt;</td><td>删除容器</td></tr><tr><td>docker start</td><td>docker start b750bbbcfd88</td></tr><tr><td>docker run -itd –name ubuntu-test ubuntu /bin/bash</td><td>后台运行</td></tr><tr><td>docker stop &lt;容器 ID&gt;</td><td>停止一个容器</td></tr><tr><td>docker restart &lt;容器 ID&gt;</td><td>重启一个容器</td></tr><tr><td>docker attach &lt;容器 ID&gt;</td><td>退出容器（会停止）</td></tr><tr><td>docker exec -it &lt;容器 ID&gt; /bin/bash</td><td>进入出容器（不会停止）</td></tr><tr><td>exit</td><td>退出容器</td></tr><tr><td>docker export &lt;容器 ID&gt; &gt; &lt;容器名称&gt;.tar</td><td>导出容器</td></tr><tr><td>cat docker/ubuntu.tar</td><td>docker import - test/ubuntu:v1</td></tr><tr><td>docker import <a href="http://example.com/exampleimage.tgz">http://example.com/exampleimage.tgz</a> example/imagerepo</td><td>通过地址导入</td></tr><tr><td>docker port  &lt;容器id或者名称&gt;</td><td>查看容器端口的映射情况</td></tr><tr><td>docker logs -f bf08b7f2cd89</td><td>docker logs [ID或者名字] 可以查看容器内部的标准输出</td></tr><tr><td>docker top &lt;容器名称&gt;</td><td>查看容器内部运行的进程</td></tr><tr><td>docker search httpd</td><td>查找镜像</td></tr><tr><td>docker rmi hello-world</td><td>删除镜像</td></tr><tr><td>docker images</td><td>查看当前的镜像列表</td></tr><tr><td>docker network create &lt;名称&gt;</td><td>创建一个网络</td></tr><tr><td>docker network ls</td><td>查看网络</td></tr><tr><td>docker network rm &lt;名称&gt;</td><td>断开和移除网络</td></tr><tr><td>docker network inspect &lt;名称&gt;</td><td>查看网络信息</td></tr><tr><td>docker cp /www/runoob 96f7f14e99ab:/www/</td><td>将主机/www/runoob目录拷贝到容器96f7f14e99ab的/www目录下</td></tr></tbody></table><h1 id="使用nginx"><a href="#使用nginx" class="headerlink" title="使用nginx"></a>使用nginx</h1><p>江橙的笔记：</p><blockquote><p>首先在你的服务器上面创建一个工作目录 例如以下创建的是目录为 dockerData<br>systemctl start docker //启动docker<br>systemctl enable docker //设置为开机启动<br>docker version 验证安装是否成功(有client和service两部分表示docker安装启动都成功了<br>docker network create my_net 创建一个网络</p></blockquote><blockquote><p>docker工作区和宿主机目录挂载了之后，修改的文件会进行同步，一般来说只需要修改宿主机的文件就行了，不需要修改工作区<br>修改宿主机的文件需要重启容器才会同步过去，修改工作区(容器)会立即同步到宿主机里面<br>删除容器不会删除宿主机的挂载目录的数据</p></blockquote><blockquote><p>1、拉取镜像 去dockerhub拉取合适的版本即可 docker pull nginx:1.20.1-alpine<br>2、创建配置目录和项目目录 -v /dockerData/nginx:/etc/nginx <br>3、跑不带映射的容器 docker run -itd –name nginx 7f18bdc92ca5(镜像id)<br>4、docker cp nginx:/etc/nginx/ /dockerData/nginx/ | docker exec -it nginx sh(目录为容器的目录)<br>5、删除容器 docker rm -f ngxin(指的是容器名) 因为删除容器是不会删除宿主机的文件的，但是更新容器里面的挂载目录文件时，会更新宿主机文件，更新宿主机文件也会更新容器文件(需重启容器)</p></blockquote><pre class="line-numbers language-none"><code class="language-none"># &#x2F;dockerData&#x2F;nginx&#x2F;www:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html \ 挂载目录地址# &#x2F;dockerData&#x2F;nginx:&#x2F;etc&#x2F;nginx \  挂载nginx配置地址# &#x2F;dockerData&#x2F;nginx&#x2F;log:var&#x2F;log&#x2F;nginx \  挂载log日志地址docker run -itd --name nginx -p 80:80 -p 443:443 \ -v &#x2F;dockerData&#x2F;nginx&#x2F;www:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html \ -v &#x2F;dockerData&#x2F;nginx:&#x2F;etc&#x2F;nginx \ -v &#x2F;dockerData&#x2F;nginx&#x2F;log:&#x2F;var&#x2F;log&#x2F;nginx \ --network my_net --network-alias nginx 7f18bdc92ca5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>配置nginx以后需要重新启动<br>docker stop nginx</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;docke常用命令：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;意义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;docker pull &amp;lt;镜像名称&amp;gt;&lt;/td&gt;
&lt;td&gt;获取镜像&lt;/td&gt;
&lt;/</summary>
      
    
    
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>nginx学习</title>
    <link href="http://example.com/2022/01/21/%E6%9C%8D%E5%8A%A1%E5%99%A8-nginx/"/>
    <id>http://example.com/2022/01/21/%E6%9C%8D%E5%8A%A1%E5%99%A8-nginx/</id>
    <published>2022-01-20T16:00:00.000Z</published>
    <updated>2022-01-21T09:56:34.989Z</updated>
    
    <content type="html"><![CDATA[<p>主要配置 conf<br>更改配置以后需要重启</p><blockquote><p>docker restart nginx</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">server <span class="token punctuation">&#123;</span>  <span class="token comment">// 根据你的需求改变此端口</span>  listen <span class="token number">80</span><span class="token punctuation">;</span>  <span class="token comment">//也可以是1.2.3.4:80的形式</span>  <span class="token comment">// 多个主机名可以用空格隔开，当然这个信息也是需要按照你的需求而改变的。</span>  server_name  star<span class="token punctuation">.</span>yourdomain<span class="token punctuation">.</span>com <span class="token operator">*</span><span class="token punctuation">.</span>yourdomain<span class="token punctuation">.</span>com www<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">.</span>yourdomain<span class="token punctuation">.</span>com<span class="token punctuation">;</span>  <span class="token comment">//或者可以使用：_ * (具体内容参见本维基其他页面)</span>  root <span class="token operator">/</span><span class="token constant">PATH</span><span class="token operator">/</span><span class="token constant">TO</span><span class="token operator">/</span><span class="token constant">WEBROOT</span><span class="token operator">/</span>$host<span class="token punctuation">;</span>  alias   error_page  <span class="token number">404</span>     <span class="token comment">// http://yourdomain.com/errors/404.html;</span>  access_log  logs<span class="token operator">/</span>star<span class="token punctuation">.</span>yourdomain<span class="token punctuation">.</span>com<span class="token punctuation">.</span>access<span class="token punctuation">.</span>log<span class="token punctuation">;</span>  location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>    root   <span class="token operator">/</span><span class="token constant">PATH</span><span class="token operator">/</span><span class="token constant">TO</span><span class="token operator">/</span><span class="token constant">WEBROOT</span><span class="token operator">/</span>$host<span class="token operator">/</span><span class="token punctuation">;</span>  <span class="token comment">// 项目的存放地址</span>    index  index<span class="token punctuation">.</span>html<span class="token punctuation">;</span> <span class="token comment">// 打开的根目录</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 直接支持静态文件 (从配置上看来不是直接支持啊)</span>  location <span class="token operator">~</span><span class="token operator">*</span> <span class="token operator">^</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token punctuation">.</span><span class="token punctuation">(</span>jpg<span class="token operator">|</span>jpeg<span class="token operator">|</span>gif<span class="token operator">|</span>css<span class="token operator">|</span>png<span class="token operator">|</span>js<span class="token operator">|</span>ico<span class="token operator">|</span>html<span class="token punctuation">)</span>$ <span class="token punctuation">&#123;</span>    access_log        off<span class="token punctuation">;</span>    expires           <span class="token number">30</span>d<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  location <span class="token operator">~</span> <span class="token punctuation">.</span>php$ <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果需要，你可以为不同的FCGI进程设置不同的服务信息</span>    fastcgi_pass   <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token constant">YOURFCGIPORTHERE</span><span class="token punctuation">;</span>    fastcgi_index  index<span class="token punctuation">.</span>php<span class="token punctuation">;</span>    fastcgi_param  <span class="token constant">SCRIPT_FILENAME</span>  <span class="token operator">/</span><span class="token constant">PATH</span><span class="token operator">/</span><span class="token constant">TO</span><span class="token operator">/</span><span class="token constant">WEBROOT</span><span class="token operator">/</span>$host<span class="token operator">/</span>$fastcgi_script_name<span class="token punctuation">;</span>    fastcgi_param  <span class="token constant">QUERY_STRING</span>     $query_string<span class="token punctuation">;</span>    fastcgi_param  <span class="token constant">REQUEST_METHOD</span>   $request_method<span class="token punctuation">;</span>    fastcgi_param  <span class="token constant">CONTENT_TYPE</span>     $content_type<span class="token punctuation">;</span>    fastcgi_param  <span class="token constant">CONTENT_LENGTH</span>   $content_length<span class="token punctuation">;</span>    fastcgi_intercept_errors on<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  location <span class="token operator">~</span> <span class="token operator">/</span>\<span class="token punctuation">.</span>ht <span class="token punctuation">&#123;</span>    deny  all<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;主要配置 conf&lt;br&gt;更改配置以后需要重启&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;docker restart nginx&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;line-numbers language-js&quot; data-language=&quot;j</summary>
      
    
    
    
    
    <category term="服务器" scheme="http://example.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>extends和implements区别</title>
    <link href="http://example.com/2022/01/10/extends%E5%92%8Cimplements%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2022/01/10/extends%E5%92%8Cimplements%E5%8C%BA%E5%88%AB/</id>
    <published>2022-01-09T16:00:00.000Z</published>
    <updated>2022-01-10T08:27:01.574Z</updated>
    
    <content type="html"><![CDATA[<h1 id="extends与implements的不同"><a href="#extends与implements的不同" class="headerlink" title="extends与implements的不同"></a>extends与implements的不同</h1><ol><li>在类的声明中，通过关键字extends来创建一个类的子类。<br>一个类通过关键字implements声明自己使用一个或者多个接口。<br>extends 是继承某个类, 继承之后可以使用父类的方法, 也可以重写父类的方法;<br>implements 是实现多个接口, 接口的方法一般为空的, 必须重写才能使用 </li><li>extends是继承父类，只要那个类不是声明为final或者那个类定义为abstract的就能继承<br>Java中不支持多重继承，但是可以用接口 来实现，这样就要用到implements，继承只能继承一个类，<br>但implements可以实现多个接口，用逗号分开就行了 比如 ：<br>class A extends B implements C,D,E<br>接口实现的注意点： </li></ol><ul><li>实现一个接口就是要实现该接口的所有的方法(抽象类除外)。 </li><li>接口中的方法都是抽象的。  </li><li>多个无关的类可以实现同一个接口，一个类可以实现多个无关的接口。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;extends与implements的不同&quot;&gt;&lt;a href=&quot;#extends与implements的不同&quot; class=&quot;headerlink&quot; title=&quot;extends与implements的不同&quot;&gt;&lt;/a&gt;extends与implements的不同&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>vue3的使用方式</title>
    <link href="http://example.com/2022/01/06/vue3%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/01/06/vue3%E4%BD%BF%E7%94%A8/</id>
    <published>2022-01-05T16:00:00.000Z</published>
    <updated>2022-01-06T09:44:06.311Z</updated>
    
    <content type="html"><![CDATA[<p>vue3的使用方式</p><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"home"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 父子组件传值 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>son num<span class="token operator">=</span><span class="token string">"66"</span> name<span class="token operator">=</span><span class="token string">"trist"</span> <span class="token operator">:</span>age<span class="token operator">=</span><span class="token string">"age"</span> @baba<span class="token operator">=</span><span class="token string">"getSon"</span><span class="token operator">></span><span class="token operator">&lt;</span>a<span class="token operator">></span>我是插槽<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>son<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> son <span class="token keyword">from</span> <span class="token string">'./son.vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> reactive<span class="token punctuation">,</span> toRefs <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useRoute<span class="token punctuation">,</span> useRouter <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>son<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> ctx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 获取当前路由信息</span><span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 全局路由的实例</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'trist'</span><span class="token punctuation">,</span>age<span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>sex<span class="token operator">:</span> <span class="token string">'boy'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 监听子组件事件</span><span class="token keyword">const</span> <span class="token function-variable function">getSon</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token function">toRefs</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">,</span>getSon<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="＜script-setup＞语法糖"><a href="#＜script-setup＞语法糖" class="headerlink" title="＜script setup＞语法糖"></a>＜script setup＞语法糖</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div @click<span class="token operator">=</span><span class="token string">"log"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> msg <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>MyComponent <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token keyword">import</span> MyComponent <span class="token keyword">from</span> <span class="token string">'./MyComponent.vue'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token comment">// 变量</span><span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'Hello!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//响应式数据依然需要ref</span><span class="token comment">// 函数</span><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// &lt;script setup> 中可以使用顶层 await。结果代码会被编译成async setup()</span><span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/api/post/1</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=></span> r<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h1><p>跟react的类组件相似<br>可以跟装饰器一起使用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hello"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> msg <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span>h2 @click<span class="token operator">=</span><span class="token string">"(event) => setData('1', event)"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> flag <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>    <span class="token operator">&lt;</span>h2<span class="token operator">></span>initVar<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> initVar <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">...</span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Options<span class="token punctuation">,</span> Vue <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue-class-component"</span><span class="token punctuation">;</span>@<span class="token function">Options</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    msg<span class="token operator">:</span> String<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      flag<span class="token operator">:</span> <span class="token string">"这是一个欢迎组件"</span><span class="token punctuation">,</span>      initVar<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">&#123;</span>  msg<span class="token operator">!</span><span class="token operator">:</span> string<span class="token punctuation">;</span>  flag<span class="token operator">!</span><span class="token operator">:</span> string<span class="token punctuation">;</span>  initVar<span class="token operator">!</span><span class="token operator">:</span> number<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>initVar<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">setData</span><span class="token punctuation">(</span>value<span class="token operator">:</span> string<span class="token punctuation">,</span> event<span class="token operator">:</span> PointerEvent<span class="token punctuation">)</span><span class="token operator">:</span> boolean <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>initVar <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">+</span> value<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;vue3的使用方式&lt;/p&gt;
&lt;h1 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/a&gt;基本使用&lt;/h1&gt;&lt;pre class=&quot;line-numbers language-js&quot; data-langu</summary>
      
    
    
    
    
    <category term="vue3" scheme="http://example.com/tags/vue3/"/>
    
  </entry>
  
  <entry>
    <title>vue3学习</title>
    <link href="http://example.com/2022/01/05/vue2%E8%BF%9B%E9%98%B6vue3/"/>
    <id>http://example.com/2022/01/05/vue2%E8%BF%9B%E9%98%B6vue3/</id>
    <published>2022-01-04T16:00:00.000Z</published>
    <updated>2022-01-06T02:19:57.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue3与Vue2在应用中的区别"><a href="#Vue3与Vue2在应用中的区别" class="headerlink" title="Vue3与Vue2在应用中的区别"></a>Vue3与Vue2在应用中的区别</h1><ul><li>响应式数据在Vue3中变得更加灵活和友善。Vue2中 data 里没有定义的属性在后续无法正常的进行响应操作，必须通过 Vue.set 这个 API 向响应式对象中添加一个 property，并确保这个新 property 同样是响应式的，且触发视图更新。它必须用于向响应式对象上添加新 property，因为 Vue 无法探测普通的新增 property (比如 this.myObject.newProperty = ‘hi’); 然而在 Vue3 中我们可以通过引入 ref 来操作响应值。ref 是一个实例方法，接受一个内部值并返回一个响应式且可变的 ref 对象。ref 对象具有指向内部值的单个 property.value。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 0</span>count<span class="token punctuation">.</span>value<span class="token operator">++</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>Vue3 采用了 ES6的一项新特性：Proxy 来实现Vue3中数据响应式的设计。通过下面的伪代码我们可以对比一下：<pre class="line-numbers language-js" data-language="js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">definProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token string">'count'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token string">'count'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Object.defineProperty 要修改 data 中的属性必须要明确的知道 key 值（count）, Proxy 在使用中是读取或者设置data中任意的 key，所以不管是修改已有的属性还是新增属性，都可以实现响应式的要求。</p></blockquote></li></ul><h1 id="vue3使用"><a href="#vue3使用" class="headerlink" title="vue3使用"></a>vue3使用</h1><ul><li>关于生命周期钩子函数<table><thead><tr><th>vue2</th><th>vue3</th></tr></thead><tbody><tr><td>beforeCreate()</td><td>use setup()</td></tr><tr><td>created()</td><td>use setup()</td></tr><tr><td>beforeMount()</td><td>onBeforeMount</td></tr><tr><td>mounted()</td><td>onMounted</td></tr><tr><td>beforeUpdate()</td><td>onBeforeUpdate</td></tr><tr><td>updated()</td><td>onUpdated</td></tr><tr><td>beforeDestory()</td><td>onBeforeUnmount</td></tr><tr><td>destoryed()</td><td>onUnmounted</td></tr><tr><td>activated()</td><td>onActivated</td></tr><tr><td>deactivated()</td><td>onDeactivated</td></tr><tr><td>errorCaptured()</td><td>onErrorCaptured</td></tr><tr><td></td><td>onRenderTracked(新增) — DebuggerEvent 调试用</td></tr><tr><td></td><td>onRenderTriggered(新增) — DebuggerEvent 调试用</td></tr></tbody></table></li></ul><blockquote><p>Vue3中的钩子函数都在 setup() 中调用。</p></blockquote><ul><li><p>computed，watch 可直接调用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">const</span> double <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> count<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>watch 接收两个参数，第一个参数是监听的属性，多个属性可传入数组， 第二个参数是一个回调函数，回调函数有两个参数（newVal, oldVal）；当 watch 的第一个参数是一个数组时，newVal 与 oldVal 对应的也是数组形式，一一对应。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 监听count</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'newVal:'</span><span class="token punctuation">,</span> newVal<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'oldVal:'</span><span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 监听多个属性值</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'newVal:'</span><span class="token punctuation">,</span> newVal<span class="token punctuation">)</span> <span class="token comment">// 数组</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'oldVal:'</span><span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token comment">// 数组</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是需要监听定义在 reacitive 对象中的单一属性，需要通过函数返回值来进行监听。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> data<span class="token punctuation">.</span>count<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'newVal:'</span><span class="token punctuation">,</span> newVal<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'oldVal:'</span><span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Option API 与 Composition API</p><ul><li>vue 2.x 使用的是Option API 构建组件。一个组件的功能需要通过methods，computed，watch，data等属性和方法，共同处理页面逻辑。存在多个业务功能共同使用一个实例化new vue()<br>这种构建方式在业务逻辑复杂的大项目中，API比较分散，可能会存在分不清哪个方法对应哪个功能。项目的易读性、可复用性相对较差，耦合性较高。</li><li>vue 3.x 使用的是Composition API 构建组件。代码是根据逻辑功能来组织的，一个功能所定义的所有api会放在一起 （高内聚，低耦合），我们能快速的定位到这个功能所用到的所有API，提高代码可读性和可维护性</li></ul></li><li><p>setup函数是使用Composition API的入口</p><ul><li><p>在创建组件实例时，在初始组件解析之后调用setup。在生命周期方面，它在beforeCreate钩子之前调用；</p></li><li><p>可以返回一个对象，这个对象的属性被合并到渲染上下文，并可以在模板中直接使用</p></li><li><p>可以返回一个渲染函数，如下： return () =&gt; h(‘div’, [count.value, object.foo])</p></li><li><p>接收props对象作为第一个参数，接收来的props对象，props对象是响应式的(reactive), 当传入的新的props对象时会对其进行更新，且可以通过watchEffect或watch监视其变化。<br>props对象不支持解构,解构会导致失去响应性：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> String  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> name <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">name is: </span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span> name<span class="token punctuation">)</span> <span class="token comment">// Will not be reactive!</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>接受context对象作为第二个参数，这个对象包含attrs（属性），slots（作用域插槽），emit（事件传播函数）三个属性。（还有expose 函数，实际为4个属性， 可以通过expose 向父级暴露一些子组件的函数、属性等，父组件可以通过ref直接获取到）<br>与 prop 不同，context 是普通对象，不是响应式的，slots 和 attr 的值会在组件更新时而更新，如果需要监听 slots 、‘attr’ 的更新触发的副作用，建议在 setup() 函数中添加 onUpdated 函数监听副作用</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// comp-a.vue</span><span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'comp-a'</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> attrs<span class="token punctuation">,</span> slots<span class="token punctuation">,</span> emit<span class="token punctuation">,</span> expose <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> observed <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      a<span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">function</span> <span class="token function">setObservedA</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      observed<span class="token punctuation">.</span>a <span class="token operator">=</span> value    <span class="token punctuation">&#125;</span>    <span class="token function">expose</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      setObservedA    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      observed<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// comp-b.vue</span><span class="token punctuation">&#123;</span>  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">    &lt;comp-a ref="compa" />  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> compa <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// comp-a 调用 expose 之后, 父组件 ref 拿到的结果为调用 expose 时的参数。而不再是组件实例了</span>      compa<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">setObservedA</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      compa    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>setup() 中的 this 不是当前组件实例，实际打印发现为 undefined ， 不建议 setup() 与 Option API 混用，可能会造成混乱。</li></ul></li></ul><h1 id="vue3-中的h函数"><a href="#vue3-中的h函数" class="headerlink" title="vue3 中的h函数"></a>vue3 中的h函数</h1><ul><li>h函数就是vue中的createElement方法，这个函数作用就是创建虚拟dom对象，通过diff算法，追踪dom变化的</li><li>createElement函数，它返回的实际上不是一个DOM元素，更准确的名字是：createNodeDescription（直译为——创建节点描述），因为它所包含的信息会告诉vue页面上需要渲染什么样的节点，包括其子节点的描述信息。我们把这样的节点叫做：“虚拟节点（virtual node）”，也常简写为：“VNode”</li><li>h函数接受三个参数：<br>参数一：tag（标签名）、组件的选项对象、函数（必选）；<br>参数二：一个对象，标签的属性对应的数据，如：class、id、disabled 等等（可选）；<br>参数三：子级虚拟节点，字符串形式或数组形式，子级虚拟节点也需要使用createElement构建。</li><li>dom节点 bable编译前后对比：<br><img src="/imgs/vue3-1.png" alt="Image text"></li></ul><h1 id="Vue3-0-toRaw函数和markRaw函数"><a href="#Vue3-0-toRaw函数和markRaw函数" class="headerlink" title="Vue3.0 toRaw函数和markRaw函数"></a>Vue3.0 toRaw函数和markRaw函数</h1><ul><li>toRaw方法是把被reactive或readonly后的Proxy对象转换为原来的target对象，而markRaw则直接让target不能被reactive或readonly</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue3与Vue2在应用中的区别&quot;&gt;&lt;a href=&quot;#Vue3与Vue2在应用中的区别&quot; class=&quot;headerlink&quot; title=&quot;Vue3与Vue2在应用中的区别&quot;&gt;&lt;/a&gt;Vue3与Vue2在应用中的区别&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;响应式数据在Vu</summary>
      
    
    
    
    
    <category term="vue3" scheme="http://example.com/tags/vue3/"/>
    
  </entry>
  
  <entry>
    <title>git相关操作</title>
    <link href="http://example.com/2021/12/30/git-%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/2021/12/30/git-%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</id>
    <published>2021-12-29T16:00:00.000Z</published>
    <updated>2022-04-08T01:26:52.808Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-commit-代码提交规范"><a href="#git-commit-代码提交规范" class="headerlink" title="git commit 代码提交规范"></a>git commit 代码提交规范</h1><pre class="line-numbers language-none"><code class="language-none">type(scope) : subject<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>type（必须） : commit 的类别，只允许使用下面几个标识：</li><li>feat : 新功能</li><li>fix : 修复bug</li><li>docs : 文档改变</li><li>style : 代码格式改变</li><li>refactor : 某个已有功能重构</li><li>perf : 性能优化</li><li>test : 增加测试</li><li>build : 改变了build工具 如 grunt换成了 npm</li><li>revert : 撤销上一次的 commit</li><li>chore : 构建过程或辅助工具的变动</li><li>scope（可选） : 用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</li><li>subject（必须） : commit 的简短描述，不超过50个字符。</li></ul><h1 id="使用commitizen-规范提交"><a href="#使用commitizen-规范提交" class="headerlink" title="使用commitizen 规范提交"></a>使用commitizen 规范提交</h1><ol><li>npm install -g commitizen</li><li>commitizen init cz-conventional-changelog –save –save-exact</li><li>用 git cz 命令取代 git commit</li></ol><h1 id="使用git-commit-提交"><a href="#使用git-commit-提交" class="headerlink" title="使用git commit 提交"></a>使用git commit 提交</h1><ol><li>npm i @commitlint/config-conventional @commitlint/cli -D </li><li><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token comment">// 配置 package.json</span> <span class="token property">"commitlint"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>   <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token punctuation">[</span>     <span class="token string">"@commitlint/config-conventional"</span>   <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token comment">// 或者在项目根目录下创建配置文件： .commitlintrc.js</span>module.exports = <span class="token punctuation">&#123;</span>   extends<span class="token operator">:</span> <span class="token punctuation">[</span>'@commitlint/config-conventional'<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>安装Husky  npm i husky -D </li><li>配置 package.json<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"husky"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>   <span class="token property">"hooks"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>     <span class="token property">"commit-msg"</span><span class="token operator">:</span> <span class="token string">"commitlint -e $HUSKY_GIT_PARAMS"</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 或者在项目根目录下创建配置文件：.huskyrc</span><span class="token punctuation">&#123;</span>   <span class="token property">"hooks"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>     <span class="token property">"commit-msg"</span><span class="token operator">:</span> <span class="token string">"commitlint -e $HUSKY_GIT_PARAMS"</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>npx husky install </li><li>npx husky add .husky/commit-msg ‘npx –no-install commitlint –edit “$1”‘</li></ol><h1 id="git分支相关报错"><a href="#git分支相关报错" class="headerlink" title="git分支相关报错"></a>git分支相关报错</h1><ol><li>指定pull命令的更新方式<pre class="line-numbers language-none"><code class="language-none">git config pull.rebase false # 默认策略git config pull.rebase true   git config pull.ff only  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;git-commit-代码提交规范&quot;&gt;&lt;a href=&quot;#git-commit-代码提交规范&quot; class=&quot;headerlink&quot; title=&quot;git commit 代码提交规范&quot;&gt;&lt;/a&gt;git commit 代码提交规范&lt;/h1&gt;&lt;pre class=&quot;l</summary>
      
    
    
    
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>ts学习</title>
    <link href="http://example.com/2021/12/29/TS%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/12/29/TS%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-12-28T16:00:00.000Z</published>
    <updated>2022-01-21T05:28:32.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h1><ol><li>布尔值<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> isDone<span class="token operator">:</span>boolean <span class="token operator">=</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>数字<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> decLiteral<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">let</span> hexLiteral<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0xf00d</span><span class="token punctuation">;</span><span class="token keyword">let</span> binaryLiteral<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0b1010</span><span class="token punctuation">;</span><span class="token keyword">let</span> octalLiteral<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0o744</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>字符串<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> name<span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">"bob"</span><span class="token punctuation">;</span>name <span class="token operator">=</span> <span class="token string">"smith"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>数组<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> list<span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 泛型</span><span class="token keyword">let</span> list<span class="token operator">:</span> Array<span class="token operator">&lt;</span>number<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>元组 Tuple<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> x<span class="token operator">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span> number<span class="token punctuation">]</span><span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>枚举<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">enum</span> Color <span class="token punctuation">&#123;</span>Red<span class="token punctuation">,</span> Green<span class="token punctuation">,</span> Blue<span class="token punctuation">&#125;</span><span class="token keyword">let</span> c<span class="token operator">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>Any  （随便什么类型都可以）<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> notSure<span class="token operator">:</span> any <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>notSure <span class="token operator">=</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>Void  没有任何类型<br>只能为它赋予undefined和null<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">warnUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"This is my warning message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> unusable<span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>TypeScript里，undefined和null两者各自有自己的类型分别叫做undefined和null。 和 void相似，它们的本身的类型用处不是很大：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> u<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token keyword">let</span> n<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>默认情况下null和undefined是所有类型的子类型。 就是说你可以把 null和undefined赋值给number类型的变量。</li></ol><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>关键字 interface<br>? 是可选<br>readonly 是只读</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">SquareConfig</span> <span class="token punctuation">&#123;</span>  color<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">;</span>  width<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">;</span>  readonly name<span class="token operator">:</span> string <span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">createSquare</span><span class="token punctuation">(</span><span class="token parameter">config<span class="token operator">:</span> SquareConfig</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>color<span class="token operator">:</span> string<span class="token punctuation">;</span> area<span class="token operator">:</span> number<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> newSquare <span class="token operator">=</span> <span class="token punctuation">&#123;</span>color<span class="token operator">:</span> <span class="token string">"white"</span><span class="token punctuation">,</span> area<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>color<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    newSquare<span class="token punctuation">.</span>color <span class="token operator">=</span> config<span class="token punctuation">.</span>color<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>width<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    newSquare<span class="token punctuation">.</span>area <span class="token operator">=</span> config<span class="token punctuation">.</span>width <span class="token operator">*</span> config<span class="token punctuation">.</span>width<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> newSquare<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> mySquare <span class="token operator">=</span> <span class="token function">createSquare</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>color<span class="token operator">:</span> <span class="token string">"black"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以通过赋值一个对象字面量来构造一个Point。 赋值后， x和y再也不能被改变了。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> p1<span class="token operator">:</span> Point <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// error!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>函数类型</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">SearchFunc</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">(</span>source<span class="token operator">:</span> string<span class="token punctuation">,</span> subString<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> mySearch<span class="token operator">:</span> SearchFunc<span class="token punctuation">;</span><span class="token function-variable function">mySearch</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">source<span class="token operator">:</span> string<span class="token punctuation">,</span> subString<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>subString<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 对于函数类型的类型检查来说，函数的参数名不需要与接口里定义的名字相匹配</span><span class="token keyword">let</span> mySearch<span class="token operator">:</span> SearchFunc<span class="token punctuation">;</span><span class="token function-variable function">mySearch</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">src<span class="token punctuation">,</span> sub</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可索引的类型</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">StringArray</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span>index<span class="token operator">:</span> number<span class="token punctuation">]</span><span class="token operator">:</span> string<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> myArray<span class="token operator">:</span> StringArray<span class="token punctuation">;</span>myArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token string">"Fred"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> myStr<span class="token operator">:</span> string <span class="token operator">=</span> myArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类类型</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">ClockInterface</span> <span class="token punctuation">&#123;</span>    currentTime<span class="token operator">:</span> Date<span class="token punctuation">;</span>    <span class="token function">setTime</span><span class="token punctuation">(</span>d<span class="token operator">:</span> Date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">implements</span> <span class="token class-name">ClockInterface</span> <span class="token punctuation">&#123;</span>    currentTime<span class="token operator">:</span> Date<span class="token punctuation">;</span>    <span class="token function">setTime</span><span class="token punctuation">(</span><span class="token parameter">d<span class="token operator">:</span> Date</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>currentTime <span class="token operator">=</span> d<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">h<span class="token operator">:</span> number<span class="token punctuation">,</span> m<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Greeter</span> <span class="token punctuation">&#123;</span>    greeting<span class="token operator">:</span> string<span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>greeting <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Hello, "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>greeting<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> greeter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Greeter</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>继承</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> string<span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">theName<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token function">move</span><span class="token punctuation">(</span><span class="token parameter">distanceInMeters<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> moved </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>distanceInMeters<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">m.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Snake</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token function">move</span><span class="token punctuation">(</span><span class="token parameter">distanceInMeters <span class="token operator">=</span> <span class="token number">5</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Slithering..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Horse</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token function">move</span><span class="token punctuation">(</span><span class="token parameter">distanceInMeters <span class="token operator">=</span> <span class="token number">45</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Galloping..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> sam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Snake</span><span class="token punctuation">(</span><span class="token string">"Sammy the Python"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> tom<span class="token operator">:</span> Animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Horse</span><span class="token punctuation">(</span><span class="token string">"Tommy the Palomino"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sam<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tom<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>派生类包含了一个构造函数，它 必须调用 super()，它会执行基类的构造函数。 而且，在构造函数里访问 this的属性之前，我们 一定要调用 super()。 这个是TypeScript强制执行的一条重要规则。</p></blockquote></li><li><p>公共，私有与受保护的修饰符</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 在TypeScript里，成员都默认为 public。</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> name<span class="token operator">:</span> string<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">theName<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token parameter">distanceInMeters<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> moved </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>distanceInMeters<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">m.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 当成员被标记成 private时，它就不能在声明它的类的外部访问</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> name<span class="token operator">:</span> string<span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">theName<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"Cat"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// 错误: 'name' 是私有的.</span><span class="token comment">// protected修饰符与 private修饰符的行为很相似，但有一点不同， protected成员在派生类中仍然可以访问。</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> name<span class="token operator">:</span> string<span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> department<span class="token operator">:</span> string<span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token operator">:</span> string<span class="token punctuation">,</span> department<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>department <span class="token operator">=</span> department<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token function">getElevatorPitch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> and I work in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>department<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> howard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"Howard"</span><span class="token punctuation">,</span> <span class="token string">"Sales"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>howard<span class="token punctuation">.</span><span class="token function">getElevatorPitch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>howard<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h2><p>和JavaScript一样，TypeScript函数可以创建有名字的函数和匿名函数。 你可以随意选择适合应用程序的方式，不论是定义一系列API函数还是只使用一次的函数。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Named function</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Anonymous function</span><span class="token keyword">let</span> <span class="token function-variable function">myAdd</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 使用ts</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token operator">:</span> number<span class="token punctuation">,</span> y<span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token function-variable function">myAdd</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token operator">:</span> number<span class="token punctuation">,</span> y<span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以给每个参数添加类型之后再为函数本身添加返回值类型。 TypeScript能够根据返回语句自动推断出返回值类型，因此我们通常省略它。</p><h2 id="书写完整函数类型"><a href="#书写完整函数类型" class="headerlink" title="书写完整函数类型"></a>书写完整函数类型</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">myAdd</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token operator">:</span> number<span class="token punctuation">,</span> y<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function-variable function">number</span> <span class="token operator">=</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token operator">:</span> number<span class="token punctuation">,</span> y<span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 编译后</span><span class="token keyword">var</span> <span class="token function-variable function">myAdd</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>只要参数类型是匹配的，那么就认为它是有效的函数类型，而不在乎参数名是否正确。<br> 对于返回值，我们在函数和返回值类型之前使用( =&gt;)符号，使之清晰明了。 如之前提到的，返回值类型是函数类型的必要部分，如果函数没有返回任何值，你也必须指定返回值类型为 void而不能留空。</p></blockquote><h2 id="可选参数和默认参数"><a href="#可选参数和默认参数" class="headerlink" title="可选参数和默认参数"></a>可选参数和默认参数</h2><p>TypeScript里的每个函数参数都是必须的。 这不是指不能传递 null或undefined作为参数，而是说编译器检查用户是否为每个参数都传入了值。 编译器还会假设只有这些参数会被传递进函数。 简短地说，传递给一个函数的参数个数必须与函数期望的参数个数一致。<br>在TypeScript里我们可以在参数名旁使用 ?实现可选参数的功能。 比如，我们想让last name是可选的：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token parameter">firstName<span class="token operator">:</span> string<span class="token punctuation">,</span> lastName<span class="token operator">?</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastName<span class="token punctuation">)</span>        <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> firstName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当没有传递参数的时候也可以直接设置默认值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token operator">:</span> string<span class="token punctuation">,</span> lastName <span class="token operator">=</span> <span class="token string">"Smith"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h2><p>默认参数和可选参数有个共同点：它们表示某一个参数。 有时，你想同时操作多个参数，或者你并不知道会有多少参数传递进来。 在JavaScript里，你可以使用 arguments来访问所有传入的参数。<br>在TypeScript里，你可以把所有参数收集到一个变量里：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token parameter">firstName<span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token operator">...</span>restOfName<span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> restOfName<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> employeeName <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">"Joseph"</span><span class="token punctuation">,</span> <span class="token string">"Samuel"</span><span class="token punctuation">,</span> <span class="token string">"Lucas"</span><span class="token punctuation">,</span> <span class="token string">"MacKinzie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这个省略号也会在带有剩余参数的函数类型定义上使用到：</span><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token parameter">firstName<span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token operator">...</span>restOfName<span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> restOfName<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token function-variable function">buildNameFun</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">fname<span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> string <span class="token operator">=</span> buildName<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="this和箭头函数"><a href="#this和箭头函数" class="headerlink" title="this和箭头函数"></a>this和箭头函数</h2><p>JavaScript里，<strong>this的值在函数被调用的时候才会指定。</strong> 这是个既强大又灵活的特点，但是你需要花点时间弄清楚函数调用的上下文是什么。 但众所周知，这不是一件很简单的事，尤其是在返回一个函数或将函数当做参数传递的时候。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> deck <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    suits<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"hearts"</span><span class="token punctuation">,</span> <span class="token string">"spades"</span><span class="token punctuation">,</span> <span class="token string">"clubs"</span><span class="token punctuation">,</span> <span class="token string">"diamonds"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    cards<span class="token operator">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function-variable function">createCardPicker</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> pickedCard <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> pickedSuit <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>pickedCard <span class="token operator">/</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>suit<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>suits<span class="token punctuation">[</span>pickedSuit<span class="token punctuation">]</span><span class="token punctuation">,</span> card<span class="token operator">:</span> pickedCard <span class="token operator">%</span> <span class="token number">13</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> cardPicker <span class="token operator">=</span> deck<span class="token punctuation">.</span><span class="token function">createCardPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> pickedCard <span class="token operator">=</span> <span class="token function">cardPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"card: "</span> <span class="token operator">+</span> pickedCard<span class="token punctuation">.</span>card <span class="token operator">+</span> <span class="token string">" of "</span> <span class="token operator">+</span> pickedCard<span class="token punctuation">.</span>suit<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以看到createCardPicker是个函数，并且它又返回了一个函数。 如果我们尝试运行这个程序，会发现它并没有弹出对话框而是报错了。 因为 createCardPicker返回的函数里的this被设置成了window而不是deck对象。 因为我们只是独立的调用了 cardPicker()。 顶级的非方法式调用会将 this视为window。 （注意：在严格模式下， this为undefined而不是window）</p></blockquote><p>为了解决这个问题，我们可以在函数被返回时就绑好正确的this。 这样的话，无论之后怎么使用它，都会引用绑定的‘deck’对象。 我们需要改变函数表达式来使用ECMAScript 6箭头语法。 箭头函数能保存函数创建时的 this值，而不是调用时的值：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> deck <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    suits<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"hearts"</span><span class="token punctuation">,</span> <span class="token string">"spades"</span><span class="token punctuation">,</span> <span class="token string">"clubs"</span><span class="token punctuation">,</span> <span class="token string">"diamonds"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    cards<span class="token operator">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function-variable function">createCardPicker</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// NOTE: the line below is now an arrow function, allowing us to capture 'this' right here</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> pickedCard <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> pickedSuit <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>pickedCard <span class="token operator">/</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>suit<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>suits<span class="token punctuation">[</span>pickedSuit<span class="token punctuation">]</span><span class="token punctuation">,</span> card<span class="token operator">:</span> pickedCard <span class="token operator">%</span> <span class="token number">13</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> cardPicker <span class="token operator">=</span> deck<span class="token punctuation">.</span><span class="token function">createCardPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> pickedCard <span class="token operator">=</span> <span class="token function">cardPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"card: "</span> <span class="token operator">+</span> pickedCard<span class="token punctuation">.</span>card <span class="token operator">+</span> <span class="token string">" of "</span> <span class="token operator">+</span> pickedCard<span class="token punctuation">.</span>suit<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更好事情是，TypeScript会警告你犯了一个错误，如果你给编译器设置了–noImplicitThis标记。 它会指出 this.suits[pickedSuit]里的this的类型为any。</p><p>让我们往例子里添加一些接口，Card 和 Deck，让类型重用能够变得清晰简单些：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">Card</span> <span class="token punctuation">&#123;</span>    suit<span class="token operator">:</span> string<span class="token punctuation">;</span>    card<span class="token operator">:</span> number<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Deck</span> <span class="token punctuation">&#123;</span>    suits<span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    cards<span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">createCardPicker</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> Deck<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Card<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> deck<span class="token operator">:</span> Deck <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    suits<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"hearts"</span><span class="token punctuation">,</span> <span class="token string">"spades"</span><span class="token punctuation">,</span> <span class="token string">"clubs"</span><span class="token punctuation">,</span> <span class="token string">"diamonds"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    cards<span class="token operator">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">// NOTE: The function now explicitly specifies that its callee must be of type Deck</span>    <span class="token function-variable function">createCardPicker</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">this</span><span class="token operator">:</span> Deck</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> pickedCard <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> pickedSuit <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>pickedCard <span class="token operator">/</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>suit<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>suits<span class="token punctuation">[</span>pickedSuit<span class="token punctuation">]</span><span class="token punctuation">,</span> card<span class="token operator">:</span> pickedCard <span class="token operator">%</span> <span class="token number">13</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> cardPicker <span class="token operator">=</span> deck<span class="token punctuation">.</span><span class="token function">createCardPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> pickedCard <span class="token operator">=</span> <span class="token function">cardPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"card: "</span> <span class="token operator">+</span> pickedCard<span class="token punctuation">.</span>card <span class="token operator">+</span> <span class="token string">" of "</span> <span class="token operator">+</span> pickedCard<span class="token punctuation">.</span>suit<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>剩下的有点看不懂了   后面实际项目中使用到了再补充。。。</p><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>我们需要一种方法使返回值的类型与传入参数的类型是相同的。 这里，我们使用了 类型变量，它是一种特殊的变量，只用于表示类型而不是值。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> identity<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们给identity添加了类型变量T。 T帮助我们捕获用户传入的类型（比如：number），之后我们就可以使用这个类型。 之后我们再次使用了 T当做返回值类型。现在我们可以知道参数类型与返回值类型是相同的了。 这允许我们跟踪函数里使用的类型的信息。</p><p>也就是说用户传的参数是类型的  T  就表示什么类型</p><p>我们把这个版本的identity函数叫做泛型，因为它可以适用于多个类型。 不同于使用 any，它不会丢失信息，像第一个例子那像保持准确性，传入数值类型并返回数值类型。</p><p>我们定义了泛型函数后，可以用两种方法使用。 第一种是，传入所有的参数，包含类型参数：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> output <span class="token operator">=</span> identity<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"myString"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// type of output will be 'string'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二种方法更普遍。利用了类型推论 – 即编译器会根据传入的参数自动地帮助我们确定T的类型：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> output <span class="token operator">=</span> <span class="token function">identity</span><span class="token punctuation">(</span><span class="token string">"myString"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// type of output will be 'string'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意我们没必要使用尖括号（&lt;&gt;）来明确地传入类型；编译器可以查看myString的值，然后把T设置为它的类型。 类型推论帮助我们保持代码精简和高可读性。如果编译器不能够自动地推断出类型的话，只能像上面那样明确的传入T的类型，在一些复杂的情况下，这是可能出现的。</p><p>如果我们想同时打印出arg的长度。 我们很可能会这样做：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> loggingIdentity<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 因为传入的参数是任意类型的  如果是数字则没有.length 所以会报错  Error: T doesn't have .length</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在假设我们想操作T类型的数组而不直接是T。由于我们操作的是数组，所以.length属性是应该存在的。 我们可以像创建其它数组一样创建这个数组：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> loggingIdentity<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Array has a .length, so no more error   这样我们操作的是一个T类型的数组  所以不会报错</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> loggingIdentity<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="泛型类型"><a href="#泛型类型" class="headerlink" title="泛型类型"></a>泛型类型</h2><p>泛型函数的类型与非泛型函数的类型没什么不同，只是有一个类型参数在最前面，像函数声明一样：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> identity<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> myIdentity<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token parameter">arg<span class="token operator">:</span> <span class="token constant">T</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span> <span class="token operator">=</span> identity<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们还可以使用带有调用签名的对象字面量来定义泛型函数：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> identity<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> myIdentity<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> identity<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这引导我们去写第一个泛型接口了。</p><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><p>我们把上面例子里的对象字面量拿出来做为一个接口：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">GenericIdentityFn</span> <span class="token punctuation">&#123;</span>    <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> identity<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> myIdentity<span class="token operator">:</span> GenericIdentityFn <span class="token operator">=</span> identity<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个相似的例子，我们可能想把泛型参数当作整个接口的一个参数。 这样我们就能清楚的知道使用的具体是哪个泛型类型（比如： Dictionary<string>而不只是Dictionary）。 这样接口里的其它成员也能知道这个参数的类型了。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">GenericIdentityFn</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> identity<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> myIdentity<span class="token operator">:</span> GenericIdentityFn<span class="token operator">&lt;</span>number<span class="token operator">></span> <span class="token operator">=</span> identity<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，我们的示例做了少许改动。 不再描述泛型函数，而是把非泛型函数签名作为泛型类型一部分。 当我们使用 GenericIdentityFn的时候，还得传入一个类型参数来指定泛型类型（这里是：number），锁定了之后代码里使用的类型。 对于描述哪部分类型属于泛型部分来说，理解何时把参数放在调用签名里和何时放在接口上是很有帮助的。</p><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><p>泛型类看上去与泛型接口差不多。 泛型类使用（ &lt;&gt;）括起泛型类型，跟在类名后面。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">GenericNumber</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    zeroValue<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>    <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token constant">T</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> myGenericNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericNumber</span><span class="token operator">&lt;</span>number<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myGenericNumber<span class="token punctuation">.</span>zeroValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>myGenericNumber<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// GenericNumber类的使用是十分直观的，没有什么去限制它只能使用number类型。 也可以使用字符串或其它更复杂的类型。</span><span class="token keyword">let</span> stringNumeric <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericNumber</span><span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringNumeric<span class="token punctuation">.</span>zeroValue <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>stringNumeric<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringNumeric<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stringNumeric<span class="token punctuation">.</span>zeroValue<span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与接口一样，直接把泛型类型放在类后面，可以帮助我们确认类的所有属性都在使用相同的类型。</p><p>我们在类那节说过，类有两部分：静态部分和实例部分。 泛型类指的是实例部分的类型，所以类的静态属性不能使用这个泛型类型。</p><h2 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h2><p>定义一个接口来描述约束条件。 创建一个包含 .length属性的接口，使用这个接口和extends关键字来实现约束：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">Lengthwise</span> <span class="token punctuation">&#123;</span>    length<span class="token operator">:</span> number<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> loggingIdentity<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Lengthwise</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 现在我们知道它有一个。属性，因此不再有错误</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在这个泛型函数被定义了约束，因此它不再是适用于任意类型：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">loggingIdentity</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Error, number doesn't have a .length property</span><span class="token function">loggingIdentity</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>length<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 我们需要传入符合约束类型的值，必须包含必须的属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="在泛型约束中使用类型参数"><a href="#在泛型约束中使用类型参数" class="headerlink" title="在泛型约束中使用类型参数"></a>在泛型约束中使用类型参数</h3><p>你可以声明一个类型参数，且它被另一个类型参数所约束。 比如，现在我们想要用属性名从对象里获取这个属性。 并且我们想要确保这个属性存在于对象 obj上，因此我们需要在这两个类型之间使用约束。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token constant">K</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> d<span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">getProperty</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// okay</span><span class="token function">getProperty</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">"m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error: Argument of type 'm' isn't assignable to 'a' | 'b' | 'c' | 'd'. 错误：“m”类型的参数不能赋值给“a”|“b”|“c”|“d”。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础类型&quot;&gt;&lt;a href=&quot;#基础类型&quot; class=&quot;headerlink&quot; title=&quot;基础类型&quot;&gt;&lt;/a&gt;基础类型&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;布尔值&lt;pre class=&quot;line-numbers language-js&quot; data-language=&quot;</summary>
      
    
    
    
    
    <category term="ts" scheme="http://example.com/tags/ts/"/>
    
  </entry>
  
  <entry>
    <title>react学习</title>
    <link href="http://example.com/2021/12/20/react%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/12/20/react%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-12-19T16:00:00.000Z</published>
    <updated>2022-01-05T01:35:34.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="挂在方式"><a href="#挂在方式" class="headerlink" title="挂在方式"></a>挂在方式</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  element<span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过ReactDOM.render() 挂载， 第一个参数是组件，第二个参数是挂载的根节点，需要通过原生js获取，通常只会挂载一次</p><h1 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h1><h2 id="函数试组件"><a href="#函数试组件" class="headerlink" title="函数试组件"></a>函数试组件</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token keyword">function</span> <span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>函数式组件没有this,可以接收一个props</p><p>如果函数组件想使用state,得使用hook {useState}</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// count定义的变量，setCount改变变量的方法，useState(0)设置变量初始值为0</span>  <span class="token comment">// 相当于 componentDidMount 和 componentDidUpdate:</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 使用浏览器的 API 更新页面标题</span>    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">You clicked </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>count<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> times</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span>You clicked <span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span> times<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>        Click me      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> PropsType <span class="token keyword">from</span> <span class="token string">"prop-types"</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Welcome</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// constructor(props)&#123;</span>  <span class="token comment">//   super(props)</span>  <span class="token comment">//   this.state = &#123;</span>  <span class="token comment">//     age: 18</span>  <span class="token comment">//   &#125;</span>  <span class="token comment">//   this.onChang = this.onChang.bind(this)</span>  <span class="token comment">// &#125;</span>  <span class="token keyword">static</span> propTypes <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">PropsTypes</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 数据类型为字符串并且必须填</span>    name<span class="token operator">:</span> PropsType<span class="token punctuation">.</span>string<span class="token punctuation">.</span>isRequired    <span class="token comment">// 为函数类型</span>    fun<span class="token operator">:</span> PropsType<span class="token punctuation">.</span>func  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">static</span> defaultProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span><span class="token string">'lisi'</span>  <span class="token punctuation">&#125;</span>  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    age<span class="token operator">:</span> <span class="token number">18</span>  <span class="token punctuation">&#125;</span>  <span class="token function-variable function">onChang</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      age<span class="token operator">:</span> age <span class="token operator">+</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'点击事件'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1 onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>onChang<span class="token punctuation">&#125;</span><span class="token operator">></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>age<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>类组件中的state与事件定义的方式有两种<br>一种是在constructor里面定义，需要通过bind将事件的this改变为类的this,这种定义方式每次写一个事件就需要重新绑定一次,会比较麻烦，但是比较容易理解<br><strong>否则事件获取不到this,因为 1、类会自己开启严格模式  2、babel也会开启严格模式</strong><br>二种是在定义事件的时候使用赋值的方式，我们直接赋值一个箭头函数 给这个事件（因为箭头函数没有自己的this，它会将外层的this作为自己的this)</p></li><li><p>设置组件的接收的参数需要引入propTypes, 设置属性需要使用静态属性<strong>要不在类的外面设置，要是在类里面设置需要加static</strong></p></li><li><p>改变state里面的数据需要使用this.setState() 方法</p></li><li><p>子组件给父组件传递参数，父组件给子组件传递一个方法，然后子组件在方法里面传入参数，父组件可以把参数存进state</p></li><li><p>ref</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Com</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>   <span class="token function-variable function">changInput</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>     <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>input<span class="token punctuation">,</span>input2<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>refs     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span>input2<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span>   input2 <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span>       <span class="token operator">&lt;</span><span class="token operator">></span>         <span class="token operator">&lt;</span>input ref<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token parameter">c</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>input <span class="token operator">=</span> c<span class="token punctuation">&#125;</span> type<span class="token operator">=</span><span class="token string">"text"</span> <span class="token operator">/</span><span class="token operator">></span>         <span class="token operator">&lt;</span>input ref<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>input2<span class="token punctuation">&#125;</span> type<span class="token operator">=</span><span class="token string">"text"</span> <span class="token operator">/</span><span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>     <span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;挂在方式&quot;&gt;&lt;a href=&quot;#挂在方式&quot; class=&quot;headerlink&quot; title=&quot;挂在方式&quot;&gt;&lt;/a&gt;挂在方式&lt;/h1&gt;&lt;pre class=&quot;line-numbers language-js&quot; data-language=&quot;js&quot;&gt;&lt;code cl</summary>
      
    
    
    
    
    <category term="react" scheme="http://example.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>前端自检清单</title>
    <link href="http://example.com/2021/11/25/%E5%89%8D%E7%AB%AF%E8%87%AA%E6%A3%80%E6%B8%85%E5%8D%95/"/>
    <id>http://example.com/2021/11/25/%E5%89%8D%E7%AB%AF%E8%87%AA%E6%A3%80%E6%B8%85%E5%8D%95/</id>
    <published>2021-11-24T16:00:00.000Z</published>
    <updated>2021-12-02T03:17:26.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h1><h2 id="变量和类型"><a href="#变量和类型" class="headerlink" title="变量和类型"></a>变量和类型</h2><ul><li><p>JavaScript规定了几种语言类型<br><b>数据类型篇有讲到<a href="/2021/07/17/js-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/" title="js数据类型">js数据类型</a> </b><br>JavaScript目前有八种内置类型：<br>Number，String，Boolean，Null，Undefined，Object，Symbol，BigInt</p><blockquote><p>其中 Symbol是es6新加入的</p></blockquote><p>BigInt 是一种内置对象，它提供了一种方法来表示大于 2^53 - 1 的整数。这原本是 Javascript中可以用 Number 表示的最大数字。BigInt 可以表示任意大的整数。<br>可以用在一个整数字面量后面加 n 的方式定义一个 BigInt ，如：10n，或者调用函数BigInt()。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> theBiggestInt <span class="token operator">=</span> <span class="token number">9007199254740991n</span><span class="token punctuation">;</span><span class="token keyword">const</span> alsoHuge <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">9007199254740991</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ↪ 9007199254740991n</span><span class="token keyword">const</span> hugeString <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token string">"9007199254740991"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ↪ 9007199254740991n</span><span class="token keyword">const</span> hugeHex <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token string">"0x1fffffffffffff"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ↪ 9007199254740991n</span><span class="token keyword">const</span> hugeBin <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token string">"0b11111111111111111111111111111111111111111111111111111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ↪ 9007199254740991n</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>JavaScript对象的底层数据结构是什么</p><a href="/2021/11/25/%E5%BA%95%E5%B1%82%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F/" title="底层存储方式">底层存储方式</a><p><strong>JavaScript使用的是 堆(Heap) 和 栈( Stack)</strong></p><ol><li><p>JavaScript基本类型数据都是直接按值存储在栈中的(Undefined、Null、不是new出来的布尔、数字和字符串)，每种类型的数据占用的内存空间的大小是确定的，并由系统自动分配和自动释放。这样带来的好处就是，内存可以及时得到回收，相对于堆来说 ，更加容易管理内存空间。</p></li><li><p>JavaScript引用类型数据被存储于堆中 (如对象、数组、函数等，它们是通过拷贝和new出来的）。其实，说存储于堆中，也不太准确，因为，引用类型的数据的地址指针是存储于栈中的，当我们想要访问引用类型的值的时候，需要先从栈中获得对象的地址指针，然后，在通过地址指针找到堆中的所需要的数据。</p></li></ol></li><li><p>Symbol类型在实际开发中的应用、可手动实现一个简单的Symbol</p><ul><li> Symbol是一种基本类型，由Symbol函数生成<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>a <span class="token operator">===</span> b <span class="token comment">// false </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>不能new，会报错，返回一个值，不是对象</li><li>Symbol 函数可以接受一个字符串作为参数</li><li>Symbol 值可以作为标识符，用于对象的属性名，可以保证不会出现同名的属性。<pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>JavaScript中的变量在内存中的具体存储形式</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'1'</span> <span class="token comment">// a存在栈内存中，‘1’也是在栈内存中</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span>b<span class="token operator">:</span><span class="token string">'1'</span><span class="token punctuation">&#125;</span> <span class="token comment">// b 存在栈内存中，&#123;b:'1'&#125;存在堆内存中，在栈内b的值是&#123;b:'1'&#125;的地址</span><span class="token keyword">let</span> c <span class="token operator">=</span> b <span class="token comment">// 其实是&#123;b:'1'&#125;存在堆内存中地址赋值给了c,也就是说在堆内存中他们是一个同一个&#123;b:'1'&#125;</span><span class="token keyword">let</span> d <span class="token operator">=</span> a <span class="token comment">// 会直接在栈内存中重新创建一个‘1’给d,因为a的值是基本数据类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>栈内存</th><th>堆内存</th></tr></thead><tbody><tr><td>存储基础数据类型</td><td>存储引用数据类型</td></tr><tr><td>按值访问</td><td>按引用访问</td></tr><tr><td>储存的值大小固定</td><td>储存的值大小不固定，可以动态调整</td></tr><tr><td>由系统自动分配内存空间</td><td>由代码进行指定分配</td></tr><tr><td>空间小运用效率高</td><td>空间大运用效率较低</td></tr><tr><td>先进后出，后进先出</td><td>无序储存，根据引用地址直接获取</td></tr></tbody></table></li><li><p>基本类型对应的内置对象，以及他们之间的装箱拆箱操作</p><ul><li>内置对象<br>Object是 JavaScript 中所有对象的父对象 数据封装类对象：Object、Array、Boolean、Number 和 String 其他对象：Function、Math、Date、RegExp、Error。<br>特殊的基本包装类型(String、Number、Boolean)<br>arguments: 只存在于函数内部的一个类数组对象</li><li>装箱和拆箱<ol><li>装箱：<br>把基本数据类型转化为对应的引用数据类型的操作**，装箱分为隐式装箱和显示装箱</li></ol><ul><li>隐式装箱：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment">// 0</span><span class="token comment">// 上面的代码实现步骤为</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>在上面的代码中，a是基本类型，它不是对象，不应该具有方法，js内部进行了一些列处理（装箱)， 使得它能够调用方法。在这个基本类型上调用方法，其实是在这个基本类型对象上调用方法。这个基本类型的对象是临时的，它只存在于方法调用那一行代码执行的瞬间，执行方法后立刻被销毁。实现机制：<br>创建String类型的一个实例；<br>在实例上调用指定的方法；<br>销毁这个实例；</li><li>显示装箱<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ol start="2"><li>拆箱：<br>拆箱和装箱相反，就是把引用类型转化为基本类型的数据，通常通过引用类型的valueof()和toString（）方法实现<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token keyword">typeof</span> name  <span class="token comment">// object</span>name<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 'name'</span>name<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 'name'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul></li><li><p>强制类型转换</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token comment">//100</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token string">'10'</span> <span class="token comment">//10010</span><span class="token comment">// == 运算符</span><span class="token number">100</span> <span class="token operator">==</span> <span class="token string">'100'</span> <span class="token comment">//true</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token string">''</span> <span class="token comment">//true</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span> <span class="token comment">//true</span><span class="token comment">//  语句</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 把数字转换为true</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 把空字符串转换为false</span><span class="token comment">// 逻辑运算</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">&amp;&amp;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 把10转换成true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">''</span> <span class="token operator">||</span> <span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'abc' 把空字符串转换为false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span>abc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// window.abc是undefined 把非undefined转换成true</span><span class="token comment">//判断一个变量会被当做true还是false</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>null和undefined的区别</p><blockquote><p>1995年JavaScript诞生时，最初像Java一样，只设置了null作为表示”无”的值。但是，JavaScript的设计者Brendan Eich，觉得这样做还不够，有两个原因。<br>首先，null像在Java里一样，被当成一个对象。但是，JavaScript的数据类型分成原始类型（primitive）和合成类型（complex）两大类，Brendan Eich觉得表示”无”的值最好不是对象。<br>其次，JavaScript的最初版本没有包括错误处理机制，发生数据类型不匹配时，往往是自动转换类型或者默默地失败。Brendan Eich觉得，如果null自动转为0，很不容易发现错误。<br>因此，Brendan Eich又设计了一个undefined。</p></blockquote><ul><li>相同点<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">undefined</span> <span class="token punctuation">)</span> <span class="token comment">// 在if判断中都会自动转化为 fasle</span><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token comment">// 相等运算符甚至直接报告两者相等</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>不同点<br>null表示”没有对象”，即该处不应该有值。<br>  （1） 作为函数的参数，表示该函数的参数不是对象。<br>  （2） 作为对象原型链的终点。<br>undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义<br>  （1）变量被声明了，但没有赋值时，就等于undefined。<br>  （2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。<br>  （3）对象没有赋值的属性，该属性的值为undefined。<br>  （4）函数没有返回值时，默认返回undefined。</li></ul></li><li><p>至少可以说出三种判断JavaScript数据类型的方式，以及他们的优缺点，如何准确的判断数组类型</p><ol><li>typeof 判断数据类型   但是引用数据类型无法具体判断 null无法直接判断 new操作符返回的都是object  函数返回的都是function</li><li>instanceof运算符用于检测实例对象（参数）的原型链上是否出现构造函数的prototype<br>语法：object instanceof constructor<br>参数：object 某个实例对象 constructor 某个构造函数<br>描述：instanceof运算符用来检测constructor.propertype 是否存在于参数object的原型链上。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 定义构造函数</span><span class="token keyword">function</span> <span class="token constant">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token constant">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">C</span><span class="token punctuation">)</span> <span class="token comment">//true,因为Object.getPrototypeOf(0) === C.prototype</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">D</span><span class="token punctuation">)</span> <span class="token comment">//false，D.prototype不在o的原型链上</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token comment">//true 同上</span><span class="token class-name">C</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o2 <span class="token keyword">instanceof</span> <span class="token class-name">C</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">C</span><span class="token punctuation">)</span> <span class="token comment">// false C.prototype指向了一个空对象，这个空对象不在o的原型链上</span><span class="token class-name">D</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 继承</span><span class="token keyword">var</span> o3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o3 <span class="token keyword">instanceof</span> <span class="token class-name">D</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o3 <span class="token keyword">instanceof</span> <span class="token class-name">C</span><span class="token punctuation">)</span> <span class="token comment">// true C.prototype现在在o3的原型链上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>instanceof运算符的左边必须是一个对象，像”string” instanceof String，true instanceof Boolean这样的字面量都会返回false。也就是说虽然能判断出对象的原型链上是否有构造函数的原型，但是只能判断出对象类型变量，字面量是判断不出的。</p></blockquote></li><li>Object.prototype.toString()<br>每个对象都有一个toString()方法，该对象被表示为一个文本字符串时，或一个对象以预期的字符串方式引用时自动调用。默认情况下，toString()方法被每个Object对象继承，如果此方法在自定义对象中未被覆盖，toString()返回“[object type]”，其中type是对象的类型<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// null undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//[object Null] 很给力</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//[object Undefined] 很给力</span><span class="token comment">// Number</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//[object Number]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//[object Number]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//[object Number]，NaN一般是数字运算得到的结果，返回Number还算可以接受</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//[object Number]</span><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">100</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//[object Number]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Number]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//[object Number] 很给力</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//[object Number] 很给力</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//[object String]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object String]</span><span class="token comment">// Boolean</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Boolean]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//[object Boolean]</span><span class="token comment">// Array</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Array]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Array]</span><span class="token comment">// Object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Object]</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Object]</span><span class="token comment">// Function</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>floor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//[object Function]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//[object Function]</span><span class="token comment">// Symbol</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'222'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//[object Symbol]</span><span class="token comment">// RegExp</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">sss</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//[object RegExp]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>上面的结果，除了NaN返回Number稍微有点差池之外其他的都返回了意料之中的结果，都能满足实际开发的需求，于是我们可以写一个通用的函数来检测变量，字面量的类型。如下<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> Type <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> type <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> typeArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'String'</span><span class="token punctuation">,</span> <span class="token string">'Object'</span><span class="token punctuation">,</span> <span class="token string">'Number'</span><span class="token punctuation">,</span> <span class="token string">'Array'</span><span class="token punctuation">,</span> <span class="token string">'Undefined'</span><span class="token punctuation">,</span> <span class="token string">'Function'</span><span class="token punctuation">,</span> <span class="token string">'Null'</span><span class="token punctuation">,</span> <span class="token string">'Symbol'</span><span class="token punctuation">,</span> <span class="token string">'Boolean'</span><span class="token punctuation">,</span> <span class="token string">'RegExp'</span><span class="token punctuation">,</span> <span class="token string">'BigInt'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> typeArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            type<span class="token punctuation">[</span><span class="token string">'is'</span> <span class="token operator">+</span> name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object '</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">']'</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>typeArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> type<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token boolean">true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Type<span class="token punctuation">.</span><span class="token function">isBoolean</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Type<span class="token punctuation">.</span><span class="token function">isRegExp</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">22</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>JSON.stringify() 转成json也能根据开头结尾来判断</li></ol></li><li><p>可能发生隐式类型转换的场景以及转换原则，应如何避免或巧妙应用</p><ol><li>转换为字符串<br>使用toString() 需要注意的是数组会直接变成字符串 [1,2,3,4] =&gt; ‘1,2,3,4’</li><li>转换为数字<br>ECMAScript 提供了两种把非数字的原始值转换成数字的方法，即 parseInt() 和 parseFloat() 。 只有对 String 类型调用这些方法，它们才能正确运行；对其他类型返回的都是 NaN。</li><li>转换为 Boolean<br>undefined null ‘’ NaN 0 会转化成fasle<br>其他的是true</li><li>强制类型转换<br>Boolean(value) - 把给定的值转换成 Boolean 型；<br>Number(value) - 把给定的值转换成数字（可以是整数或浮点数）； 如果转化不了就是NaN<br>String(value) - 把给定的值转换成字符串</li><li>Boolean() 函数</li><li>Number() 函数</li><li>隐式类型转换</li><li>自动转换 Boolean</li><li>运算符</li><li>对象</li></ol></li><li><p>出现小数精度丢失的原因，JavaScript可以存储的最大数字、最大安全数字，JavaScript处理大数字的方法、避免精度丢失的方法<br>1、JS 数字精度丢失的一些典型问题（前端遇小数计算概率大，要有这个精度丢失的意识）<br>2、JS 数字精度丢失的原因（计算机用二进制存储数据，由于存储位置的限制有时会存在“舍去”。当模仿十进制进行四舍五入时，0舍1入，造成误差）<br>3、解决方案（一个对象+一个函数）（解决方案：把小数乘以倍数变成整数计算，再除以倍数变成原来的数。其中根据此思想封装了一个方法）<br>4、 BigInt  <strong>BigInt目前是第3阶段提案， 一旦添加到规范中，它就是JS 第二个数字数据类型，也将是 JS 第8种基本数据类型</strong></p></li></ul><h2 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h2><ul><li>理解原型设计模式以及JavaScript中的原型规则</li><li>instanceof的底层实现原理，手动实现一个instanceof</li><li>实现继承的几种方式以及他们的优缺点</li><li>至少说出一种开源项目(如Node)中应用原型继承的案例</li><li>可以描述new一个对象的详细过程，手动实现一个new操作符</li><li>理解es6 class构造以及继承的底层实现原理</li></ul><h2 id="作用域和闭包"><a href="#作用域和闭包" class="headerlink" title="作用域和闭包"></a>作用域和闭包</h2><ul><li>理解词法作用域和动态作用域</li><li>理解JavaScript的作用域和作用域链</li><li>理解JavaScript的执行上下文栈，可以应用堆栈信息快速定位问题</li><li>this的原理以及几种不同使用场景的取值</li><li>闭包的实现原理和作用，可以列举几个开发中闭包的实际应用</li><li>理解堆栈溢出和内存泄漏的原理，如何防止</li><li>如何处理循环的异步操作</li><li>理解模块化解决的实际问题，可列举几个模块化方案并理解其中原理</li></ul><h2 id="执行机制"><a href="#执行机制" class="headerlink" title="执行机制"></a>执行机制</h2><ul><li>为何try里面放return，finally还会执行，理解其内部机制</li><li>JavaScript如何实现异步编程，可以详细描述EventLoop机制</li><li>宏任务和微任务分别有哪些</li><li>可以快速分析一个复杂的异步嵌套逻辑，并掌握分析方法</li><li>使用Promise实现串行</li><li>Node与浏览器EventLoop的差异</li><li>如何在保证页面运行流畅的情况下处理海量数据</li></ul><h2 id="语法和API"><a href="#语法和API" class="headerlink" title="语法和API"></a>语法和API</h2><ul><li>理解ECMAScript和JavaScript的关系</li><li>熟练运用es5、es6提供的语法规范，</li><li>熟练掌握JavaScript提供的全局对象（例如Date、Math）、全局函数（例如decodeURI、isNaN）、全局属性（例如Infinity、undefined）</li><li>熟练应用map、reduce、filter 等高阶函数解决问题</li><li>setInterval需要注意的点，使用settimeout实现setInterval</li><li>JavaScript提供的正则表达式API、可以使用正则表达式（邮箱校验、URL解析、去重等）解决常见问题</li><li>JavaScript异常处理的方式，统一的异常处理方案</li></ul><h1 id="HTML和CSS"><a href="#HTML和CSS" class="headerlink" title="HTML和CSS"></a>HTML和CSS</h1><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><ul><li>从规范的角度理解HTML，从分类和语义的角度使用标签</li><li>常用页面标签的默认样式、自带属性、不同浏览器的差异、处理浏览器兼容问题的方式</li><li>元信息类标签(head、title、meta)的使用目的和配置方法</li><li>HTML5离线缓存原理</li><li>可以使用Canvas API、SVG等绘制高性能的动画</li></ul><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ul><li>CSS盒模型，在不同浏览器的差异</li><li>CSS所有选择器及其优先级、使用场景，哪些可以继承，如何运用at规则</li><li>CSS伪类和伪元素有哪些，它们的区别和实际应用</li><li>HTML文档流的排版规则，CSS几种定位的规则、定位参照物、对文档流的影响，如何选择最好的定位方式，雪碧图实现原理</li><li>水平垂直居中的方案、可以实现6种以上并对比它们的优缺点</li><li>BFC实现原理，可以解决的问题，如何创建BFC</li><li>可使用CSS函数复用代码，实现特殊效果</li><li>PostCSS、Sass、Less的异同，以及使用配置，至少掌握一种</li><li>CSS模块化方案、如何配置按需加载、如何防止CSS阻塞渲染</li><li>熟练使用CSS实现常见动画，如渐变、移动、旋转、缩放等等</li><li>CSS浏览器兼容性写法，了解不同API在不同浏览器下的兼容性情况</li><li>掌握一套完整的响应式布局方案</li></ul><h2 id="手写"><a href="#手写" class="headerlink" title="手写"></a>手写</h2><ul><li>手写图片瀑布流效果</li><li>使用CSS绘制几何图形（圆形、三角形、扇形、菱形等）</li><li>使用纯CSS实现曲线运动（贝塞尔曲线）</li><li>实现常用布局（三栏、圣杯、双飞翼、吸顶），可是说出多种方式并理解其优缺点</li></ul><h1 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h1><h2 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h2><ul><li>理解代码到底是什么，计算机如何将代码转换为可以运行的目标程序</li><li>正则表达式的匹配原理和性能优化</li><li>如何将JavaScript代码解析成抽象语法树(AST)</li><li>base64的编码原理</li><li>几种进制的相互转换计算方法，在JavaScript中如何表示和转换</li></ul><h2 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h2><ul><li>理解什么是协议，了解TCP/IP网络协议族的构成，每层协议在应用程序中发挥的作用</li><li>三次握手和四次挥手详细原理，为什么要使用这种机制</li><li>有哪些协议是可靠，TCP有哪些手段保证可靠交付</li><li>DNS的作用、DNS解析的详细过程，DNS优化原理</li><li>CDN的作用和原理</li><li>HTTP请求报文和响应报文的具体组成，能理解常见请求头的含义，有几种请求方式，区别是什么</li><li>HTTP所有状态码的具体含义，看到异常状态码能快速定位问题</li><li>HTTP1.1、HTTP2.0带来的改变</li><li>HTTPS的加密原理，如何开启HTTPS，如何劫持HTTPS请求</li><li>理解WebSocket协议的底层原理、与HTTP的区别</li></ul><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><ul><li>熟练使用前端常用的设计模式编写代码，如单例模式、装饰器模式、代理模式等</li><li>发布订阅模式和观察者模式的异同以及实际应用</li><li>可以说出几种设计模式在开发中的实际应用，理解框架源码中对设计模式的应用</li></ul><h1 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h1><h2 id="JavaScript编码能力"><a href="#JavaScript编码能力" class="headerlink" title="JavaScript编码能力"></a>JavaScript编码能力</h2><ul><li>多种方式实现数组去重、扁平化、对比优缺点</li><li>多种方式实现深拷贝、对比优缺点</li><li>手写函数柯里化工具函数、并理解其应用场景和优势</li><li>手写防抖和节流工具函数、并理解其内部原理和应用场景</li><li>实现一个sleep函数</li></ul><h2 id="手动实现前端轮子"><a href="#手动实现前端轮子" class="headerlink" title="手动实现前端轮子"></a>手动实现前端轮子</h2><ul><li>手动实现call、apply、bind</li><li>手动实现符合Promise/A+规范的Promise、手动实现async await</li><li>手写一个EventEmitter实现事件发布、订阅</li><li>可以说出两种实现双向绑定的方案、可以手动实现</li><li>手写JSON.stringify、JSON.parse</li><li>手写一个模版引擎，并能解释其中原理</li><li>手写懒加载、下拉刷新、上拉加载、预加载等效果</li></ul><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><ul><li>理解常见数据结构的特点，以及他们在不同场景下使用的优缺点</li><li>理解数组、字符串的存储原理，并熟练应用他们解决问题</li><li>理解二叉树、栈、队列、哈希表的基本结构和特点，并可以应用它解决问题</li><li>了解图、堆的基本结构和使用场景</li></ul><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ul><li>可计算一个算法的时间复杂度和空间复杂度，可估计业务逻辑代码的耗时和内存消耗</li><li>至少理解五种排序算法的实现原理、应用场景、优缺点，可快速说出时间、空间复杂度</li><li>了解递归和循环的优缺点、应用场景、并可在开发中熟练应用</li><li>可应用回溯算法、贪心算法、分治算法、动态规划等解决复杂问题</li><li>前端处理海量数据的算法方案</li></ul><h1 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h1><h2 id="浏览器API"><a href="#浏览器API" class="headerlink" title="浏览器API"></a>浏览器API</h2><ul><li>浏览器提供的符合W3C标准的DOM操作API、浏览器差异、兼容性</li><li>浏览器提供的浏览器对象模型 (BOM)提供的所有全局API、浏览器差异、兼容性</li><li>大量DOM操作、海量数据的性能优化(合并操作、Diff、requestAnimationFrame等)</li><li>浏览器海量数据存储、操作性能优化</li><li>DOM事件流的具体实现机制、不同浏览器的差异、事件代理</li><li>前端发起网络请求的几种方式及其底层实现、可以手写原生ajax、fetch、可以熟练使用第三方库</li><li>浏览器的同源策略，如何避免同源策略，几种方式的异同点以及如何选型</li><li>浏览器提供的几种存储机制、优缺点、开发中正确的选择</li><li>浏览器跨标签通信</li></ul><h2 id="浏览器原理"><a href="#浏览器原理" class="headerlink" title="浏览器原理"></a>浏览器原理</h2><ul><li>各浏览器使用的JavaScript引擎以及它们的异同点、如何在代码中进行区分</li><li>请求数据到请求结束与服务器进行了几次交互</li><li>可详细描述浏览器从输入URL到页面展现的详细过程</li><li>浏览器解析HTML代码的原理，以及构建DOM树的流程</li><li>浏览器如何解析CSS规则，并将其应用到DOM树上</li><li>浏览器如何将解析好的带有样式的DOM树进行绘制</li><li>浏览器的运行机制，如何配置资源异步同步加载</li><li>浏览器回流与重绘的底层原理，引发原因，如何有效避免</li><li>浏览器的垃圾回收机制，如何避免内存泄漏</li><li>浏览器采用的缓存方案，如何选择和控制合适的缓存方案</li></ul><h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><ul><li>理解Node在应用程序中的作用，可以使用Node搭建前端运行环境、使用Node操作文件、操作数据库等等</li><li>掌握一种Node开发框架，如Express，Express和Koa的区别</li><li>熟练使用Node提供的API如Path、Http、Child Process等并理解其实现原理</li><li>Node的底层运行原理、和浏览器的异同</li><li>Node事件驱动、非阻塞机制的实现原理</li></ul><h1 id="框架和类库"><a href="#框架和类库" class="headerlink" title="框架和类库"></a>框架和类库</h1><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><ul><li>理解泛型、接口等面向对象的相关概念，TypeScript对面向对象理念的实现</li><li>理解使用TypeScript的好处，掌握TypeScript基础语法</li><li>TypeScript的规则检测原理</li><li>可以在React、Vue等框架中使用TypeScript进行开发</li></ul><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><ul><li>React和vue 选型和优缺点、核心架构的区别</li><li>React中setState的执行机制，如何有效的管理状态</li><li>React的事件底层实现机制</li><li>React的虚拟DOM和Diff算法的内部实现</li><li>React的Fiber工作原理，解决了什么问题</li><li>React Router和Vue Router的底层实现原理、动态加载实现原理</li><li>可熟练应用React API、生命周期等，可应用HOC、render props、Hooks等高阶用法解决问题</li><li>基于React的特性和原理，可以手动实现一个简单的React</li></ul><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><ul><li>熟练使用Vue的API、生命周期、钩子函数</li><li>MVVM框架设计理念</li><li>Vue双向绑定实现原理、Diff算法的内部实现</li><li>Vue的事件机制</li><li>从template转换成真实DOM的实现机制</li></ul><h2 id="多端开发"><a href="#多端开发" class="headerlink" title="多端开发"></a>多端开发</h2><ul><li>单页面应用（SPA）的原理和优缺点，掌握一种快速开发SPA的方案</li><li>理解Viewport、em、rem的原理和用法，分辨率、px、ppi、dpi、dp的区别和实际应用</li><li>移动端页面适配解决方案、不同机型适配方案</li><li>掌握一种JavaScript移动客户端开发技术，如React Native：可以搭建React Native开发环境，熟练进行开发，可理解React Native的运作原理，不同端适配</li><li>掌握一种JavaScript PC客户端开发技术，如Electron：可搭建Electron开发环境，熟练进行开发，可理解Electron的运作原理</li><li>掌握一种小程序开发框架或原生小程序开发</li><li>理解多端框架的内部实现原理，至少了解一个多端框架的使用</li></ul><h2 id="数据流管理"><a href="#数据流管理" class="headerlink" title="数据流管理"></a>数据流管理</h2><ul><li>掌握React和Vue传统的跨组件通信方案，对比采用数据流管理框架的异同</li><li>熟练使用Redux管理数据流，并理解其实现原理，中间件实现原理</li><li>熟练使用Mobx管理数据流，并理解其实现原理，相比Redux有什么优势</li><li>熟练使用Vuex管理数据流，并理解其实现原理</li><li>以上数据流方案的异同和优缺点，不情况下的技术选型</li></ul><h2 id="实用库"><a href="#实用库" class="headerlink" title="实用库"></a>实用库</h2><ul><li>至少掌握一种UI组件框架，如antd design，理解其设计理念、底层实现</li><li>掌握一种图表绘制框架，如Echart，理解其设计理念、底层实现，可以自己实现图表</li><li>掌握一种GIS开发框架，如百度地图API</li><li>掌握一种可视化开发框架，如Three.js、D3</li><li>工具函数库，如lodash、underscore、moment等，理解使用的工具类或工具函数的具体实现原理</li></ul><h2 id="开发和调试"><a href="#开发和调试" class="headerlink" title="开发和调试"></a>开发和调试</h2><ul><li>熟练使用各浏览器提供的调试工具</li><li>熟练使用一种代理工具实现请求代理、抓包，如charls</li><li>可以使用Android、IOS模拟器进行调试，并掌握一种真机调试方案</li><li>了解Vue、React等框架调试工具的使用</li></ul><h1 id="前端工程"><a href="#前端工程" class="headerlink" title="前端工程"></a>前端工程</h1><h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h2><ul><li>理解npm、yarn依赖包管理的原理，两者的区别</li><li>可以使用npm运行自定义脚本</li><li>理解Babel、ESLint、webpack等工具在项目中承担的作用</li><li>ESLint规则检测原理，常用的ESLint配置</li><li>Babel的核心原理，可以自己编写一个Babel插件</li><li>可以配置一种前端代码兼容方案，如Polyfill</li><li>Webpack的编译原理、构建流程、热更新原理，chunk、bundle和module的区别和应用</li><li>可熟练配置已有的loaders和plugins解决问题，可以自己编写loaders和plugins</li></ul><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><ul><li>正向代理与反向代理的特点和实例</li><li>可手动搭建一个简单的nginx服务器、</li><li>熟练应用常用的nginx内置变量，掌握常用的匹配规则写法</li><li>可以用nginx实现请求过滤、配置gzip、负载均衡等，并能解释其内部原理</li></ul><h2 id="开发提速"><a href="#开发提速" class="headerlink" title="开发提速"></a>开发提速</h2><ul><li>熟练掌握一种接口管理、接口mock工具的使用，如yapi</li><li>掌握一种高效的日志埋点方案，可快速使用日志查询工具定位线上问题</li><li>理解TDD与BDD模式，至少会使用一种前端单元测试框架</li></ul><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><ul><li>理解Git的核心原理、工作流程、和SVN的区别</li><li>熟练使用常规的Git命令、git rebase、git stash等进阶命令</li><li>可以快速解决线上分支回滚、线上分支错误合并等复杂问题</li></ul><h2 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h2><ul><li>理解CI/CD技术的意义，至少熟练掌握一种CI/CD工具的使用，如Jenkins</li><li>可以独自完成架构设计、技术选型、环境搭建、全流程开发、部署上线等一套完整的开发流程（包括Web应用、移动客户端应用、PC客户端应用、小程序、H5等等）</li></ul><h2 id="项目和业务"><a href="#项目和业务" class="headerlink" title="项目和业务"></a>项目和业务</h2><ul><li>了解后端的开发方式，在应用程序中的作用，至少会使用一种后端语言</li><li>掌握数据最终在数据库中是如何落地存储的，能看懂表结构设计、表之间的关联，至少会使用一种数据库</li></ul><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><ul><li>了解前端性能衡量指标、性能监控要点，掌握一种前端性能监控方案</li><li>了解常见的Web、App性能优化方案</li><li>SEO排名规则、SEO优化方案、前后端分离的SEO</li><li>SSR实现方案、优缺点、及其性能优化</li><li>Webpack的性能优化方案</li><li>Canvas性能优化方案</li><li>React、Vue等框架使用性能优化方案</li></ul><h2 id="前端安全"><a href="#前端安全" class="headerlink" title="前端安全"></a>前端安全</h2><ul><li>XSS攻击的原理、分类、具体案例，前端如何防御</li><li>CSRF攻击的原理、具体案例，前端如何防御</li><li>HTTP劫持、页面劫持的原理、防御措施</li></ul><h2 id="业务相关"><a href="#业务相关" class="headerlink" title="业务相关"></a>业务相关</h2><ul><li>能理解所开发项目的整体业务形态、业务目标、业务架构，可以快速定位线上业务问题</li><li>能理解所开发项目整体的技术架构、能快读的根据新需求进行开发规划、能快速根据业务报警、线上日志等定位并解决线上技术问题</li><li>可以将自己的想法或新技术在业务中落地实践，尽量在团队中拥有一定的不可替代性</li></ul><h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><p>转载<br>作者：ConardLi<br>链接：<a href="https://juejin.cn/post/6844903830887366670">https://juejin.cn/post/6844903830887366670</a><br>来源：稀土掘金</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript基础&quot;&gt;&lt;a href=&quot;#JavaScript基础&quot; class=&quot;headerlink&quot; title=&quot;JavaScript基础&quot;&gt;&lt;/a&gt;JavaScript基础&lt;/h1&gt;&lt;h2 id=&quot;变量和类型&quot;&gt;&lt;a href=&quot;#变量和类型&quot; c</summary>
      
    
    
    
    
    <category term="前端自检清单" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E8%87%AA%E6%A3%80%E6%B8%85%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>底层存储方式</title>
    <link href="http://example.com/2021/11/25/%E5%BA%95%E5%B1%82%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2021/11/25/%E5%BA%95%E5%B1%82%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F/</id>
    <published>2021-11-24T16:00:00.000Z</published>
    <updated>2021-11-25T03:42:40.976Z</updated>
    
    <content type="html"><![CDATA[<p>语言中所有的底层存储方式是是什么？</p><ul><li><p>数组(Array)<br>数组是一种聚合数据类型，它是将具有相同类型的若干变量有序地组织在一起的集合。数组可以说是最基本的数据结构，在各种编程语言中都有对应。一个数组可以分解为多个数组元素，按照数据元素的类型，数组可以分为整型数组、字符型数组、浮点型数组、指针数组和结构数组等。数组还可以有一维、二维以及多维等表现形式。</p></li><li><p>栈( Stack)<br>栈是一种特殊的线性表，它只能在一个表的一个固定端进行数据结点的插入和删除操作。栈按照后进先出的原则来存储数据，也就是说，先插入的数据将被压入栈底，最后插入的数据在栈顶，读出数据时，从栈顶开始逐个读出。栈在汇编语言程序中，经常用于重要数据的现场保护。栈中没有数据时，称为空栈。</p></li><li><p>队列(Queue)<br>队列和栈类似，也是一种特殊的线性表。和栈不同的是，队列只允许在表的一端进行插入操作，而在另一端进行删除操作。一般来说，进行插入操作的一端称为队尾，进行删除操作的一端称为队头。队列中没有元素时，称为空队列</p></li><li><p>链表( Linked List)<br>链表是一种数据元素按照链式存储结构进行存储的数据结构，这种存储结构具有在物理上存在非连续的特点。链表由一系列数据结点构成，每个数据结点包括数据域和指针域两部分。其中，指针域保存了数据结构中下一个元素存放的地址。链表结构中数据元素的逻辑顺序是通过链表中的指针链接次序来实现的。</p></li><li><p>树( Tree)<br>树是典型的非线性结构，它是包括，2个结点的有穷集合K。在树结构中，有且仅有一个根结点，该结点没有前驱结点。在树结构中的其他结点都有且仅有一个前驱结点，而且可以有两个后继结点，m≥0</p></li><li><p>图(Graph)<br>图是另一种非线性数据结构。在图结构中，数据结点一般称为顶点，而边是顶点的有序偶对。如果两个顶点之间存在一条边，那么就表示这两个顶点具有相邻关系</p></li><li><p>堆(Heap)<br>堆是一种特殊的树形数据结构，一般讨论的堆都是二叉堆。堆的特点是根结点的值是所有结点中最小的或者最大的，并且根结点的两个子树也是一个堆结构</p></li><li><p>散列表(Hash)<br>散列表源自于散列函数(Hash function)，其思想是如果在结构中存在关键字和T相等的记录，那么必定在F(T)的存储位置可以找到该记录，这样就可以不用进行比较操作而直接取得所查记录</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;语言中所有的底层存储方式是是什么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数组(Array)&lt;br&gt;数组是一种聚合数据类型，它是将具有相同类型的若干变量有序地组织在一起的集合。数组可以说是最基本的数据结构，在各种编程语言中都有对应。一个数组可以分解为多个数组元素，按照数据元素的类</summary>
      
    
    
    
    
    <category term="底层存储方式" scheme="http://example.com/tags/%E5%BA%95%E5%B1%82%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>webpack入口起点</title>
    <link href="http://example.com/2021/09/16/webpack-%E5%85%A5%E5%8F%A3%E8%B5%B7%E7%82%B9/"/>
    <id>http://example.com/2021/09/16/webpack-%E5%85%A5%E5%8F%A3%E8%B5%B7%E7%82%B9/</id>
    <published>2021-09-15T16:00:00.000Z</published>
    <updated>2021-09-16T07:14:45.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单个入口（简写）语法"><a href="#单个入口（简写）语法" class="headerlink" title="单个入口（简写）语法"></a>单个入口（简写）语法</h1><p>用法：entry: string | [string]<br>webpack.config.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  entry<span class="token operator">:</span> <span class="token string">'./path/to/my/entry/file.js'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  entry<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    main<span class="token operator">:</span> <span class="token string">'./path/to/my/entry/file.js'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们也可以将一个文件路径数组传递给 entry 属性，这将创建一个所谓的 “multi-main entry”。在你想要一次注入多个依赖文件，并且将它们的依赖关系绘制在一个 “chunk” 中时，这种方式就很有用。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  entry<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'./src/file_1.js'</span><span class="token punctuation">,</span> <span class="token string">'./src/file_2.js'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    filename<span class="token operator">:</span> <span class="token string">'bundle.js'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h1><p>用法：entry: { <entryChunkName> string | [string] } | {}</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  entry<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    app<span class="token operator">:</span> <span class="token string">'./src/app.js'</span><span class="token punctuation">,</span>    adminApp<span class="token operator">:</span> <span class="token string">'./src/adminApp.js'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对象语法会比较繁琐。然而，这是应用程序中定义入口的最可扩展的方式。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;单个入口（简写）语法&quot;&gt;&lt;a href=&quot;#单个入口（简写）语法&quot; class=&quot;headerlink&quot; title=&quot;单个入口（简写）语法&quot;&gt;&lt;/a&gt;单个入口（简写）语法&lt;/h1&gt;&lt;p&gt;用法：entry: string | [string]&lt;br&gt;webpack</summary>
      
    
    
    
    
    <category term="webpack" scheme="http://example.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack学习概念篇</title>
    <link href="http://example.com/2021/08/31/webpack-%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/08/31/webpack-%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-08-30T16:00:00.000Z</published>
    <updated>2021-09-16T06:55:19.733Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>entry 入口<br>入口起点(entry point) 指示 webpack 应该使用哪个模块，来作为构建其内部 依赖图(dependency graph) 的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。<br>默认值是 ./src/index.js，但你可以通过在 webpack configuration 中配置 entry 属性，来指定一个（或多个）不同的入口起点。例如：<br>webpack.config.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  entry<span class="token operator">:</span> <span class="token string">'./path/to/my/entry/file.js'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>output 输出<br>output 属性告诉 webpack 在哪里输出它所创建的 bundle，以及如何命名这些文件。主要输出文件的默认值是 ./dist/main.js，其他生成文件默认放置在 ./dist 文件夹中。<br>你可以通过在配置中指定一个 output 字段，来配置这些处理过程：<br>webpack.config.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  entry<span class="token operator">:</span> <span class="token string">'./path/to/my/entry/file.js'</span><span class="token punctuation">,</span>  output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token operator">:</span> <span class="token string">'my-first-webpack.bundle.js'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的示例中，我们通过 output.filename 和 output.path 属性，来告诉 webpack bundle 的名称，以及我们想要 bundle 生成(emit)到哪里。可能你想要了解在代码最上面导入的 path 模块是什么，它是一个 Node.js 核心模块，用于操作文件路径。</p></li><li><p>loder<br>webpack 只能理解 JavaScript 和 JSON 文件，这是 webpack 开箱可用的自带能力。loader 让 webpack 能够去处理其他类型的文件，并将它们转换为有效 模块，以供应用程序使用，以及被添加到依赖图中。</p><p>在更高层面，在 webpack 的配置中，loader 有两个属性：</p><ol><li>test 属性，识别出哪些文件会被转换。</li><li>use 属性，定义出在进行转换时，应该使用哪个 loader。<br>webpack.config.js<pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      filename<span class="token operator">:</span> <span class="token string">'my-first-webpack.bundle.js'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.txt$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token string">'raw-loader'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token operator">+</span> piugin 插件  loader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量。  想要使用一个插件，你只需要 <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 它，然后把它添加到 plugins <span class="token function">数组中。多数插件可以通过选项</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span>自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 <span class="token keyword">new</span> 操作符来创建一个插件实例。  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>`js  <span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过 npm 安装</span>  <span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用于访问内置插件</span>  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.txt$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token string">'raw-loader'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> template<span class="token operator">:</span> <span class="token string">'./src/index.html'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>在上面的示例中，html-webpack-plugin 为应用程序生成一个 HTML 文件，并自动将生成的所有 bundle 注入到此文件中。</li></ol></li><li><p>mode 模式<br>通过选择 development, production 或 none 之中的一个，来设置 mode 参数，你可以启用 webpack 内置在相应环境下的优化。其默认值为 production。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  mode<span class="token operator">:</span> <span class="token string">'production'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>浏览器兼容性<br>Webpack 支持所有符合 ES5 标准 的浏览器（不支持 IE8 及以下版本）。webpack 的 import() 和 require.ensure() 需要 Promise。如果你想要支持旧版本浏览器，在使用这些表达式之前，还需要 提前加载 polyfill。</p></li><li><p>环境<br>Webpack 5 运行于 Node.js v10.13.0+ 的版本。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;entry 入口&lt;br&gt;入口起点(entry point) 指示 webpack 应该使用哪个模块，来作为构建其内部 依赖图(dependency graph) 的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。&lt;</summary>
      
    
    
    
    
    <category term="webpack" scheme="http://example.com/tags/webpack/"/>
    
  </entry>
  
</feed>
