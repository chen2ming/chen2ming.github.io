<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>chenMing</title>
  
  <subtitle>(ง •̀_•́)ง</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-03-29T06:50:25.866Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>chenMing</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CommonJs</title>
    <link href="http://example.com/2023/03/29/%E6%A8%A1%E5%9D%97%E5%8C%96-CommonJs/"/>
    <id>http://example.com/2023/03/29/%E6%A8%A1%E5%9D%97%E5%8C%96-CommonJs/</id>
    <published>2023-03-28T16:00:00.000Z</published>
    <updated>2023-03-29T06:50:25.866Z</updated>
    
    <content type="html"><![CDATA[<p>在nodejs中，由于有且仅有一个入口文件（启动文件），而开发一个应用肯定会涉及到多个文件配合，因此，nodejs对模块化的需求比浏览器端要大的多</p><p><img src="/imgs/module/2019-12-02-11-15-01.png"><br>由于nodejs刚刚发布的时候，前端没有统一的、官方的模块化规范，因此，它选择使用社区提供的CommonJS作为模块化规范</p><p>在学习CommonJS之前，首先认识两个重要的概念：<strong>模块的导出</strong>和<strong>模块的导入</strong></p><h2 id="模块的导出"><a href="#模块的导出" class="headerlink" title="模块的导出"></a>模块的导出</h2><p>要理解模块的导出，首先要理解模块的含义</p><p>什么是模块？</p><p>模块就是一个JS文件，它实现了一部分功能，并隐藏自己的内部实现，同时提供了一些接口供其他模块使用</p><p>模块有两个核心要素：<strong>隐藏</strong>和<strong>暴露</strong></p><p>隐藏的，是自己内部的实现</p><p>暴露的，是希望外部使用的接口</p><p>任何一个正常的模块化标准，都应该默认隐藏模块中的所有实现，而通过一些语法或api调用来暴露接口</p><p><strong>暴露接口的过程即模块的导出</strong></p><p><img src="/imgs/module/2019-12-02-11-27-12.png"></p><h2 id="模块的导入"><a href="#模块的导入" class="headerlink" title="模块的导入"></a>模块的导入</h2><p>当需要使用一个模块时，使用的是该模块暴露的部分（导出的部分），隐藏的部分是永远无法使用的。</p><p><strong>当通过某种语法或api去使用一个模块时，这个过程叫做模块的导入</strong></p><h2 id="CommonJS规范"><a href="#CommonJS规范" class="headerlink" title="CommonJS规范"></a>CommonJS规范</h2><p>CommonJS使用<code>exports</code>导出模块，<code>require</code>导入模块</p><p>具体规范如下：</p><ol><li>如果一个JS文件中存在<code>exports</code>或<code>require</code>，该JS文件是一个模块</li><li>模块内的所有代码均为隐藏代码，包括全局变量、全局函数，这些全局的内容均不应该对全局变量造成任何污染</li><li>如果一个模块需要暴露一些API提供给外部使用，需要通过<code>exports</code>导出，<code>exports</code>是一个空的对象，你可以为该对象添加任何需要导出的内容</li><li>如果一个模块需要导入其他模块，通过<code>require</code>实现，<code>require</code>是一个函数，传入模块的路径即可返回该模块导出的整个内容</li></ol><h2 id="nodejs对CommonJS的实现"><a href="#nodejs对CommonJS的实现" class="headerlink" title="nodejs对CommonJS的实现"></a>nodejs对CommonJS的实现</h2><p>为了实现CommonJS规范，nodejs对模块做出了以下处理</p><ol><li><p>为了保证高效的执行，仅加载必要的模块。nodejs只有执行到<code>require</code>函数时才会加载并执行模块</p></li><li><p>为了隐藏模块中的代码，nodejs执行模块时，会将模块中的所有代码放置到一个函数中执行，以保证不污染全局变量。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//模块中的代码</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>为了保证顺利的导出模块内容，nodejs做了以下处理</p><ol><li>在模块开始执行前，初始化一个值<code>module.exports = &#123;&#125;</code></li><li><code>module.exports</code>即模块的导出值</li><li>为了方便开发者便捷的导出，nodejs在初始化完<code>module.exports</code>后，又声明了一个变量<code>exports = module.exports</code></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> exports <span class="token operator">=</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>    <span class="token comment">//模块中的代码</span>    <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>为了避免反复加载同一个模块，nodejs默认开启了模块缓存，如果加载的模块已经被加载过了，则会自动使用之前的导出结果</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在nodejs中，由于有且仅有一个入口文件（启动文件），而开发一个应用肯定会涉及到多个文件配合，因此，nodejs对模块化的需求比浏览器端要大的多&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/imgs/module/2019-12-02-11-15-01.png&quot;&gt;&lt;br&gt;由于no</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ES module</title>
    <link href="http://example.com/2023/03/29/%E6%A8%A1%E5%9D%97%E5%8C%96-ES%20module/"/>
    <id>http://example.com/2023/03/29/%E6%A8%A1%E5%9D%97%E5%8C%96-ES%20module/</id>
    <published>2023-03-28T16:00:00.000Z</published>
    <updated>2023-03-29T07:11:30.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6模块化简介"><a href="#ES6模块化简介" class="headerlink" title="ES6模块化简介"></a>ES6模块化简介</h1><p>ECMA组织参考了众多社区模块化标准，终于在2015年，随着ES6发布了官方的模块化标准，后成为ES6模块化</p><p>ES6模块化具有以下的特点</p><ol><li>使用依赖<strong>预声明</strong>的方式导入模块<ol><li>依赖延迟声明<ol><li>优点：某些时候可以提高效率</li><li>缺点：无法在一开始确定模块依赖关系（比较模糊）</li></ol></li><li>依赖预声明<ol><li>优点：在一开始可以确定模块依赖关系</li><li>缺点：某些时候效率较低</li></ol></li></ol></li><li>灵活的多种导入导出方式</li><li>规范的路径表示法：所有路径必须以./或../开头</li></ol><h1 id="基本导入导出"><a href="#基本导入导出" class="headerlink" title="基本导入导出"></a>基本导入导出</h1><h2 id="模块的引入"><a href="#模块的引入" class="headerlink" title="模块的引入"></a>模块的引入</h2><p><strong>注意：这一部分非模块化标准</strong></p><p>目前，浏览器使用以下方式引入一个ES6模块文件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>入口文件<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="模块的基本导出和导入"><a href="#模块的基本导出和导入" class="headerlink" title="模块的基本导出和导入"></a>模块的基本导出和导入</h2><p>ES6中的模块导入导出分为两种：</p><ol><li>基本导入导出</li><li>默认导入导出</li></ol><p><img src="/imgs/module/2019-12-03-17-00-44.png"></p><h3 id="基本导出"><a href="#基本导出" class="headerlink" title="基本导出"></a>基本导出</h3><p>类似于 <code>exports.xxx = xxxx</code></p><p>基本导出可以有多个，每个必须有名称</p><p>基本导出的语法如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> 声明表达式<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>具名符号<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于基本导出必须具有名称，所以要求导出内容必须跟上<strong>声明表达式</strong>或<strong>具名符号</strong></p><h3 id="基本导入"><a href="#基本导入" class="headerlink" title="基本导入"></a>基本导入</h3><p>由于使用的是<strong>依赖预加载</strong>，因此，导入任何其他模块，导入代码必须放置到所有代码之前</p><p>对于基本导出，如果要进行导入，使用下面的代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>导入的符号列表<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"模块路径"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意以下细节：</p><ul><li>导入时，可以通过关键字<code>as</code>对导入的符号进行重命名</li><li>导入时使用的符号是常量，不可修改</li><li>可以使用*号导入所有的基本导出，形成一个对象</li></ul><h1 id="默认导入导出"><a href="#默认导入导出" class="headerlink" title="默认导入导出"></a>默认导入导出</h1><p><img src="/imgs/module/2019-12-03-17-00-44.png"></p><h2 id="默认导出"><a href="#默认导出" class="headerlink" title="默认导出"></a>默认导出</h2><p>每个模块，除了允许有多个基本导出之外，还允许有一个默认导出</p><p>默认导出类似于CommonJS中的<code>module.exports</code>，由于只有一个，因此无需具名</p><p>具体的语法是</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> 默认导出的数据<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>默认导出的数据 <span class="token keyword">as</span> <span class="token keyword">default</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于每个模块仅允许有一个默认导出，因此，每个模块不能出现多个默认导出语句</p><h2 id="默认导入"><a href="#默认导入" class="headerlink" title="默认导入"></a>默认导入</h2><p>需要想要导入一个模块的默认导出，需要使用下面的语法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> 接收变量名 <span class="token keyword">from</span> <span class="token string">"模块路径"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>类似于CommonJS中的</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> 接收变量名 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"模块路径"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于默认导入时变量名是自行定义的，因此没有别名一说</p><p>如果希望同时导入某个模块的默认导出和基本导出，可以使用下面的语法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> 接收默认导出的变量<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>接收基本导出的变量<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"模块路径"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：如果使用*号，会将所有基本导出和默认导出聚合到一个对象中，默认导出会作为属性default存在</p><h1 id="ES6模块化的其他细节"><a href="#ES6模块化的其他细节" class="headerlink" title="ES6模块化的其他细节"></a>ES6模块化的其他细节</h1><ol><li><strong>尽量导出不可变值</strong></li></ol><p>当导出一个内容时，尽量保证该内容是不可变的（大部分情况都是如此）</p><p>因为，虽然导入后，无法更改导入内容，但是在导入的模块内部却有可能发生更改，这将导致一些无法预料的事情发生</p><ol start="2"><li><strong>可以使用无绑定的导入用于执行一些初始化代码</strong></li></ol><p>如果我们只是想执行模块中的一些代码，而不需要导入它的任何内容，可以使用无绑定的导入：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">"模块路径"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><strong>可以使用绑定再导出，来重新导出来自另一个模块的内容</strong></li></ol><p>有的时候，我们可能需要用一个模块封装多个模块，然后有选择的将多个模块的内容分别导出，可以使用下面的语法轻松完成</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>绑定的标识符<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"模块路径"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/imgs/module/2019-12-04-14-33-14.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ES6模块化简介&quot;&gt;&lt;a href=&quot;#ES6模块化简介&quot; class=&quot;headerlink&quot; title=&quot;ES6模块化简介&quot;&gt;&lt;/a&gt;ES6模块化简介&lt;/h1&gt;&lt;p&gt;ECMA组织参考了众多社区模块化标准，终于在2015年，随着ES6发布了官方的模块化标准，后</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>浏览器渲染原理</title>
    <link href="http://example.com/2023/03/16/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/"/>
    <id>http://example.com/2023/03/16/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/</id>
    <published>2023-03-15T16:00:00.000Z</published>
    <updated>2023-03-16T06:06:39.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="渲染时间点"><a href="#渲染时间点" class="headerlink" title="渲染时间点"></a>渲染时间点</h1><p><img src="/imgs/%E6%B8%B2%E6%9F%93%E6%97%B6%E9%97%B4.png" alt="Image text"></p><h1 id="渲染流⽔线"><a href="#渲染流⽔线" class="headerlink" title="渲染流⽔线"></a>渲染流⽔线</h1><p><img src="/imgs/%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B.png" alt="Image text"></p><h2 id="1-解析-HTML-Parse-HTML"><a href="#1-解析-HTML-Parse-HTML" class="headerlink" title="1. 解析 HTML - Parse HTML"></a>1. 解析 HTML - Parse HTML</h2><p>  <img src="/imgs/%E8%A7%A3%E6%9E%90.png" alt="Image text"><br>  <img src="/imgs/%E8%A7%A3%E6%9E%902.png" alt="Image text"><br>  <img src="/imgs/%E8%A7%A3%E6%9E%903.png" alt="Image text"></p><p>  为了提⾼解析效率，浏览器会启动⼀个预解析器率先下载和解析 CSS<br>  <img src="/imgs/%E8%A7%A3%E6%9E%904.png" alt="Image text"></p><p>  渲染主线程遇到 JS 时必须暂停⼀切⾏为，等待下载执⾏完后才能继续预解析线程可以分担⼀点下载 JS 的任务<br>  <img src="/imgs/%E8%A7%A3%E6%9E%905.png" alt="Image text"></p><h2 id="2-样式计算-Recalculate-Style"><a href="#2-样式计算-Recalculate-Style" class="headerlink" title="2. 样式计算 - Recalculate Style"></a>2. 样式计算 - Recalculate Style</h2><p>   <img src="/imgs/%E8%AE%A1%E7%AE%97%E6%A0%B7%E5%BC%8F.png" alt="Image text"></p><h2 id="3-布局-Layout"><a href="#3-布局-Layout" class="headerlink" title="3. 布局 - Layout"></a>3. 布局 - Layout</h2><p>  <img src="/imgs/%E5%B8%83%E5%B1%80.png" alt="Image text"><br>  DOM 树 和 Layout 树不⼀定是⼀⼀对应的<br>  <img src="/imgs/%E5%B8%83%E5%B1%802.png" alt="Image text"><br>  <img src="/imgs/%E5%B8%83%E5%B1%803.png" alt="Image text"><br>  <img src="/imgs/%E5%B8%83%E5%B1%804.png" alt="Image text"></p><h2 id="4-分层-Layer"><a href="#4-分层-Layer" class="headerlink" title="4. 分层 - Layer"></a>4. 分层 - Layer</h2><p>  页面变动的时候不会整体重绘<br> <img src="/imgs/%E5%88%86%E5%B1%82.png" alt="Image text"></p><h2 id="5-绘制-Paint"><a href="#5-绘制-Paint" class="headerlink" title="5. 绘制 - Paint"></a>5. 绘制 - Paint</h2><p><img src="/imgs/%E7%BB%98%E5%88%B6.png" alt="Image text"><br>渲染主线程的⼯作到此为⽌，剩余步骤交给其他线程完成<br><img src="/imgs/%E7%BB%98%E5%88%B62.png" alt="Image text"></p><h2 id="6-分块-Tiling"><a href="#6-分块-Tiling" class="headerlink" title="6. 分块 - Tiling"></a>6. 分块 - Tiling</h2><p><img src="/imgs/%E5%88%86%E5%9D%97.png" alt="Image text"><br><img src="/imgs/%E5%88%86%E5%9D%972.png" alt="Image text"></p><h2 id="7-光栅化-Raster"><a href="#7-光栅化-Raster" class="headerlink" title="7. 光栅化 - Raster"></a>7. 光栅化 - Raster</h2><p><img src="/imgs/%E5%85%89%E6%A0%85%E5%8C%96.png" alt="Image text"><br><img src="/imgs/%E5%85%89%E6%A0%85%E5%8C%962.png" alt="Image text"></p><h2 id="8-画-Draw"><a href="#8-画-Draw" class="headerlink" title="8. 画 - Draw"></a>8. 画 - Draw</h2><p><img src="/imgs/%E7%94%BB.png" alt="Image text"></p><h1 id="完整过程"><a href="#完整过程" class="headerlink" title="完整过程"></a>完整过程</h1><p><img src="/imgs/%E5%AE%8C%E6%95%B4%E8%BF%87%E7%A8%8B.png" alt="Image text"></p><h1 id="常⻅⾯试题"><a href="#常⻅⾯试题" class="headerlink" title="常⻅⾯试题"></a>常⻅⾯试题</h1><h2 id="什么是-reflow-？"><a href="#什么是-reflow-？" class="headerlink" title="什么是 reflow ？"></a>什么是 reflow ？</h2><p><img src="/imgs/reflow.png" alt="Image text"></p><h2 id="什么是-什么是-repaint"><a href="#什么是-什么是-repaint" class="headerlink" title="什么是 什么是 repaint?"></a>什么是 什么是 repaint?</h2><p><img src="/imgs/repaint.png" alt="Image text"></p><h2 id="什么是-什么是-为什么-transform-效率⾼？"><a href="#什么是-什么是-为什么-transform-效率⾼？" class="headerlink" title="什么是 什么是 为什么 transform 效率⾼？"></a>什么是 什么是 为什么 transform 效率⾼？</h2><p><img src="/imgs/transform.png" alt="Image text"><br><img src="/imgs/transform2.png" alt="Image text"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;渲染时间点&quot;&gt;&lt;a href=&quot;#渲染时间点&quot; class=&quot;headerlink&quot; title=&quot;渲染时间点&quot;&gt;&lt;/a&gt;渲染时间点&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/imgs/%E6%B8%B2%E6%9F%93%E6%97%B6%E9%97%B4.png&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>代码评审</title>
    <link href="http://example.com/2023/03/02/%E5%B7%A5%E4%BD%9C-%E4%BB%A3%E7%A0%81%E8%AF%84%E5%AE%A1/"/>
    <id>http://example.com/2023/03/02/%E5%B7%A5%E4%BD%9C-%E4%BB%A3%E7%A0%81%E8%AF%84%E5%AE%A1/</id>
    <published>2023-03-01T16:00:00.000Z</published>
    <updated>2023-03-02T03:38:52.140Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码规范的必要性"><a href="#代码规范的必要性" class="headerlink" title="代码规范的必要性"></a>代码规范的必要性</h1><ol><li>规范的代码可以促进团队合作</li><li>规范的代码可以减少bug处理</li><li>规范的代码可以降低维护成本</li><li>养成代码规范的习惯，有助于程序员自身的成长<br>…</li></ol><h1 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h1><h2 id="超长if判断"><a href="#超长if判断" class="headerlink" title="超长if判断"></a>超长if判断</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        i<span class="token punctuation">.</span>isThum <span class="token operator">=</span> <span class="token operator">!</span>i<span class="token punctuation">.</span>isThum<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span>isThum <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 判断类型，后续要添加(没有5)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span>sourceType <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">articleCommentThumb</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                i<span class="token punctuation">.</span>likeCount<span class="token operator">++</span><span class="token punctuation">;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"点赞成功"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"点赞失败"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span>sourceType <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">perfumeCommentThumb</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>commentId<span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                i<span class="token punctuation">.</span>likeCount<span class="token operator">++</span><span class="token punctuation">;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"点赞成功"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"点赞失败"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span>sourceType <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">moodLike</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>              moodId<span class="token operator">:</span> i<span class="token punctuation">.</span>commentId<span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                i<span class="token punctuation">.</span>likeCount<span class="token operator">++</span><span class="token punctuation">;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"点赞成功"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"点赞失败"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span>sourceType <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> datas <span class="token operator">=</span> <span class="token punctuation">&#123;</span>              id<span class="token operator">:</span> i<span class="token punctuation">.</span>commentId<span class="token punctuation">,</span>              title<span class="token operator">:</span> i<span class="token punctuation">.</span>title<span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token function">ordinaryThumb</span><span class="token punctuation">(</span>datas<span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                i<span class="token punctuation">.</span>likeCount<span class="token operator">++</span><span class="token punctuation">;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"点赞成功"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"点赞失败"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">memberGrowthActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 判断类型，后续要添加</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span>sourceType <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">articleCommentThumb</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                i<span class="token punctuation">.</span>likeCount<span class="token operator">--</span><span class="token punctuation">;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"取消点赞"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"取消失败"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span>sourceType <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">perfumeCommentThumb</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>commentId<span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                i<span class="token punctuation">.</span>likeCount<span class="token operator">--</span><span class="token punctuation">;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"取消点赞"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"取消失败"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span>sourceType <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> datas <span class="token operator">=</span> <span class="token punctuation">&#123;</span>              id<span class="token operator">:</span> i<span class="token punctuation">.</span>commentId<span class="token punctuation">,</span>              title<span class="token operator">:</span> i<span class="token punctuation">.</span>title<span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token function">ordinaryThumb</span><span class="token punctuation">(</span>datas<span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                i<span class="token punctuation">.</span>likeCount<span class="token operator">--</span><span class="token punctuation">;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"取消点赞"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"取消失败"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span>sourceType <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">moodLike</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>              moodId<span class="token operator">:</span> i<span class="token punctuation">.</span>commentId<span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                i<span class="token punctuation">.</span>likeCount<span class="token operator">--</span><span class="token punctuation">;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"取消点赞"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                  title<span class="token operator">:</span> <span class="token string">"取消失败"</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                  duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>阅读性太差</li><li>缺少注释</li><li>复用性几乎没有</li></ol><h2 id="修改思路"><a href="#修改思路" class="headerlink" title="修改思路"></a>修改思路</h2><ol><li>不管取消点赞还是点赞，调用的接口都是同一个，所以没必要根据现有状态判断执行两次，唯一的变化是数量的减少和状态的修改</li><li>同一个属性多个不同的状态，可以改写成<code>object[key]()</code>的方式调用</li><li>根据数值判断的状态需要注释，时间长了就不记得了状态值得意思</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 点击成功执行</span><span class="token keyword">const</span> <span class="token function-variable function">successPrompt</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> title <span class="token operator">=</span> <span class="token string">'点赞成功'</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>isThum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    i<span class="token punctuation">.</span>likeCount<span class="token operator">--</span><span class="token punctuation">;</span>    title <span class="token operator">=</span> <span class="token string">'取消成功'</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>    i<span class="token punctuation">.</span>likeCount<span class="token operator">++</span><span class="token punctuation">;</span>    title <span class="token operator">=</span> <span class="token string">'点赞成功'</span>  <span class="token punctuation">&#125;</span>  uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      title<span class="token punctuation">,</span>      icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>      duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 点击失败</span><span class="token keyword">const</span> <span class="token function-variable function">failurePrompt</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> title <span class="token operator">=</span> <span class="token string">'点赞失败'</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>isThum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    title <span class="token operator">=</span> <span class="token string">'点赞失败'</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>    title <span class="token operator">=</span> <span class="token string">'取消失败'</span>  <span class="token punctuation">&#125;</span>  uni<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    title<span class="token punctuation">,</span>    icon<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>    duration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 这里写一下注释</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token number">1</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">perfumeCommentThumb</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>commentId<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">successPrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">failurePrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">moodLike</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>moodId<span class="token operator">:</span> i<span class="token punctuation">.</span>commentId<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">successPrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">failurePrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">ordinaryThumb</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      id<span class="token operator">:</span> i<span class="token punctuation">.</span>commentId<span class="token punctuation">,</span>      title<span class="token operator">:</span> i<span class="token punctuation">.</span>title<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">successPrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">failurePrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">.</span>sourceType<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;代码规范的必要性&quot;&gt;&lt;a href=&quot;#代码规范的必要性&quot; class=&quot;headerlink&quot; title=&quot;代码规范的必要性&quot;&gt;&lt;/a&gt;代码规范的必要性&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;规范的代码可以促进团队合作&lt;/li&gt;
&lt;li&gt;规范的代码可以减少bug处理&lt;/l</summary>
      
    
    
    
    
    <category term="美逆项目" scheme="http://example.com/tags/%E7%BE%8E%E9%80%86%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>JS 事件循环</title>
    <link href="http://example.com/2023/02/28/js-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"/>
    <id>http://example.com/2023/02/28/js-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</id>
    <published>2023-02-27T16:00:00.000Z</published>
    <updated>2023-03-13T02:43:34.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浏览器的进程模型"><a href="#浏览器的进程模型" class="headerlink" title="浏览器的进程模型"></a>浏览器的进程模型</h1><h2 id="何为进程？"><a href="#何为进程？" class="headerlink" title="何为进程？"></a>何为进程？</h2><pre><code>每个应⽤⾄少有⼀个进程，进程之间相互独⽴，即使要通信，也需要双⽅同意。</code></pre><h2 id="何为线程？"><a href="#何为线程？" class="headerlink" title="何为线程？"></a>何为线程？</h2><pre><code>有了进程后，就可以运⾏程序的代码了。运⾏代码的「⼈」称之为「线程」。⼀个进程⾄少有⼀个线程，所以在进程开启后会⾃动创建⼀个线程来运⾏代码，该线程称之为主线程。如果程序需要同时执⾏多块代码，主线程就会启动更多的线程来执⾏代码，所以⼀个进程中可以包含多个线程。</code></pre><h1 id="浏览器有哪些进程和线程？"><a href="#浏览器有哪些进程和线程？" class="headerlink" title="浏览器有哪些进程和线程？"></a>浏览器有哪些进程和线程？</h1><h2 id="浏览器是⼀个多进程多线程的应⽤程序"><a href="#浏览器是⼀个多进程多线程的应⽤程序" class="headerlink" title="浏览器是⼀个多进程多线程的应⽤程序"></a>浏览器是⼀个多进程多线程的应⽤程序</h2><p>  浏览器内部⼯作极其复杂。</p><p>  为了避免相互影响，为了减少连环崩溃的⼏率，当启动浏览器后，它会⾃动启动多个进程</p><blockquote><p>可以在浏览器的任务管理器中查看当前的所有进程</p></blockquote><p>其中，最主要的进程有：</p><ul><li><p>浏览器进程<br>  主要负责界⾯显示、⽤户交互、⼦进程管理等。浏览器进程内部会启动多个线程处理不同的任务。</p></li><li><p>⽹络进程<br>  负责加载⽹络资源。⽹络进程内部会启动多个线程来处理不同的⽹络任务。</p></li><li><p>渲染进程<br>  渲染进程启动后，会开启⼀个渲染主线程，主线程负责执⾏ HTML、CSS、JS 代码。<br>  默认情况下，浏览器会为每个标签⻚开启⼀个新的渲染进程，以保证不同的标签⻚之间不相互影响</p></li></ul><h1 id="渲染主线程是如何⼯作的？"><a href="#渲染主线程是如何⼯作的？" class="headerlink" title="渲染主线程是如何⼯作的？"></a>渲染主线程是如何⼯作的？</h1><p>  渲染主线程是浏览器中最繁忙的线程，需要它处理的任务包括但不限于：</p><ul><li>解析 HTML</li><li>解析 CSS</li><li>计算样式</li><li>布局</li><li>处理图层</li><li>每秒把⻚⾯画 60 次</li><li>执⾏全局 JS 代码</li><li>执⾏事件处理函数</li><li>执⾏计时器的回调函数<br>…</li></ul><h2 id="如何调度任务？"><a href="#如何调度任务？" class="headerlink" title="如何调度任务？"></a>如何调度任务？</h2><p><img src="/imgs/eventLoop.png" alt="Image text"></p><ol><li>在最开始的时候，渲染主线程会进⼊⼀个⽆限循环</li><li>每⼀次循环会检查消息队列中是否有任务存在。如果有，就取出第⼀个任务执⾏，执⾏完⼀个后进⼊下⼀次循环；如果没有，则进⼊休眠状态。</li><li>其他所有线程（包括其他进程的线程）可以随时向消息队列添加任务。新任务会加到消息队列的末尾。在添加新任务时，如果主线程是休眠状态，则会将其唤醒以继续循环拿取任务</li></ol><p><em>整个过程，被称之为事件循环（消息循环）</em></p><h2 id="何为异步？"><a href="#何为异步？" class="headerlink" title="何为异步？"></a>何为异步？</h2><p>代码在执⾏过程中，会遇到⼀些⽆法⽴即处理的任务，⽐如：</p><ul><li>计时完成后需要执⾏的任务 —— setTimeout 、 setInterval</li><li>⽹络通信完成后需要执⾏的任务 – XHR 、 Fetch</li><li>⽤户操作后需要执⾏的任务 – addEventListener<br>如果让渲染主线程等待这些任务的时机达到，就会导致主线程⻓期处于「阻塞」的状态，从⽽导致浏览器「卡死」</li></ul><p><em>渲染主线程承担着极其重要的⼯作，⽆论如何都不能阻塞！</em><br><img src="/imgs/%E5%BC%82%E6%AD%A5.png" alt="Image text"></p><blockquote><p>⾯试题：如何理解 JS 的异步？<br>  参考答案：<br>  JS是⼀⻔单线程的语⾔，这是因为它运⾏在浏览器的渲染主线程中，⽽渲染主线程只有⼀个。⽽渲染主线程承担着诸多的⼯作，渲染⻚⾯、执⾏ JS 都在其中运⾏。<br>  如果使⽤同步的⽅式，就极有可能导致主线程产⽣阻塞，从⽽导致消息队列中的很多其他任务⽆法得到执⾏。这样⼀来，⼀⽅⾯会导致繁忙的主线程⽩⽩的消耗时间，另⼀⽅⾯导致⻚⾯⽆法及时更新，给⽤户造成卡死现象。所以浏览器采⽤异步的⽅式来避免。具体做法是当某些任务发⽣时，⽐如计时器、⽹络、事件监听，主线程将任务交给其他线程去处理，⾃身⽴即结束任务的执⾏，转⽽执⾏后续代码。当其他线程完成时，将事先传递的回调函数包装成任务，加⼊到消息队列末尾排队，等待主线程调度执⾏。<br>  在这种异步模式下，浏览器永不阻塞，从⽽最⼤限度的保证了单线程的流畅运⾏</p></blockquote><h1 id="任务有优先级吗？"><a href="#任务有优先级吗？" class="headerlink" title="任务有优先级吗？"></a>任务有优先级吗？</h1><p>任务没有优先级，在消息队列中先进先出但<b>消息队列是有优先级的</b></p><ul><li>每个任务都有⼀个任务类型，同⼀个类型的任务必须在⼀个队列，不同类型的任务可以分属于不同的队列。</li><li>在⼀次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执⾏。浏览器必须准备好⼀个微队列，微队列中的任务优先所有其他任务执⾏</li></ul><blockquote><p>随着浏览器的复杂度急剧提升，W3C 不再使⽤宏队列的说法</p></blockquote><p>在⽬前 chrome 的实现中，⾄少包含了下⾯的队列：</p><ul><li>微队列：⽤户存放需要最快执⾏的任务，优先级「最⾼」</li><li>交互队列：⽤于存放⽤户操作后产⽣的事件处理任务，优先级「⾼」</li><li>延时队列：⽤于存放计时器到达后的回调任务，优先级「中」</li></ul><blockquote><p>⾯试题：阐述⼀下 JS 的事件循环<br>参考答案：事件循环⼜叫做消息循环，是浏览器渲染主线程的⼯作⽅式。在 Chrome 的源码中，它开启⼀个不会结束的 for 循环，每次循环从消息队列中取出第⼀个任务执⾏，⽽其他线程只需要在合适的时候将任务加⼊到队列末尾即可。<br>过去把消息队列简单分为宏队列和微队列，这种说法⽬前已⽆法满⾜复杂的浏览器环境，取⽽代之的是⼀种更加灵活多变的处理⽅式。根据 W3C 官⽅的解释，每个任务有不同的类型，同类型的任务必须在同⼀个队列，不同的任务可以属于不同的队列。不同任务队列有不同的优先级在⼀次事件循环中，由浏览器⾃⾏决定取哪⼀个队列的任务。但浏览器必须有⼀个微队列，微队列的任务⼀定具有最⾼的优先级，必须优先调度执⾏。</p></blockquote><blockquote><p>⾯试题：JS 中的计时器能做到精确计时吗？为什么？<br>参考答案：<br>不⾏，因为：<br>1.计算机硬件没有原⼦钟，⽆法做到精确计时<br>2.操作系统的计时函数本身就有少量偏差，由于 JS 的计时器最终调⽤的是操作系统的函数，也就携带了这些偏差<br>3.按照 W3C 的标准，浏览器实现计时器时，如果嵌套层级超过 5 层，则会带有 4 毫秒的最少时间，这样在计时时间少于 4 毫秒时⼜带来了偏差<br>4.受事件循环的影响，计时器的回调函数只能在主线程空闲时运⾏，因此⼜带来了偏差</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浏览器的进程模型&quot;&gt;&lt;a href=&quot;#浏览器的进程模型&quot; class=&quot;headerlink&quot; title=&quot;浏览器的进程模型&quot;&gt;&lt;/a&gt;浏览器的进程模型&lt;/h1&gt;&lt;h2 id=&quot;何为进程？&quot;&gt;&lt;a href=&quot;#何为进程？&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>addEventListener方法使用</title>
    <link href="http://example.com/2022/09/23/js-addEventListener/"/>
    <id>http://example.com/2022/09/23/js-addEventListener/</id>
    <published>2022-09-23T03:27:15.101Z</published>
    <updated>2022-09-23T07:27:47.020Z</updated>
    
    <content type="html"><![CDATA[<p> addEventListener() 方法用于向指定元素添加监听事件。且同一元素目标可重复添加，不会覆盖之前相同事件，配合 removeEventListener() 方法来移除事件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>元素id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"目标元素被点击了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参数说明：有三个参数<br>参数一、事件名称，字符串，必填。</p><p>事件名称不用带 “on” 前缀，点击事件直接写：”click”，键盘放开事件写：”keyup”<br>参数二、执行函数，必填。</p><p>填写需要执行的函数，如：function(){代码…}<br>当目标对象事件触发时，会传入一个事件参数，参数名称可自定义，如填写event，不需要也可不填写。 事件对象的类型取决于特定的事件。例如， “click” 事件属于 MouseEvent(鼠标事件) 对象。<br>function(event){console.log(event)}<br>参数三、触发类型，布尔型，可空 </p><p>true - 事件在捕获阶段执行<br>false - 事件在冒泡阶段执行，默认是false</p><p>参数一的事件类型大致有如下选择</p><h2 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h2><p>click 当用户点击某个对象时调用的事件句柄。<br>contextmenu 在用户点击鼠标右键打开上下文菜单时触发<br>dblclick 当用户双击某个对象时调用的事件句柄。<br>mousedown 鼠标按钮被按下。<br>mouseenter 当鼠标指针移动到元素上时触发。<br>mouseleave 当鼠标指针移出元素时触发<br>mousemove 鼠标被移动。<br>mouseover 鼠标移到某元素之上。<br>mouseout 鼠标从某元素移开。<br>mouseup 鼠标按键被松开。</p><h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><p>属性 描述 DOM<br>keydown 某个键盘按键被按下。<br>keypress 某个键盘按键被按下并松开。<br>keyup 某个键盘按键被松开。</p><h2 id="框架-对象（Frame-Object）事件"><a href="#框架-对象（Frame-Object）事件" class="headerlink" title="框架/对象（Frame/Object）事件"></a>框架/对象（Frame/Object）事件</h2><p>abort 图像的加载被中断。 ( )<br>beforeunload 该事件在即将离开页面（刷新或关闭）时触发<br>error 在加载文档或图像时发生错误。 ( , 和 )<br>hashchange 该事件在当前 URL 的锚部分发生修改时触发。<br>load 一张页面或一幅图像完成加载。<br>pageshow 该事件在用户访问页面时触发<br>pagehide 该事件在用户离开当前网页跳转到另外一个页面时触发<br>resize 窗口或框架被重新调整大小。<br>scroll 当文档被滚动时发生的事件。<br>unload 用户退出页面。 ( 和 )</p><h2 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h2><p>blur 元素失去焦点时触发<br>change 该事件在表单元素的内容改变时触发( , , , 和 )<br>focus 元素获取焦点时触发<br>focusin 元素即将获取焦点是触发<br>focusout 元素即将失去焦点是触发<br>input 元素获取用户输入是触发<br>reset 表单重置时触发<br>search 用户向搜索域输入文本时触发 (</p><h2 id="剪贴板事件"><a href="#剪贴板事件" class="headerlink" title="剪贴板事件"></a>剪贴板事件</h2><p>copy 该事件在用户拷贝元素内容时触发<br>cut 该事件在用户剪切元素内容时触发<br>paste 该事件在用户粘贴元素内容时触发</p><h2 id="打印事件"><a href="#打印事件" class="headerlink" title="打印事件"></a>打印事件</h2><p>afterprint 该事件在页面已经开始打印，或者打印窗口已经关闭时触发<br>beforeprint 该事件在页面即将开始打印时触发</p><h2 id="拖动事件"><a href="#拖动事件" class="headerlink" title="拖动事件"></a>拖动事件</h2><p>drag 该事件在元素正在拖动时触发<br>dragend 该事件在用户完成元素的拖动时触发<br>dragenter 该事件在拖动的元素进入放置目标时触发<br>dragleave 该事件在拖动元素离开放置目标时触发<br>dragover 该事件在拖动元素在放置目标上时触发<br>dragstart 该事件在用户开始拖动元素时触发<br>drop 该事件在拖动元素放置在目标区域时触发</p><h2 id="多媒体（Media）事件"><a href="#多媒体（Media）事件" class="headerlink" title="多媒体（Media）事件"></a>多媒体（Media）事件</h2><p>abort 事件在视频/音频（audio/video）终止加载时触发。<br>canplay 事件在用户可以开始播放视频/音频（audio/video）时触发。<br>canplaythrough 事件在视频/音频（audio/video）可以正常播放且无需停顿和缓冲时触发。<br>durationchange 事件在视频/音频（audio/video）的时长发生变化时触发。<br>emptied The event occurs when the current playlist is empty<br>ended 事件在视频/音频（audio/video）播放结束时触发。<br>error 事件在视频/音频（audio/video）数据加载期间发生错误时触发。<br>loadeddata 事件在浏览器加载视频/音频（audio/video）当前帧时触发触发。<br>loadedmetadata 事件在指定视频/音频（audio/video）的元数据加载后触发。<br>loadstart 事件在浏览器开始寻找指定视频/音频（audio/video）触发。<br>pause 事件在视频/音频（audio/video）暂停时触发。<br>play 事件在视频/音频（audio/video）开始播放时触发。<br>playing 事件在视频/音频（audio/video）暂停或者在缓冲后准备重新开始播放时触发。<br>progress 事件在浏览器下载指定的视频/音频（audio/video）时触发。<br>ratechange 事件在视频/音频（audio/video）的播放速度发送改变时触发。<br>seeked 事件在用户重新定位视频/音频（audio/video）的播放位置后触发。<br>seeking 事件在用户开始重新定位视频/音频（audio/video）时触发。<br>stalled 事件在浏览器获取媒体数据，但媒体数据不可用时触发。<br>suspend 事件在浏览器读取媒体数据中止时触发。<br>timeupdate 事件在当前的播放位置发送改变时触发。<br>volumechange 事件在音量发生改变时触发。<br>waiting 事件在视频由于要播放下一帧而需要缓冲时触发。</p><h2 id="动画事件"><a href="#动画事件" class="headerlink" title="动画事件"></a>动画事件</h2><p>animationend 该事件在 CSS 动画结束播放时触发<br>animationiteration 该事件在 CSS 动画重复播放时触发<br>animationstart 该事件在 CSS 动画开始播放时触发</p><h2 id="过渡事件"><a href="#过渡事件" class="headerlink" title="过渡事件"></a>过渡事件</h2><p>transitionend 该事件在 CSS 完成过渡后触发。</p><h2 id="其他事件"><a href="#其他事件" class="headerlink" title="其他事件"></a>其他事件</h2><p>message 该事件通过或者从对象(WebSocket, Web Worker, Event Source 或者子 frame 或父窗口)接收到消息时触发<br>online 该事件在浏览器开始在线工作时触发。<br>offline 该事件在浏览器开始离线工作时触发。<br>popstate 该事件在窗口的浏览历史（history 对象）发生改变时触发。 event occurs when the window’s history changes<br>show 该事件当</p><h2 id="元素在上下文菜单显示时触发"><a href="#元素在上下文菜单显示时触发" class="headerlink" title="元素在上下文菜单显示时触发"></a>元素在上下文菜单显示时触发</h2><p>storage 该事件在 Web Storage(HTML 5 Web 存储)更新时触发<br>toggle 该事件在用户打开或关闭 元素时触发<br>wheel 该事件在鼠标滚轮在元素上下滚动时触发</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; addEventListener() 方法用于向指定元素添加监听事件。且同一元素目标可重复添加，不会覆盖之前相同事件，配合 removeEventListener() 方法来移除事件&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-js&quot; da</summary>
      
    
    
    
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>前端生成文档</title>
    <link href="http://example.com/2022/06/13/%E5%89%8D%E7%AB%AF%E7%94%9F%E6%88%90%E6%96%87%E6%A1%A3/"/>
    <id>http://example.com/2022/06/13/%E5%89%8D%E7%AB%AF%E7%94%9F%E6%88%90%E6%96%87%E6%A1%A3/</id>
    <published>2022-06-12T16:00:00.000Z</published>
    <updated>2022-06-13T07:54:20.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端生成文档"><a href="#前端生成文档" class="headerlink" title="前端生成文档"></a>前端生成文档</h1><h2 id="需要插件file-saver、html-docx-js"><a href="#需要插件file-saver、html-docx-js" class="headerlink" title="需要插件file-saver、html-docx-js"></a>需要插件file-saver、html-docx-js</h2><pre class="line-numbers language-none"><code class="language-none">yarn add file-saver --saveyarn add html-docx-js --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="生成方式"><a href="#生成方式" class="headerlink" title="生成方式"></a>生成方式</h2><p>主要通过将html代码转化成文档</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">gogogo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>下载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./node_modules/file-saver/dist/FileSaver.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./node_modules/html-docx-js/dist/html-docx.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./htmlTemp.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">gogogo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> domString <span class="token operator">=</span> <span class="token function">htmlTemp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> converted <span class="token operator">=</span> htmlDocx<span class="token punctuation">.</span><span class="token function">asBlob</span><span class="token punctuation">(</span>domString<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">saveAs</span><span class="token punctuation">(</span>converted<span class="token punctuation">,</span> <span class="token string">"1111.docx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*  注意事项:    1. 经过反复尝试, 设置div高度在docx文件中无效      解决设置上下垂直距离方法： &lt;div class="item-kong">&amp;nbsp;&amp;nbsp;&lt;/div>*/</span><span class="token comment">// 打印word的html模板</span><span class="token keyword">function</span> <span class="token function">htmlTemp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> d <span class="token operator">=</span> <span class="token string">"测试"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> htmlTemp <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;!DOCTYPE html>    &lt;html lang="en">    &lt;head>      &lt;meta charset="UTF-8">      &lt;meta http-equiv="X-UA-Compatible" content="IE=edge">      &lt;meta name="viewport" content="width=device-width, initial-scale=1.0">      &lt;title>&lt;/title>      &lt;style>        .head-title&#123;          text-align: center;          font-size: 20px;        &#125;        .base-title&#123;          font-size: 20px;          font-weight: 800;        &#125;        .base-items .item&#123;          font-size: 14px;          height: 20px;          line-height:20px;        &#125;        .set-color-one &#123;          color:#e63f32;        &#125;        .set-color-two&#123;          color:#fc011a;        &#125;        .err-msg&#123;          font-size: 28px;          font-weight: 800;          color:red;        &#125;      &lt;/style>    &lt;/head>    &lt;body>      &lt;div class="head-title">自评得分&lt;/div>      &lt;div class="part-one">        &lt;div class="base-title">一、基本信息&lt;/div>        &lt;div>&amp;nbsp;&amp;nbsp;&lt;/div>        &lt;div class="base-items">          &lt;div class="item">计划名称：&lt;/div>          &lt;div class="item">自评组：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>          &lt;div class="item">填报人：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>          &lt;div class="item">实评时间：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>          &lt;div class="item">自评组长：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>          &lt;div class="item">自评组员：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>        &lt;/div>        &lt;div>&amp;nbsp;&amp;nbsp;&lt;/div>      &lt;/div>      &lt;div class="part-two">        &lt;div class="base-title">二、</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">考评项目&lt;/div>        &lt;div>&amp;nbsp;&amp;nbsp;&lt;/div>        &lt;div class="base-items">          </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">        &lt;/div>        &lt;div>&amp;nbsp;&amp;nbsp;&lt;/div>      &lt;/div>      &lt;div class="part-three">        &lt;div class="base-title">三、自评得分统计&lt;/div>        &lt;div>&amp;nbsp;&amp;nbsp;&lt;/div>        &lt;div class="base-items">          &lt;div>总扣分项(不计小项)：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>          &lt;div>总目标分：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>          &lt;div>总扣分值：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>          &lt;div>总实得分：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>          &lt;div>总得分率：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>        &lt;/div>        &lt;div>&amp;nbsp;&amp;nbsp;&lt;/div>      &lt;/div>      &lt;div class="part-four">        &lt;div class="base-title">四、主要问题及整改建议（凡扣分项均应有问题与整改建议）&lt;/div>        &lt;div>&amp;nbsp;&amp;nbsp;&lt;/div>        &lt;div class="base-items">          &lt;div></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>        &lt;/div>        &lt;div>&amp;nbsp;&amp;nbsp;&lt;/div>      &lt;/div>    &lt;/body>  &lt;/html></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token keyword">return</span> htmlTemp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端生成文档&quot;&gt;&lt;a href=&quot;#前端生成文档&quot; class=&quot;headerlink&quot; title=&quot;前端生成文档&quot;&gt;&lt;/a&gt;前端生成文档&lt;/h1&gt;&lt;h2 id=&quot;需要插件file-saver、html-docx-js&quot;&gt;&lt;a href=&quot;#需要插件file-s</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>新疆纤检项目总结</title>
    <link href="http://example.com/2022/06/09/%E6%96%B0%E7%96%86%E7%BA%A4%E6%A3%80%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2022/06/09/%E6%96%B0%E7%96%86%E7%BA%A4%E6%A3%80%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</id>
    <published>2022-06-08T16:00:00.000Z</published>
    <updated>2022-06-10T03:13:01.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用技术"><a href="#使用技术" class="headerlink" title="使用技术"></a>使用技术</h1><p>vue2.0 + element + axios + vue-router + vuex + pdf.js</p><h1 id="项目概要"><a href="#项目概要" class="headerlink" title="项目概要"></a>项目概要</h1><p><em>新疆维吾尔自治区纤维质量监测中心</em>的一个用来管理培训的项目<br>从用户的角度来说一共有两种：管理人员和用户（用户分为企业用户和个人用户）主要的功能是对用户进行培训开班，可以理解为一个报名系统。还有一些附带的功能。</p><ul><li>培训管理系统</li><li>知识库</li><li>信用平台</li><li>统一登录平台</li></ul><h1 id="培训管理系统"><a href="#培训管理系统" class="headerlink" title="培训管理系统"></a>培训管理系统</h1><p>普通管理系统    O(∩_∩)O哈哈~</p><ul><li>系统管理<ul><li>菜单管理</li><li>角色管理</li><li>用户管理</li><li>资源分配</li></ul></li><li>首页</li><li>培训管理</li><li>班级管理</li><li>证书管理</li><li>订单管理</li><li>财务管理</li></ul><p>通过角色分配不同的菜单，进入对应的角色页面</p><h1 id="知识库"><a href="#知识库" class="headerlink" title="知识库"></a>知识库</h1><p>知识库分页用户查看页面和后台页面</p><ul><li>后台</li></ul><ul><li>首页</li><li>标准管理<ul><li>全部标准</li><li>录入标准</li><li>分类</li><li>回收站</li></ul></li></ul><ul><li>查看页面<br>主要功能</li></ul><ul><li>查看后台增加的标准</li><li>查看pdf<em>这里有个查看pdf并且不让下载打印，使用到pdf.js，然后再插件里面通过js控制不让打印</em><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>      <span class="token comment">// function stop() &#123;</span>      <span class="token comment">//   return false;</span>      <span class="token comment">// &#125;</span>      <span class="token comment">// document.oncontextmenu = stop;</span>      <span class="token keyword">const</span> <span class="token function-variable function">disabled</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// console.log('禁止脚本，运行成功');</span>        <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>          rightKey<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否开启右键菜单</span>          controller<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否开启控制台</span>          print<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否允许打印</span>          savePage<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否允许 ctrl + s 保存网页 乌发禁用菜单保存</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">loadStyleString</span><span class="token punctuation">(</span><span class="token parameter">cssText</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">var</span> style <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"style"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          style<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"text/css"</span><span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// firefox、safari、chrome和Opera</span>            style<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>cssText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// IE早期的浏览器 ,需要使用style元素的stylesheet属性的cssText属性</span>            style<span class="token punctuation">.</span>styleSheet<span class="token punctuation">.</span>cssText <span class="token operator">=</span> cssText<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// disabeld</span>        <span class="token comment">// 禁用部分功能</span>        <span class="token comment">// 右键禁用</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">.</span>rightKey<span class="token punctuation">)</span> document<span class="token punctuation">.</span><span class="token function-variable function">oncontextmenu</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">// 打印</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">.</span>print<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> cssIndex <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token operator">...</span>document<span class="token punctuation">.</span>styleSheets<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>href <span class="token operator">==</span> <span class="token keyword">null</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 禁止打印 添加媒体查询 css 打印时隐藏所有内容</span>          <span class="token function">loadStyleString</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">                @media print &#123;                    body &#123;                        display: none;                    &#125;                    html::after &#123;                        content: "禁止打印!";                        position: absolute;                        top: 0;                        left: 0;                        width: 100%;                        height: 100%;                        display: flex;                        align-items: center;                        justify-content: center;                        font-size: 80px;                        letter-spacing: 15px;                        color: brown;                    &#125;                &#125;            </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 禁用 ctrl + s 和 F12 控制台</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>          <span class="token string">"keydown"</span><span class="token punctuation">,</span>          <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode <span class="token operator">==</span> <span class="token number">123</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>config<span class="token punctuation">.</span>controller<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>              <span class="token comment">// alert('禁止打开控制台')</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//可以判断是不是mac，如果是mac,ctrl变为花键</span>            <span class="token comment">//event.preventDefault() 方法阻止元素发生默认的行为。</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>              e<span class="token punctuation">.</span>keyCode <span class="token operator">==</span> <span class="token number">83</span> <span class="token operator">&amp;&amp;</span>              <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>platform<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">"Mac"</span><span class="token punctuation">)</span> <span class="token operator">?</span> e<span class="token punctuation">.</span>metaKey <span class="token operator">:</span> e<span class="token punctuation">.</span>ctrlKey<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>              <span class="token operator">!</span>config<span class="token punctuation">.</span>savePage            <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>              <span class="token comment">// Process event...</span>              <span class="token comment">// alert('禁止保存网页')</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token boolean">false</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 控制台</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">.</span>controller<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">var</span> threshold <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>          <span class="token keyword">var</span> widthThreshold <span class="token operator">=</span>            window<span class="token punctuation">.</span>outerWidth <span class="token operator">-</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">></span> threshold<span class="token punctuation">;</span>          <span class="token keyword">var</span> heightThreshold <span class="token operator">=</span>            window<span class="token punctuation">.</span>outerHeight <span class="token operator">-</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">></span> threshold<span class="token punctuation">;</span>          <span class="token keyword">function</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">loadStyleString</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">                        body &#123;                            display: none;                        &#125;                        html::after &#123;                            content: "请关闭控台，并F5重新刷新页面!";                            position: absolute;                            top: 0;                            left: 0;                            width: 100%;                            height: 100%;                            display: flex;                            align-items: center;                            justify-content: center;                            font-size: 50px;                            letter-spacing: 15px;                            color: brown;                        &#125;                </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">//</span>          <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">x</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>            <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token punctuation">;</span>            re<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>widthThreshold <span class="token operator">||</span> heightThreshold<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"load"</span><span class="token punctuation">,</span> disabled<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="信用平台"><a href="#信用平台" class="headerlink" title="信用平台"></a>信用平台</h1><p>主要就是增删改，上传一些企业用户的基础信息</p><h1 id="项目感受"><a href="#项目感受" class="headerlink" title="项目感受"></a>项目感受</h1><p>还是比较简单的项目，以后还是想挑战难一点的东西。不想再写业务逻辑了。。。。。。只接触到dpf.js禁止打印一个新东西</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">reolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token function">reolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用技术&quot;&gt;&lt;a href=&quot;#使用技术&quot; class=&quot;headerlink&quot; title=&quot;使用技术&quot;&gt;&lt;/a&gt;使用技术&lt;/h1&gt;&lt;p&gt;vue2.0 + element + axios + vue-router + vuex + pdf.js&lt;/p&gt;
&lt;h1 </summary>
      
    
    
    
    
    <category term="项目总结" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>管理系统的菜单和路由</title>
    <link href="http://example.com/2022/04/22/%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%8F%9C%E5%8D%95%E5%92%8C%E8%B7%AF%E7%94%B1/"/>
    <id>http://example.com/2022/04/22/%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%8F%9C%E5%8D%95%E5%92%8C%E8%B7%AF%E7%94%B1/</id>
    <published>2022-04-21T16:00:00.000Z</published>
    <updated>2022-06-09T07:36:53.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端菜单和路由"><a href="#前端菜单和路由" class="headerlink" title="前端菜单和路由"></a>前端菜单和路由</h1><h2 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h2><ol><li>直接前端写死菜单</li><li>根据路由来渲染</li></ol><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol><li>前端直接写死</li><li>后端返回</li></ol><h2 id="根据路由渲染的菜单怎么区分哪些是菜单"><a href="#根据路由渲染的菜单怎么区分哪些是菜单" class="headerlink" title="根据路由渲染的菜单怎么区分哪些是菜单"></a>根据路由渲染的菜单怎么区分哪些是菜单</h2><h3 id="前端直接写死"><a href="#前端直接写死" class="headerlink" title="前端直接写死"></a>前端直接写死</h3><p>在写路由的时候可以加上属性 hidden: true<br>如果 hidden是true的时候我们就不把这个路由显示为菜单</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">'/enterprise'</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> Layout<span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'enterprise'</span><span class="token punctuation">,</span>    meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">'企业管理'</span><span class="token punctuation">,</span> icon<span class="token operator">:</span> <span class="token string">'product'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>      path<span class="token operator">:</span> <span class="token string">'information'</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">'information'</span><span class="token punctuation">,</span>      <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/enterprise/information'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">'企业信息'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      hidden<span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      path<span class="token operator">:</span> <span class="token string">'detail'</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">'detail'</span><span class="token punctuation">,</span>      <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/enterprise/detail'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">'新增企业'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      hidden<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="后端返回（大多数情况也后端返回的）"><a href="#后端返回（大多数情况也后端返回的）" class="headerlink" title="后端返回（大多数情况也后端返回的）"></a>后端返回（大多数情况也后端返回的）</h3><ol><li>后端返回的话就会有个菜单管理，我们可以新增菜单和配置菜单的地址和我们前端组件的相对地址</li><li>后端返回的数据也有两种格式（1.直接返回菜单树 2.返回的是一维数组，这时候我们需要根据id和pid的关系处理成菜单树）</li><li>需要使用递归生成路由表<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 处理路由</span><span class="token keyword">const</span> <span class="token function-variable function">loadView</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 路由懒加载</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">@/views</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span> resolve<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 这个方法返回的结果是一个路由表  跟你手写的路由表是一样的  我这里删除了一些其他的逻辑  只留了主要逻辑  不能拿到其他项目使用!!!</span><span class="token keyword">function</span> <span class="token function">settingUpDynamicRouting</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>extend<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 这里根据type === 1 来判断是布局组件还是布局页面下的二级路由 （每个项目判断的方式都不一样，看你们公司怎么判断，而且每个项目也都不一样，你明白原理就行）</span>        obj<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token function">settingUpDynamicRouting</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span>        obj<span class="token punctuation">.</span>component <span class="token operator">=</span> Layout <span class="token comment">// Layout这个是布局组件，你也可以理解为一级路由</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>extend<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// type === 2  是二级路由，就是布局页面下展示的页面</span>        obj<span class="token punctuation">.</span>component <span class="token operator">=</span> <span class="token function">loadView</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>extend<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token comment">// loadView()  通过这个方法动态获取组件</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token comment">// 最后需要通过router.addRoutes()方法把我们要添加的路由加进去。  （这句话可以不管：这里是我们现在常用的vue-router的方法  最新版本的好像是改名字了  但是用法是一样的）</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">// async 你能理解的话就看，要是不懂的话就不管。这个也可以不要，可以后面学学</span>  <span class="token keyword">const</span> hasToken <span class="token operator">=</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>hasToken<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 登录了</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>menuList<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 有路由信息，我这里请求的时候也存到了vuex，因为vuex里面的数据刷新以后就没有了，所以刷新页面以后是会重新请求的</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 没有路由信息，就重新去请求</span>        store          <span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'user/getMenu'</span><span class="token punctuation">,</span> userInfo<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token comment">// 处理路由数据的方法我放到vuex里面去做了，所以这个方法返回的是直接可以使用的路由表</span>          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 获取获取菜单</span>            router<span class="token punctuation">.</span><span class="token function">addRoutes</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// 动态添加可访问路由表。 （router除了可以添加路由表，也有删除路由的方法，这些东西平常你多看文档）</span>            <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>to<span class="token punctuation">,</span> replace<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 路由添加以后进入要去的页面</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>             <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">'/login'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 请求失败的话去登录页面。我这里让用户去登录页面了，因为大部分是因为token过期，但是这个做其实不太好，应该在请求响应拦截器做这件事</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">// 没登录</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>whiteList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// whiteList这个是路由的白名单，如登录页面，注册页面等不需要登录能够直接进去的</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 进入页面</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 否则就跳到到登录页面</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/login?redirect=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>to<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>动态路由的菜单渲染部分是一样的 根据hidden来判断要显示哪些菜单按钮</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端菜单和路由&quot;&gt;&lt;a href=&quot;#前端菜单和路由&quot; class=&quot;headerlink&quot; title=&quot;前端菜单和路由&quot;&gt;&lt;/a&gt;前端菜单和路由&lt;/h1&gt;&lt;h2 id=&quot;菜单&quot;&gt;&lt;a href=&quot;#菜单&quot; class=&quot;headerlink&quot; title=&quot;菜</summary>
      
    
    
    
    
    <category term="管理系统" scheme="http://example.com/tags/%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>关于面试</title>
    <link href="http://example.com/2022/03/15/%E5%85%B3%E4%BA%8E%E9%9D%A2%E8%AF%95/"/>
    <id>http://example.com/2022/03/15/%E5%85%B3%E4%BA%8E%E9%9D%A2%E8%AF%95/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-03-15T08:56:06.351Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面试注意事项"><a href="#面试注意事项" class="headerlink" title="面试注意事项"></a>面试注意事项</h1><ol><li>要写清楚自己会哪些东西</li><li>要把上家公司描述清楚，做什么业务的，项目来源于什么</li><li>工作经历，尽量详细，具体到做了什么项目，用了什么技术</li><li>项目要写清楚项目交付结果或者上线反应</li><li>注意写的时候不要有读的有问题的介绍</li><li>投简历可以多投，投放时间尽量在上班时间</li><li>面试可以多接受，去不了的可以要求视频面或者电话面</li><li>面试过程中不要紧张，把自己当做一个工作很多年的工作者，听清楚面试官说的话。没听清或者不懂的地方可以再问面试官</li><li>面试官问一个问题以后如果你知道后面涉及到的问题尽量往深了说、尽量详细、逻辑要清楚。</li><li>如果面试官问的问题确实不会，就说这方面的东西没有用到过(但是不要是非常常见的知识点哈),不太清楚,稍后会去了解。</li><li>面试前要多刷题，如果面试官问你平常怎么学习，你就说看文档，买课看视频都可以。</li><li>面试完成以后要立即把面试官问的问题记录下来，并且找到答案。然后总结一下面试</li></ol><h1 id="我面试的套路"><a href="#我面试的套路" class="headerlink" title="我面试的套路"></a>我面试的套路</h1><blockquote><p>我会让面试者先自我介绍,然后根据他的介绍引出问题。</p></blockquote><p>要求：</p><ol><li>个人信息</li><li>上家公司是做什么的</li><li>团队的组成和运作方式</li><li>掌握哪些技术</li><li>讲一个简历上的项目<br>（项目是做什么的，怎么搭建，用了什么技术以及使用目的，项目是否交付或者上线，评价如何，个人对这个项目的评价或者感受，学习到了什么。。。）</li></ol><p>  <strong>如果面试者介绍的比较简单我会主动去问</strong><br>6. 针对他自我介绍的项目具体问怎么使用某一个技术。<br>    如:<br>      1、怎么使用router,有哪些钩子函数，怎么使用，什么场景下使用。…<br>      2、响应式原理。。。<br>7. css方面的 flex px/rem/em什么意思以及比例的计算（我个人面试css问的比较少）<br>8. js方面</p><ul><li>js数据类型 -&gt; 基础数据类型和引用数据类型的区别 -&gt; 怎么解决引用数据类型赋值问题 -&gt; 深拷贝和浅拷贝的区别 -&gt; 使用JSON深拷贝的弊端 -&gt; 手写深拷贝方法的逻辑</li><li>js类型转换 -&gt; 哪些操作造成类型转换 -&gt; 怎么判断类型(判断的方法很多，如果你说typeof，就会问你他的弊端，最好的方式是Object.prototype.toString.call([]))</li><li>作用域 -&gt; 查找方式 -&gt; 闭包 -&gt; 闭包会造成什么 -&gt; 为什么会这样 -&gt;js垃圾回收机制 -&gt; 标记清除/引用计数的逻辑 -&gt; 怎么解决闭包中的变量无法释放</li><li>原型链 -&gt; 查找方式 -&gt; <strong>proto</strong> 与 prototype 的区别</li><li>es6 -&gt; 用过哪些特性 -&gt; let、const、var的区别 -&gt; 箭头函数与普通函数的区别</li><li>怎么创建一个原生请求(new XMLHttpRequest()) -&gt; 怎么封装一个通用请求</li><li>js执行机制 -&gt; 事件循环 -&gt; 微任务宏任务 -&gt; 哪些是微任务哪些是宏任务</li><li>Promise怎么使用、async\await怎么使用 -&gt; async\await实现原理 -&gt; 怎么在async\await中抛出错误</li></ul><ol start="9"><li>再就是vue或者react上的问题了，这个问的太广了。可以是使用层面上，也可以是源码级别的。这种就网上看看常见的记住，或者直接背下来</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;面试注意事项&quot;&gt;&lt;a href=&quot;#面试注意事项&quot; class=&quot;headerlink&quot; title=&quot;面试注意事项&quot;&gt;&lt;/a&gt;面试注意事项&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;要写清楚自己会哪些东西&lt;/li&gt;
&lt;li&gt;要把上家公司描述清楚，做什么业务的，项目来源于什么&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>网络基础</title>
    <link href="http://example.com/2022/01/26/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/01/26/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</id>
    <published>2022-01-25T16:00:00.000Z</published>
    <updated>2022-02-11T03:46:34.003Z</updated>
    
    <content type="html"><![CDATA[<p>网络数据传输方式<br>一层一层的打包 然后一层一层的解析<br><img src="/imgs/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E4%BC%A0%E8%BE%93.png" alt="image text"></p><ol><li>发送者的数据从应用层到传输层 会增加TCP Header (端口)</li><li>然后到网络层 会增加IP header (IP地址)</li><li>然后到链路层 会增加以太网 Header (MAC地址) 通过传输介质到接收者 </li><li>以太网发现有个 以太网的Header 就把这个包给对应的MAC地址</li><li>然后传到网络层 IP协议解析这个包 找到对应的IP地址 发送过去</li><li>然后传到传输层 解析到端口  传给对应端口的应用</li></ol><h1 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h1><p><img src="/imgs/%E4%BB%A5%E5%A4%AA%E7%BD%91.png" alt="image text"></p><h2 id="网卡和MAC地址"><a href="#网卡和MAC地址" class="headerlink" title="网卡和MAC地址"></a>网卡和MAC地址</h2><p>MAC地址： 00-05-5D-E8-0F-A3<br>交换机就是根据MAC地址转发数据的</p><ol><li>电脑通过网卡连接网络</li><li>每块网卡有个厂商设定的MAC地址（又称物理地址）</li><li>这个地址是设备的唯一标识</li><li>网卡的MAC地址可以通过驱动改变（只要在同一个链路里面没有相同的话不会有影响）</li></ol><h2 id="以太网的Header"><a href="#以太网的Header" class="headerlink" title="以太网的Header"></a>以太网的Header</h2><ol><li>目标MAC地址（6字节）</li><li>源MAC地址（6字节）</li><li>类型 （2字节）</li><li>数据（46~1500字节）</li><li>FCS（4字节，帧检验序列）</li></ol><h1 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h1><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p><img src="/imgs/ip%E5%9C%B0%E5%9D%80.png" alt="image text"><br><img src="/imgs/%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81.png" alt="image text"></p><ol><li>又32位二进制数组成</li><li>分为<em>网络标识</em>和<em>主机标识</em>两部分</li><li><em>子网掩码</em>确定了32位里面哪些是主机标识哪些是网络标识<br>1为网络标识，0为主机标识</li></ol><h2 id="路由控制"><a href="#路由控制" class="headerlink" title="路由控制"></a>路由控制</h2><h3 id="在同一个网络下的数据传输："><a href="#在同一个网络下的数据传输：" class="headerlink" title="在同一个网络下的数据传输："></a>在同一个网络下的数据传输：</h3><p><img src="/imgs/ARP%E5%B9%BF%E6%92%AD%E6%9F%A5%E8%AF%A2IP%E5%AF%B9%E5%BA%94%E7%9A%84MAC%E5%9C%B0%E5%9D%801.png" alt="alt"><br><img src="/imgs/ARP%E5%93%8D%E5%BA%94.png" alt="alt"></p><ol><li>应用层192.168.0.1 给 192.168.0.1 发送信息</li><li>传输层 增加TCP Header 记录端口： from 80 to 80 </li><li>网络层 增加IP Header 记录ip: from 192.168.0.1 to 192.168.0.2</li><li>以太网 增加以太网 Header from 00-05-5D-E8-A3 to ???<br>这个时候以太网知道发送者的MAC地址，同时在MAC地址表记录下来，但是不知道接收者192.168.0.2 的MAC地址</li><li>这时候会发一个ARP广播 对应的信息有发送者的ip和MAC地址接收者的IP地址和<strong>MAC（FFFFFF）</strong> </li><li>交换机收到目标MAC地址为FFFFFF 会发送一个广播给连接交换机的所有电脑 查询对目标IP对应电脑MAC地址</li><li>当目标电脑收到信息以后会将MAC地址告诉发送者，同时也会经过交换机，交换机会在MAC地址表记录下来</li><li>知道目标的MAC地址以后就可以将MAC地址补到之前缺失的MAC地址上</li><li>最后一层层解析数据就到了192.168.0.2的电脑上</li></ol><h3 id="网络之间的数据传输"><a href="#网络之间的数据传输" class="headerlink" title="网络之间的数据传输"></a>网络之间的数据传输</h3><p><img src="/imgs/%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92%E8%BF%87%E7%A8%8B1.png" alt="alt"><br><img src="/imgs/%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%9302.png" alt="alt"></p><ol><li>将出数据从192.168.0.1 发送给 172.6.0.1 因为ip不是在同一个网段所以会发送给网关（192.168.0.254）</li><li>但是不知道网关的MAC地址，所以会发起ARP查询</li><li>然后收到网关的ARP响应，将MAC地址补上并且把数据发送给网关192.168.0.254）</li><li>网关收到192.168.0.1发来的数据，发现目标的IP地址也不是自己，然后查询路由表得知自己应该发送给路由器B 也就是192.168.1.254</li><li>然后再次发起ARP查询 找到192.168.1.254 MAC地址 并发送给过去</li><li>直到发送到路由器C，路由器C查询他自己的路由表发现，这个网段是自己直连的，然后查询ARP缓存里面有没有IP对应的MAC地址，只要172.6.0.1往外面发过数据，那么他的MAC地址就会被缓存下来，如果没有发送过那就发起ARP广播查询172.6.0.1MAC地址，拿到地址以后将目标的MAC地址更改为172.6.0.1MAC地址，将数据发送过去。</li><li>经过网络层和传输层172.6.0.1拿到最终数据</li></ol><h1 id="IP分片和重组"><a href="#IP分片和重组" class="headerlink" title="IP分片和重组"></a>IP分片和重组</h1><ol><li>不同的网络上最大传输单元（MTU）的大小是不一样的</li><li>IP协议这是网络的上层封装，它对此进行了抽象</li><li>路径发现MTU会在发送数据帧超过网络MTU时自动调整并重发数据</li><li>IP报文由路由器进行分片，目标主机进行重组</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;网络数据传输方式&lt;br&gt;一层一层的打包 然后一层一层的解析&lt;br&gt;&lt;img src=&quot;/imgs/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E4%BC%A0%E8%BE%93.png&quot; alt=&quot;image text&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;</summary>
      
    
    
    
    
    <category term="网络基础" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>前端常见面试题</title>
    <link href="http://example.com/2022/01/24/%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://example.com/2022/01/24/%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2022-01-23T16:00:00.000Z</published>
    <updated>2022-03-15T07:30:54.424Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h1><h2 id="单页面应用（SPA）"><a href="#单页面应用（SPA）" class="headerlink" title="单页面应用（SPA）"></a>单页面应用（SPA）</h2><p>  是加载单个 HTML 页面并在用户与应用程序交互时动态更新该页面的。它将所有的活动局限于一个 Web 页面中，仅在该 Web 页面初始化时加载相应的 HTML 、 JavaScript 、 CSS 。一旦页面加载完成， SPA 不会因为用户的操作而进行页面的重新加载或跳转，而是利用 JavaScript 动态的变换 HTML（采用的是 div 切换显示和隐藏），从而实现UI与用户的交互。在 SPA 应用中，应用加载之后就不会再有整页刷新。相反，展示逻辑预先加载，并有赖于内容Region（区域）中的视图切换来展示内容。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>有良好的交互体验<br>能提升页面切换体验，用户在访问应用页面是不会频繁的去切换浏览页面，从而避免了页面的重新加载；    2. 前后端分离开发<br>单页Web应用可以和 RESTful 规约一起使用，通过 REST API 提供接口数据，并使用 Ajax 异步获取，这样有助于分离客户端和服务器端工作。更进一步，可以在客户端也可以分解为静态页面和页面交互两个部分；    3. 减轻服务器压力<br>服务器只用出数据就可以，不用管展示逻辑和页面合成，吞吐能力会提高几倍；    4. 共用一套后端程序代码<br>不用修改后端程序代码就可以同时用于 Web 界面、手机、平板等多种客户端；<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3></li><li>SEO难度较高<br>由于所有的内容都在一个页面中动态替换显示，所以在SEO上其有着天然的弱势，所以如果你的站点对SEO很看重，且要用单页应用，那么就做些静态页面给搜索引擎用吧；</li><li>前进、后退管理<br>由于单页Web应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理，当然此问题也有解决方案，比如利用URI中的散列+iframe实现；</li><li>初次加载耗时多<br>为实现单页Web应用功能及显示效果，需要在加载页面的时候将JavaScript、CSS统一加载，部分页面可以在需要的时候加载。所以必须对JavaScript及CSS代码进行合并压缩处理；<h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3>在SPA中，通常一开始就会加载所有必需的代码（HTML，JavaScript和CSS），有时候考虑到首屏加载太慢会按需加载，按需加载就是按照当前呈现的不同页面加载不同的文件，而不是最开始就把所有文件都加载出来，从而避免首屏加载很慢。<br>当首屏加载完毕后，设备&amp;网络处于空闲状态，可以对其他路由组件进行预加载，以便提升页面切换性能。<br>根据路由拆分减少初始加载体积,利用异步加载方式，在路由注册时提供异步拉取组件的方法，仅在需要进入对应路由时，对应组件才会被加载进来。    * 初次加载的速度<br> 单页应用的第一页加载会比基于服务器的应用慢。这是因为首次加载必须先拿到框架和应用程序的代码，再在浏览器中呈现所需的视图。基于服务器的应用程序只需将所需的HTML推送到浏览器，从而减少了延迟和下载用时。    * 加快页面加载速度<br> 有一些方法可以加快单页应用的初次加载速度，比如采用多项缓存措施、需要时再加载某些模块（懒加载）。    * 页面生命周期<br> 单页应用在初始页面加载时被完全加载，然后页面区域被替换或更新为按需从服务器加载的新页面片段。为避免过度下载未使用的功能，单页应用通常会逐渐下载更多内容，如所需要的功能、页面的一小块，或者完整的一页。</li></ol><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><h2 id="vue的响应式原理"><a href="#vue的响应式原理" class="headerlink" title="vue的响应式原理"></a>vue的响应式原理</h2><h2 id="data为什么是函数"><a href="#data为什么是函数" class="headerlink" title="data为什么是函数"></a>data为什么是函数</h2><h2 id="v-if-和-v-show-的区别"><a href="#v-if-和-v-show-的区别" class="headerlink" title="v-if 和 v-show 的区别"></a>v-if 和 v-show 的区别</h2><h2 id="v-mode-原理"><a href="#v-mode-原理" class="headerlink" title="v-mode 原理"></a>v-mode 原理</h2><h2 id="computed、watch、method"><a href="#computed、watch、method" class="headerlink" title="computed、watch、method"></a>computed、watch、method</h2><h2 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h2><h2 id="vue组件通讯"><a href="#vue组件通讯" class="headerlink" title="vue组件通讯"></a>vue组件通讯</h2><h2 id="vue单向数据流"><a href="#vue单向数据流" class="headerlink" title="vue单向数据流"></a>vue单向数据流</h2><h2 id="keep-alive组件"><a href="#keep-alive组件" class="headerlink" title="keep-alive组件"></a>keep-alive组件</h2><h2 id="slot-插槽"><a href="#slot-插槽" class="headerlink" title="slot 插槽"></a>slot 插槽</h2><h2 id="vue检测数组或对象的变化"><a href="#vue检测数组或对象的变化" class="headerlink" title="vue检测数组或对象的变化"></a>vue检测数组或对象的变化</h2><h2 id="虚拟dom"><a href="#虚拟dom" class="headerlink" title="虚拟dom"></a>虚拟dom</h2><h2 id="nextTick的原理"><a href="#nextTick的原理" class="headerlink" title="nextTick的原理"></a>nextTick的原理</h2><h2 id="vueX"><a href="#vueX" class="headerlink" title="vueX"></a>vueX</h2><h2 id="vue-rouer的两种模式"><a href="#vue-rouer的两种模式" class="headerlink" title="vue-rouer的两种模式"></a>vue-rouer的两种模式</h2><h2 id="vue-router有哪几种导航钩子"><a href="#vue-router有哪几种导航钩子" class="headerlink" title="vue-router有哪几种导航钩子"></a>vue-router有哪几种导航钩子</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vue&quot;&gt;&lt;a href=&quot;#vue&quot; class=&quot;headerlink&quot; title=&quot;vue&quot;&gt;&lt;/a&gt;vue&lt;/h1&gt;&lt;h2 id=&quot;单页面应用（SPA）&quot;&gt;&lt;a href=&quot;#单页面应用（SPA）&quot; class=&quot;headerlink&quot; title=&quot;单</summary>
      
    
    
    
    
    <category term="面试题" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>docker</title>
    <link href="http://example.com/2022/01/23/docker/"/>
    <id>http://example.com/2022/01/23/docker/</id>
    <published>2022-01-22T16:00:00.000Z</published>
    <updated>2022-01-23T07:02:29.800Z</updated>
    
    <content type="html"><![CDATA[<p>docke常用命令：</p><table><thead><tr><th>命令</th><th>意义</th></tr></thead><tbody><tr><td>docker pull &lt;镜像名称&gt;</td><td>获取镜像</td></tr><tr><td>docker run -it &lt;镜像名称&gt; /bin/bash</td><td>启动容器</td></tr><tr><td>exit</td><td>退出终端</td></tr><tr><td>docker ps -a</td><td>查看所有的容器</td></tr><tr><td>docker rm -f &lt;容器id&gt;</td><td>删除容器</td></tr><tr><td>docker start</td><td>docker start b750bbbcfd88</td></tr><tr><td>docker run -itd –name ubuntu-test ubuntu /bin/bash</td><td>后台运行</td></tr><tr><td>docker stop &lt;容器 ID&gt;</td><td>停止一个容器</td></tr><tr><td>docker restart &lt;容器 ID&gt;</td><td>重启一个容器</td></tr><tr><td>docker attach &lt;容器 ID&gt;</td><td>退出容器（会停止）</td></tr><tr><td>docker exec -it &lt;容器 ID&gt; /bin/bash</td><td>进入出容器（不会停止）</td></tr><tr><td>exit</td><td>退出容器</td></tr><tr><td>docker export &lt;容器 ID&gt; &gt; &lt;容器名称&gt;.tar</td><td>导出容器</td></tr><tr><td>cat docker/ubuntu.tar</td><td>docker import - test/ubuntu:v1</td></tr><tr><td>docker import <a href="http://example.com/exampleimage.tgz">http://example.com/exampleimage.tgz</a> example/imagerepo</td><td>通过地址导入</td></tr><tr><td>docker port  &lt;容器id或者名称&gt;</td><td>查看容器端口的映射情况</td></tr><tr><td>docker logs -f bf08b7f2cd89</td><td>docker logs [ID或者名字] 可以查看容器内部的标准输出</td></tr><tr><td>docker top &lt;容器名称&gt;</td><td>查看容器内部运行的进程</td></tr><tr><td>docker search httpd</td><td>查找镜像</td></tr><tr><td>docker rmi hello-world</td><td>删除镜像</td></tr><tr><td>docker images</td><td>查看当前的镜像列表</td></tr><tr><td>docker network create &lt;名称&gt;</td><td>创建一个网络</td></tr><tr><td>docker network ls</td><td>查看网络</td></tr><tr><td>docker network rm &lt;名称&gt;</td><td>断开和移除网络</td></tr><tr><td>docker network inspect &lt;名称&gt;</td><td>查看网络信息</td></tr><tr><td>docker cp /www/runoob 96f7f14e99ab:/www/</td><td>将主机/www/runoob目录拷贝到容器96f7f14e99ab的/www目录下</td></tr></tbody></table><h1 id="使用nginx"><a href="#使用nginx" class="headerlink" title="使用nginx"></a>使用nginx</h1><p>江橙的笔记：</p><blockquote><p>首先在你的服务器上面创建一个工作目录 例如以下创建的是目录为 dockerData<br>systemctl start docker //启动docker<br>systemctl enable docker //设置为开机启动<br>docker version 验证安装是否成功(有client和service两部分表示docker安装启动都成功了<br>docker network create my_net 创建一个网络</p></blockquote><blockquote><p>docker工作区和宿主机目录挂载了之后，修改的文件会进行同步，一般来说只需要修改宿主机的文件就行了，不需要修改工作区<br>修改宿主机的文件需要重启容器才会同步过去，修改工作区(容器)会立即同步到宿主机里面<br>删除容器不会删除宿主机的挂载目录的数据</p></blockquote><blockquote><p>1、拉取镜像 去dockerhub拉取合适的版本即可 docker pull nginx:1.20.1-alpine<br>2、创建配置目录和项目目录 -v /dockerData/nginx:/etc/nginx <br>3、跑不带映射的容器 docker run -itd –name nginx 7f18bdc92ca5(镜像id)<br>4、docker cp nginx:/etc/nginx/ /dockerData/nginx/ | docker exec -it nginx sh(目录为容器的目录)<br>5、删除容器 docker rm -f ngxin(指的是容器名) 因为删除容器是不会删除宿主机的文件的，但是更新容器里面的挂载目录文件时，会更新宿主机文件，更新宿主机文件也会更新容器文件(需重启容器)</p></blockquote><pre class="line-numbers language-none"><code class="language-none"># &#x2F;dockerData&#x2F;nginx&#x2F;www:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html \ 挂载目录地址# &#x2F;dockerData&#x2F;nginx:&#x2F;etc&#x2F;nginx \  挂载nginx配置地址# &#x2F;dockerData&#x2F;nginx&#x2F;log:var&#x2F;log&#x2F;nginx \  挂载log日志地址docker run -itd --name nginx -p 80:80 -p 443:443 \ -v &#x2F;dockerData&#x2F;nginx&#x2F;www:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html \ -v &#x2F;dockerData&#x2F;nginx:&#x2F;etc&#x2F;nginx \ -v &#x2F;dockerData&#x2F;nginx&#x2F;log:&#x2F;var&#x2F;log&#x2F;nginx \ --network my_net --network-alias nginx 7f18bdc92ca5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>配置nginx以后需要重新启动<br>docker stop nginx</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;docke常用命令：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;意义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;docker pull &amp;lt;镜像名称&amp;gt;&lt;/td&gt;
&lt;td&gt;获取镜像&lt;/td&gt;
&lt;/</summary>
      
    
    
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>nginx学习</title>
    <link href="http://example.com/2022/01/21/%E6%9C%8D%E5%8A%A1%E5%99%A8-nginx/"/>
    <id>http://example.com/2022/01/21/%E6%9C%8D%E5%8A%A1%E5%99%A8-nginx/</id>
    <published>2022-01-20T16:00:00.000Z</published>
    <updated>2022-01-21T09:56:34.989Z</updated>
    
    <content type="html"><![CDATA[<p>主要配置 conf<br>更改配置以后需要重启</p><blockquote><p>docker restart nginx</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">server <span class="token punctuation">&#123;</span>  <span class="token comment">// 根据你的需求改变此端口</span>  listen <span class="token number">80</span><span class="token punctuation">;</span>  <span class="token comment">//也可以是1.2.3.4:80的形式</span>  <span class="token comment">// 多个主机名可以用空格隔开，当然这个信息也是需要按照你的需求而改变的。</span>  server_name  star<span class="token punctuation">.</span>yourdomain<span class="token punctuation">.</span>com <span class="token operator">*</span><span class="token punctuation">.</span>yourdomain<span class="token punctuation">.</span>com www<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">.</span>yourdomain<span class="token punctuation">.</span>com<span class="token punctuation">;</span>  <span class="token comment">//或者可以使用：_ * (具体内容参见本维基其他页面)</span>  root <span class="token operator">/</span><span class="token constant">PATH</span><span class="token operator">/</span><span class="token constant">TO</span><span class="token operator">/</span><span class="token constant">WEBROOT</span><span class="token operator">/</span>$host<span class="token punctuation">;</span>  alias   error_page  <span class="token number">404</span>     <span class="token comment">// http://yourdomain.com/errors/404.html;</span>  access_log  logs<span class="token operator">/</span>star<span class="token punctuation">.</span>yourdomain<span class="token punctuation">.</span>com<span class="token punctuation">.</span>access<span class="token punctuation">.</span>log<span class="token punctuation">;</span>  location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>    root   <span class="token operator">/</span><span class="token constant">PATH</span><span class="token operator">/</span><span class="token constant">TO</span><span class="token operator">/</span><span class="token constant">WEBROOT</span><span class="token operator">/</span>$host<span class="token operator">/</span><span class="token punctuation">;</span>  <span class="token comment">// 项目的存放地址</span>    index  index<span class="token punctuation">.</span>html<span class="token punctuation">;</span> <span class="token comment">// 打开的根目录</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 直接支持静态文件 (从配置上看来不是直接支持啊)</span>  location <span class="token operator">~</span><span class="token operator">*</span> <span class="token operator">^</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token punctuation">.</span><span class="token punctuation">(</span>jpg<span class="token operator">|</span>jpeg<span class="token operator">|</span>gif<span class="token operator">|</span>css<span class="token operator">|</span>png<span class="token operator">|</span>js<span class="token operator">|</span>ico<span class="token operator">|</span>html<span class="token punctuation">)</span>$ <span class="token punctuation">&#123;</span>    access_log        off<span class="token punctuation">;</span>    expires           <span class="token number">30</span>d<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  location <span class="token operator">~</span> <span class="token punctuation">.</span>php$ <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果需要，你可以为不同的FCGI进程设置不同的服务信息</span>    fastcgi_pass   <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token constant">YOURFCGIPORTHERE</span><span class="token punctuation">;</span>    fastcgi_index  index<span class="token punctuation">.</span>php<span class="token punctuation">;</span>    fastcgi_param  <span class="token constant">SCRIPT_FILENAME</span>  <span class="token operator">/</span><span class="token constant">PATH</span><span class="token operator">/</span><span class="token constant">TO</span><span class="token operator">/</span><span class="token constant">WEBROOT</span><span class="token operator">/</span>$host<span class="token operator">/</span>$fastcgi_script_name<span class="token punctuation">;</span>    fastcgi_param  <span class="token constant">QUERY_STRING</span>     $query_string<span class="token punctuation">;</span>    fastcgi_param  <span class="token constant">REQUEST_METHOD</span>   $request_method<span class="token punctuation">;</span>    fastcgi_param  <span class="token constant">CONTENT_TYPE</span>     $content_type<span class="token punctuation">;</span>    fastcgi_param  <span class="token constant">CONTENT_LENGTH</span>   $content_length<span class="token punctuation">;</span>    fastcgi_intercept_errors on<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  location <span class="token operator">~</span> <span class="token operator">/</span>\<span class="token punctuation">.</span>ht <span class="token punctuation">&#123;</span>    deny  all<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;主要配置 conf&lt;br&gt;更改配置以后需要重启&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;docker restart nginx&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;line-numbers language-js&quot; data-language=&quot;j</summary>
      
    
    
    
    
    <category term="服务器" scheme="http://example.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>extends和implements区别</title>
    <link href="http://example.com/2022/01/10/extends%E5%92%8Cimplements%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2022/01/10/extends%E5%92%8Cimplements%E5%8C%BA%E5%88%AB/</id>
    <published>2022-01-09T16:00:00.000Z</published>
    <updated>2022-01-10T08:27:01.574Z</updated>
    
    <content type="html"><![CDATA[<h1 id="extends与implements的不同"><a href="#extends与implements的不同" class="headerlink" title="extends与implements的不同"></a>extends与implements的不同</h1><ol><li>在类的声明中，通过关键字extends来创建一个类的子类。<br>一个类通过关键字implements声明自己使用一个或者多个接口。<br>extends 是继承某个类, 继承之后可以使用父类的方法, 也可以重写父类的方法;<br>implements 是实现多个接口, 接口的方法一般为空的, 必须重写才能使用 </li><li>extends是继承父类，只要那个类不是声明为final或者那个类定义为abstract的就能继承<br>Java中不支持多重继承，但是可以用接口 来实现，这样就要用到implements，继承只能继承一个类，<br>但implements可以实现多个接口，用逗号分开就行了 比如 ：<br>class A extends B implements C,D,E<br>接口实现的注意点： </li></ol><ul><li>实现一个接口就是要实现该接口的所有的方法(抽象类除外)。 </li><li>接口中的方法都是抽象的。  </li><li>多个无关的类可以实现同一个接口，一个类可以实现多个无关的接口。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;extends与implements的不同&quot;&gt;&lt;a href=&quot;#extends与implements的不同&quot; class=&quot;headerlink&quot; title=&quot;extends与implements的不同&quot;&gt;&lt;/a&gt;extends与implements的不同&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>vue3的使用方式</title>
    <link href="http://example.com/2022/01/06/vue3%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/01/06/vue3%E4%BD%BF%E7%94%A8/</id>
    <published>2022-01-05T16:00:00.000Z</published>
    <updated>2022-01-06T09:44:06.311Z</updated>
    
    <content type="html"><![CDATA[<p>vue3的使用方式</p><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"home"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 父子组件传值 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>son num<span class="token operator">=</span><span class="token string">"66"</span> name<span class="token operator">=</span><span class="token string">"trist"</span> <span class="token operator">:</span>age<span class="token operator">=</span><span class="token string">"age"</span> @baba<span class="token operator">=</span><span class="token string">"getSon"</span><span class="token operator">></span><span class="token operator">&lt;</span>a<span class="token operator">></span>我是插槽<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>son<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> son <span class="token keyword">from</span> <span class="token string">'./son.vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> reactive<span class="token punctuation">,</span> toRefs <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useRoute<span class="token punctuation">,</span> useRouter <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>son<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> ctx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 获取当前路由信息</span><span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 全局路由的实例</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'trist'</span><span class="token punctuation">,</span>age<span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>sex<span class="token operator">:</span> <span class="token string">'boy'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 监听子组件事件</span><span class="token keyword">const</span> <span class="token function-variable function">getSon</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token function">toRefs</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">,</span>getSon<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="＜script-setup＞语法糖"><a href="#＜script-setup＞语法糖" class="headerlink" title="＜script setup＞语法糖"></a>＜script setup＞语法糖</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div @click<span class="token operator">=</span><span class="token string">"log"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> msg <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>MyComponent <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token keyword">import</span> MyComponent <span class="token keyword">from</span> <span class="token string">'./MyComponent.vue'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token comment">// 变量</span><span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'Hello!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//响应式数据依然需要ref</span><span class="token comment">// 函数</span><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// &lt;script setup> 中可以使用顶层 await。结果代码会被编译成async setup()</span><span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/api/post/1</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=></span> r<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h1><p>跟react的类组件相似<br>可以跟装饰器一起使用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hello"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> msg <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span>h2 @click<span class="token operator">=</span><span class="token string">"(event) => setData('1', event)"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> flag <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>    <span class="token operator">&lt;</span>h2<span class="token operator">></span>initVar<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> initVar <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">...</span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Options<span class="token punctuation">,</span> Vue <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue-class-component"</span><span class="token punctuation">;</span>@<span class="token function">Options</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    msg<span class="token operator">:</span> String<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      flag<span class="token operator">:</span> <span class="token string">"这是一个欢迎组件"</span><span class="token punctuation">,</span>      initVar<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">&#123;</span>  msg<span class="token operator">!</span><span class="token operator">:</span> string<span class="token punctuation">;</span>  flag<span class="token operator">!</span><span class="token operator">:</span> string<span class="token punctuation">;</span>  initVar<span class="token operator">!</span><span class="token operator">:</span> number<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>initVar<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">setData</span><span class="token punctuation">(</span>value<span class="token operator">:</span> string<span class="token punctuation">,</span> event<span class="token operator">:</span> PointerEvent<span class="token punctuation">)</span><span class="token operator">:</span> boolean <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>initVar <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">+</span> value<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;vue3的使用方式&lt;/p&gt;
&lt;h1 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/a&gt;基本使用&lt;/h1&gt;&lt;pre class=&quot;line-numbers language-js&quot; data-langu</summary>
      
    
    
    
    
    <category term="vue3" scheme="http://example.com/tags/vue3/"/>
    
  </entry>
  
  <entry>
    <title>vue3学习</title>
    <link href="http://example.com/2022/01/05/vue2%E8%BF%9B%E9%98%B6vue3/"/>
    <id>http://example.com/2022/01/05/vue2%E8%BF%9B%E9%98%B6vue3/</id>
    <published>2022-01-04T16:00:00.000Z</published>
    <updated>2022-01-06T02:19:57.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue3与Vue2在应用中的区别"><a href="#Vue3与Vue2在应用中的区别" class="headerlink" title="Vue3与Vue2在应用中的区别"></a>Vue3与Vue2在应用中的区别</h1><ul><li>响应式数据在Vue3中变得更加灵活和友善。Vue2中 data 里没有定义的属性在后续无法正常的进行响应操作，必须通过 Vue.set 这个 API 向响应式对象中添加一个 property，并确保这个新 property 同样是响应式的，且触发视图更新。它必须用于向响应式对象上添加新 property，因为 Vue 无法探测普通的新增 property (比如 this.myObject.newProperty = ‘hi’); 然而在 Vue3 中我们可以通过引入 ref 来操作响应值。ref 是一个实例方法，接受一个内部值并返回一个响应式且可变的 ref 对象。ref 对象具有指向内部值的单个 property.value。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 0</span>count<span class="token punctuation">.</span>value<span class="token operator">++</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>Vue3 采用了 ES6的一项新特性：Proxy 来实现Vue3中数据响应式的设计。通过下面的伪代码我们可以对比一下：<pre class="line-numbers language-js" data-language="js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">definProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token string">'count'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token string">'count'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Object.defineProperty 要修改 data 中的属性必须要明确的知道 key 值（count）, Proxy 在使用中是读取或者设置data中任意的 key，所以不管是修改已有的属性还是新增属性，都可以实现响应式的要求。</p></blockquote></li></ul><h1 id="vue3使用"><a href="#vue3使用" class="headerlink" title="vue3使用"></a>vue3使用</h1><ul><li>关于生命周期钩子函数<table><thead><tr><th>vue2</th><th>vue3</th></tr></thead><tbody><tr><td>beforeCreate()</td><td>use setup()</td></tr><tr><td>created()</td><td>use setup()</td></tr><tr><td>beforeMount()</td><td>onBeforeMount</td></tr><tr><td>mounted()</td><td>onMounted</td></tr><tr><td>beforeUpdate()</td><td>onBeforeUpdate</td></tr><tr><td>updated()</td><td>onUpdated</td></tr><tr><td>beforeDestory()</td><td>onBeforeUnmount</td></tr><tr><td>destoryed()</td><td>onUnmounted</td></tr><tr><td>activated()</td><td>onActivated</td></tr><tr><td>deactivated()</td><td>onDeactivated</td></tr><tr><td>errorCaptured()</td><td>onErrorCaptured</td></tr><tr><td></td><td>onRenderTracked(新增) — DebuggerEvent 调试用</td></tr><tr><td></td><td>onRenderTriggered(新增) — DebuggerEvent 调试用</td></tr></tbody></table></li></ul><blockquote><p>Vue3中的钩子函数都在 setup() 中调用。</p></blockquote><ul><li><p>computed，watch 可直接调用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">const</span> double <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> count<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>watch 接收两个参数，第一个参数是监听的属性，多个属性可传入数组， 第二个参数是一个回调函数，回调函数有两个参数（newVal, oldVal）；当 watch 的第一个参数是一个数组时，newVal 与 oldVal 对应的也是数组形式，一一对应。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 监听count</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'newVal:'</span><span class="token punctuation">,</span> newVal<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'oldVal:'</span><span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 监听多个属性值</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'newVal:'</span><span class="token punctuation">,</span> newVal<span class="token punctuation">)</span> <span class="token comment">// 数组</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'oldVal:'</span><span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token comment">// 数组</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是需要监听定义在 reacitive 对象中的单一属性，需要通过函数返回值来进行监听。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> data<span class="token punctuation">.</span>count<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'newVal:'</span><span class="token punctuation">,</span> newVal<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'oldVal:'</span><span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Option API 与 Composition API</p><ul><li>vue 2.x 使用的是Option API 构建组件。一个组件的功能需要通过methods，computed，watch，data等属性和方法，共同处理页面逻辑。存在多个业务功能共同使用一个实例化new vue()<br>这种构建方式在业务逻辑复杂的大项目中，API比较分散，可能会存在分不清哪个方法对应哪个功能。项目的易读性、可复用性相对较差，耦合性较高。</li><li>vue 3.x 使用的是Composition API 构建组件。代码是根据逻辑功能来组织的，一个功能所定义的所有api会放在一起 （高内聚，低耦合），我们能快速的定位到这个功能所用到的所有API，提高代码可读性和可维护性</li></ul></li><li><p>setup函数是使用Composition API的入口</p><ul><li><p>在创建组件实例时，在初始组件解析之后调用setup。在生命周期方面，它在beforeCreate钩子之前调用；</p></li><li><p>可以返回一个对象，这个对象的属性被合并到渲染上下文，并可以在模板中直接使用</p></li><li><p>可以返回一个渲染函数，如下： return () =&gt; h(‘div’, [count.value, object.foo])</p></li><li><p>接收props对象作为第一个参数，接收来的props对象，props对象是响应式的(reactive), 当传入的新的props对象时会对其进行更新，且可以通过watchEffect或watch监视其变化。<br>props对象不支持解构,解构会导致失去响应性：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> String  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> name <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">name is: </span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span> name<span class="token punctuation">)</span> <span class="token comment">// Will not be reactive!</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>接受context对象作为第二个参数，这个对象包含attrs（属性），slots（作用域插槽），emit（事件传播函数）三个属性。（还有expose 函数，实际为4个属性， 可以通过expose 向父级暴露一些子组件的函数、属性等，父组件可以通过ref直接获取到）<br>与 prop 不同，context 是普通对象，不是响应式的，slots 和 attr 的值会在组件更新时而更新，如果需要监听 slots 、‘attr’ 的更新触发的副作用，建议在 setup() 函数中添加 onUpdated 函数监听副作用</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// comp-a.vue</span><span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'comp-a'</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> attrs<span class="token punctuation">,</span> slots<span class="token punctuation">,</span> emit<span class="token punctuation">,</span> expose <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> observed <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      a<span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">function</span> <span class="token function">setObservedA</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      observed<span class="token punctuation">.</span>a <span class="token operator">=</span> value    <span class="token punctuation">&#125;</span>    <span class="token function">expose</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      setObservedA    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      observed<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// comp-b.vue</span><span class="token punctuation">&#123;</span>  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">    &lt;comp-a ref="compa" />  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> compa <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// comp-a 调用 expose 之后, 父组件 ref 拿到的结果为调用 expose 时的参数。而不再是组件实例了</span>      compa<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">setObservedA</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      compa    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>setup() 中的 this 不是当前组件实例，实际打印发现为 undefined ， 不建议 setup() 与 Option API 混用，可能会造成混乱。</li></ul></li></ul><h1 id="vue3-中的h函数"><a href="#vue3-中的h函数" class="headerlink" title="vue3 中的h函数"></a>vue3 中的h函数</h1><ul><li>h函数就是vue中的createElement方法，这个函数作用就是创建虚拟dom对象，通过diff算法，追踪dom变化的</li><li>createElement函数，它返回的实际上不是一个DOM元素，更准确的名字是：createNodeDescription（直译为——创建节点描述），因为它所包含的信息会告诉vue页面上需要渲染什么样的节点，包括其子节点的描述信息。我们把这样的节点叫做：“虚拟节点（virtual node）”，也常简写为：“VNode”</li><li>h函数接受三个参数：<br>参数一：tag（标签名）、组件的选项对象、函数（必选）；<br>参数二：一个对象，标签的属性对应的数据，如：class、id、disabled 等等（可选）；<br>参数三：子级虚拟节点，字符串形式或数组形式，子级虚拟节点也需要使用createElement构建。</li><li>dom节点 bable编译前后对比：<br><img src="/imgs/vue3-1.png" alt="Image text"></li></ul><h1 id="Vue3-0-toRaw函数和markRaw函数"><a href="#Vue3-0-toRaw函数和markRaw函数" class="headerlink" title="Vue3.0 toRaw函数和markRaw函数"></a>Vue3.0 toRaw函数和markRaw函数</h1><ul><li>toRaw方法是把被reactive或readonly后的Proxy对象转换为原来的target对象，而markRaw则直接让target不能被reactive或readonly</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue3与Vue2在应用中的区别&quot;&gt;&lt;a href=&quot;#Vue3与Vue2在应用中的区别&quot; class=&quot;headerlink&quot; title=&quot;Vue3与Vue2在应用中的区别&quot;&gt;&lt;/a&gt;Vue3与Vue2在应用中的区别&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;响应式数据在Vu</summary>
      
    
    
    
    
    <category term="vue3" scheme="http://example.com/tags/vue3/"/>
    
  </entry>
  
  <entry>
    <title>git相关操作</title>
    <link href="http://example.com/2021/12/30/git-%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/2021/12/30/git-%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</id>
    <published>2021-12-29T16:00:00.000Z</published>
    <updated>2022-04-08T01:26:52.808Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-commit-代码提交规范"><a href="#git-commit-代码提交规范" class="headerlink" title="git commit 代码提交规范"></a>git commit 代码提交规范</h1><pre class="line-numbers language-none"><code class="language-none">type(scope) : subject<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>type（必须） : commit 的类别，只允许使用下面几个标识：</li><li>feat : 新功能</li><li>fix : 修复bug</li><li>docs : 文档改变</li><li>style : 代码格式改变</li><li>refactor : 某个已有功能重构</li><li>perf : 性能优化</li><li>test : 增加测试</li><li>build : 改变了build工具 如 grunt换成了 npm</li><li>revert : 撤销上一次的 commit</li><li>chore : 构建过程或辅助工具的变动</li><li>scope（可选） : 用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</li><li>subject（必须） : commit 的简短描述，不超过50个字符。</li></ul><h1 id="使用commitizen-规范提交"><a href="#使用commitizen-规范提交" class="headerlink" title="使用commitizen 规范提交"></a>使用commitizen 规范提交</h1><ol><li>npm install -g commitizen</li><li>commitizen init cz-conventional-changelog –save –save-exact</li><li>用 git cz 命令取代 git commit</li></ol><h1 id="使用git-commit-提交"><a href="#使用git-commit-提交" class="headerlink" title="使用git commit 提交"></a>使用git commit 提交</h1><ol><li>npm i @commitlint/config-conventional @commitlint/cli -D </li><li><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token comment">// 配置 package.json</span> <span class="token property">"commitlint"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>   <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token punctuation">[</span>     <span class="token string">"@commitlint/config-conventional"</span>   <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token comment">// 或者在项目根目录下创建配置文件： .commitlintrc.js</span>module.exports = <span class="token punctuation">&#123;</span>   extends<span class="token operator">:</span> <span class="token punctuation">[</span>'@commitlint/config-conventional'<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>安装Husky  npm i husky -D </li><li>配置 package.json<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"husky"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>   <span class="token property">"hooks"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>     <span class="token property">"commit-msg"</span><span class="token operator">:</span> <span class="token string">"commitlint -e $HUSKY_GIT_PARAMS"</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 或者在项目根目录下创建配置文件：.huskyrc</span><span class="token punctuation">&#123;</span>   <span class="token property">"hooks"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>     <span class="token property">"commit-msg"</span><span class="token operator">:</span> <span class="token string">"commitlint -e $HUSKY_GIT_PARAMS"</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>npx husky install </li><li>npx husky add .husky/commit-msg ‘npx –no-install commitlint –edit “$1”‘</li></ol><h1 id="git分支相关报错"><a href="#git分支相关报错" class="headerlink" title="git分支相关报错"></a>git分支相关报错</h1><ol><li>指定pull命令的更新方式<pre class="line-numbers language-none"><code class="language-none">git config pull.rebase false # 默认策略git config pull.rebase true   git config pull.ff only  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;git-commit-代码提交规范&quot;&gt;&lt;a href=&quot;#git-commit-代码提交规范&quot; class=&quot;headerlink&quot; title=&quot;git commit 代码提交规范&quot;&gt;&lt;/a&gt;git commit 代码提交规范&lt;/h1&gt;&lt;pre class=&quot;l</summary>
      
    
    
    
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>ts学习</title>
    <link href="http://example.com/2021/12/29/TS%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/12/29/TS%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-12-28T16:00:00.000Z</published>
    <updated>2022-01-21T05:28:32.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h1><ol><li>布尔值<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> isDone<span class="token operator">:</span>boolean <span class="token operator">=</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>数字<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> decLiteral<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">let</span> hexLiteral<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0xf00d</span><span class="token punctuation">;</span><span class="token keyword">let</span> binaryLiteral<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0b1010</span><span class="token punctuation">;</span><span class="token keyword">let</span> octalLiteral<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0o744</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>字符串<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> name<span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">"bob"</span><span class="token punctuation">;</span>name <span class="token operator">=</span> <span class="token string">"smith"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>数组<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> list<span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 泛型</span><span class="token keyword">let</span> list<span class="token operator">:</span> Array<span class="token operator">&lt;</span>number<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>元组 Tuple<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> x<span class="token operator">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span> number<span class="token punctuation">]</span><span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>枚举<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">enum</span> Color <span class="token punctuation">&#123;</span>Red<span class="token punctuation">,</span> Green<span class="token punctuation">,</span> Blue<span class="token punctuation">&#125;</span><span class="token keyword">let</span> c<span class="token operator">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>Any  （随便什么类型都可以）<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> notSure<span class="token operator">:</span> any <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>notSure <span class="token operator">=</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>Void  没有任何类型<br>只能为它赋予undefined和null<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">warnUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"This is my warning message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> unusable<span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>TypeScript里，undefined和null两者各自有自己的类型分别叫做undefined和null。 和 void相似，它们的本身的类型用处不是很大：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> u<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token keyword">let</span> n<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>默认情况下null和undefined是所有类型的子类型。 就是说你可以把 null和undefined赋值给number类型的变量。</li></ol><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>关键字 interface<br>? 是可选<br>readonly 是只读</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">SquareConfig</span> <span class="token punctuation">&#123;</span>  color<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">;</span>  width<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">;</span>  readonly name<span class="token operator">:</span> string <span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">createSquare</span><span class="token punctuation">(</span><span class="token parameter">config<span class="token operator">:</span> SquareConfig</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>color<span class="token operator">:</span> string<span class="token punctuation">;</span> area<span class="token operator">:</span> number<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> newSquare <span class="token operator">=</span> <span class="token punctuation">&#123;</span>color<span class="token operator">:</span> <span class="token string">"white"</span><span class="token punctuation">,</span> area<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>color<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    newSquare<span class="token punctuation">.</span>color <span class="token operator">=</span> config<span class="token punctuation">.</span>color<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>width<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    newSquare<span class="token punctuation">.</span>area <span class="token operator">=</span> config<span class="token punctuation">.</span>width <span class="token operator">*</span> config<span class="token punctuation">.</span>width<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> newSquare<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> mySquare <span class="token operator">=</span> <span class="token function">createSquare</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>color<span class="token operator">:</span> <span class="token string">"black"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以通过赋值一个对象字面量来构造一个Point。 赋值后， x和y再也不能被改变了。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> p1<span class="token operator">:</span> Point <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// error!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>函数类型</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">SearchFunc</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">(</span>source<span class="token operator">:</span> string<span class="token punctuation">,</span> subString<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> mySearch<span class="token operator">:</span> SearchFunc<span class="token punctuation">;</span><span class="token function-variable function">mySearch</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">source<span class="token operator">:</span> string<span class="token punctuation">,</span> subString<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>subString<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 对于函数类型的类型检查来说，函数的参数名不需要与接口里定义的名字相匹配</span><span class="token keyword">let</span> mySearch<span class="token operator">:</span> SearchFunc<span class="token punctuation">;</span><span class="token function-variable function">mySearch</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">src<span class="token punctuation">,</span> sub</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可索引的类型</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">StringArray</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span>index<span class="token operator">:</span> number<span class="token punctuation">]</span><span class="token operator">:</span> string<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> myArray<span class="token operator">:</span> StringArray<span class="token punctuation">;</span>myArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token string">"Fred"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> myStr<span class="token operator">:</span> string <span class="token operator">=</span> myArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类类型</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">ClockInterface</span> <span class="token punctuation">&#123;</span>    currentTime<span class="token operator">:</span> Date<span class="token punctuation">;</span>    <span class="token function">setTime</span><span class="token punctuation">(</span>d<span class="token operator">:</span> Date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">implements</span> <span class="token class-name">ClockInterface</span> <span class="token punctuation">&#123;</span>    currentTime<span class="token operator">:</span> Date<span class="token punctuation">;</span>    <span class="token function">setTime</span><span class="token punctuation">(</span><span class="token parameter">d<span class="token operator">:</span> Date</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>currentTime <span class="token operator">=</span> d<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">h<span class="token operator">:</span> number<span class="token punctuation">,</span> m<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Greeter</span> <span class="token punctuation">&#123;</span>    greeting<span class="token operator">:</span> string<span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>greeting <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Hello, "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>greeting<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> greeter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Greeter</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>继承</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> string<span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">theName<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token function">move</span><span class="token punctuation">(</span><span class="token parameter">distanceInMeters<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> moved </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>distanceInMeters<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">m.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Snake</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token function">move</span><span class="token punctuation">(</span><span class="token parameter">distanceInMeters <span class="token operator">=</span> <span class="token number">5</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Slithering..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Horse</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token function">move</span><span class="token punctuation">(</span><span class="token parameter">distanceInMeters <span class="token operator">=</span> <span class="token number">45</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Galloping..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> sam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Snake</span><span class="token punctuation">(</span><span class="token string">"Sammy the Python"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> tom<span class="token operator">:</span> Animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Horse</span><span class="token punctuation">(</span><span class="token string">"Tommy the Palomino"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sam<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tom<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>派生类包含了一个构造函数，它 必须调用 super()，它会执行基类的构造函数。 而且，在构造函数里访问 this的属性之前，我们 一定要调用 super()。 这个是TypeScript强制执行的一条重要规则。</p></blockquote></li><li><p>公共，私有与受保护的修饰符</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 在TypeScript里，成员都默认为 public。</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> name<span class="token operator">:</span> string<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">theName<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token parameter">distanceInMeters<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> moved </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>distanceInMeters<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">m.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 当成员被标记成 private时，它就不能在声明它的类的外部访问</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> name<span class="token operator">:</span> string<span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">theName<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"Cat"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// 错误: 'name' 是私有的.</span><span class="token comment">// protected修饰符与 private修饰符的行为很相似，但有一点不同， protected成员在派生类中仍然可以访问。</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> name<span class="token operator">:</span> string<span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> department<span class="token operator">:</span> string<span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token operator">:</span> string<span class="token punctuation">,</span> department<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>department <span class="token operator">=</span> department<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token function">getElevatorPitch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> and I work in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>department<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> howard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"Howard"</span><span class="token punctuation">,</span> <span class="token string">"Sales"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>howard<span class="token punctuation">.</span><span class="token function">getElevatorPitch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>howard<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h2><p>和JavaScript一样，TypeScript函数可以创建有名字的函数和匿名函数。 你可以随意选择适合应用程序的方式，不论是定义一系列API函数还是只使用一次的函数。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Named function</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Anonymous function</span><span class="token keyword">let</span> <span class="token function-variable function">myAdd</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 使用ts</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token operator">:</span> number<span class="token punctuation">,</span> y<span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token function-variable function">myAdd</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token operator">:</span> number<span class="token punctuation">,</span> y<span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以给每个参数添加类型之后再为函数本身添加返回值类型。 TypeScript能够根据返回语句自动推断出返回值类型，因此我们通常省略它。</p><h2 id="书写完整函数类型"><a href="#书写完整函数类型" class="headerlink" title="书写完整函数类型"></a>书写完整函数类型</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">myAdd</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token operator">:</span> number<span class="token punctuation">,</span> y<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function-variable function">number</span> <span class="token operator">=</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token operator">:</span> number<span class="token punctuation">,</span> y<span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 编译后</span><span class="token keyword">var</span> <span class="token function-variable function">myAdd</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>只要参数类型是匹配的，那么就认为它是有效的函数类型，而不在乎参数名是否正确。<br> 对于返回值，我们在函数和返回值类型之前使用( =&gt;)符号，使之清晰明了。 如之前提到的，返回值类型是函数类型的必要部分，如果函数没有返回任何值，你也必须指定返回值类型为 void而不能留空。</p></blockquote><h2 id="可选参数和默认参数"><a href="#可选参数和默认参数" class="headerlink" title="可选参数和默认参数"></a>可选参数和默认参数</h2><p>TypeScript里的每个函数参数都是必须的。 这不是指不能传递 null或undefined作为参数，而是说编译器检查用户是否为每个参数都传入了值。 编译器还会假设只有这些参数会被传递进函数。 简短地说，传递给一个函数的参数个数必须与函数期望的参数个数一致。<br>在TypeScript里我们可以在参数名旁使用 ?实现可选参数的功能。 比如，我们想让last name是可选的：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token parameter">firstName<span class="token operator">:</span> string<span class="token punctuation">,</span> lastName<span class="token operator">?</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastName<span class="token punctuation">)</span>        <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> firstName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当没有传递参数的时候也可以直接设置默认值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token operator">:</span> string<span class="token punctuation">,</span> lastName <span class="token operator">=</span> <span class="token string">"Smith"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h2><p>默认参数和可选参数有个共同点：它们表示某一个参数。 有时，你想同时操作多个参数，或者你并不知道会有多少参数传递进来。 在JavaScript里，你可以使用 arguments来访问所有传入的参数。<br>在TypeScript里，你可以把所有参数收集到一个变量里：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token parameter">firstName<span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token operator">...</span>restOfName<span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> restOfName<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> employeeName <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">"Joseph"</span><span class="token punctuation">,</span> <span class="token string">"Samuel"</span><span class="token punctuation">,</span> <span class="token string">"Lucas"</span><span class="token punctuation">,</span> <span class="token string">"MacKinzie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这个省略号也会在带有剩余参数的函数类型定义上使用到：</span><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token parameter">firstName<span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token operator">...</span>restOfName<span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> restOfName<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token function-variable function">buildNameFun</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">fname<span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> string <span class="token operator">=</span> buildName<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="this和箭头函数"><a href="#this和箭头函数" class="headerlink" title="this和箭头函数"></a>this和箭头函数</h2><p>JavaScript里，<strong>this的值在函数被调用的时候才会指定。</strong> 这是个既强大又灵活的特点，但是你需要花点时间弄清楚函数调用的上下文是什么。 但众所周知，这不是一件很简单的事，尤其是在返回一个函数或将函数当做参数传递的时候。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> deck <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    suits<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"hearts"</span><span class="token punctuation">,</span> <span class="token string">"spades"</span><span class="token punctuation">,</span> <span class="token string">"clubs"</span><span class="token punctuation">,</span> <span class="token string">"diamonds"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    cards<span class="token operator">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function-variable function">createCardPicker</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> pickedCard <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> pickedSuit <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>pickedCard <span class="token operator">/</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>suit<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>suits<span class="token punctuation">[</span>pickedSuit<span class="token punctuation">]</span><span class="token punctuation">,</span> card<span class="token operator">:</span> pickedCard <span class="token operator">%</span> <span class="token number">13</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> cardPicker <span class="token operator">=</span> deck<span class="token punctuation">.</span><span class="token function">createCardPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> pickedCard <span class="token operator">=</span> <span class="token function">cardPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"card: "</span> <span class="token operator">+</span> pickedCard<span class="token punctuation">.</span>card <span class="token operator">+</span> <span class="token string">" of "</span> <span class="token operator">+</span> pickedCard<span class="token punctuation">.</span>suit<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以看到createCardPicker是个函数，并且它又返回了一个函数。 如果我们尝试运行这个程序，会发现它并没有弹出对话框而是报错了。 因为 createCardPicker返回的函数里的this被设置成了window而不是deck对象。 因为我们只是独立的调用了 cardPicker()。 顶级的非方法式调用会将 this视为window。 （注意：在严格模式下， this为undefined而不是window）</p></blockquote><p>为了解决这个问题，我们可以在函数被返回时就绑好正确的this。 这样的话，无论之后怎么使用它，都会引用绑定的‘deck’对象。 我们需要改变函数表达式来使用ECMAScript 6箭头语法。 箭头函数能保存函数创建时的 this值，而不是调用时的值：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> deck <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    suits<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"hearts"</span><span class="token punctuation">,</span> <span class="token string">"spades"</span><span class="token punctuation">,</span> <span class="token string">"clubs"</span><span class="token punctuation">,</span> <span class="token string">"diamonds"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    cards<span class="token operator">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function-variable function">createCardPicker</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// NOTE: the line below is now an arrow function, allowing us to capture 'this' right here</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> pickedCard <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> pickedSuit <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>pickedCard <span class="token operator">/</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>suit<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>suits<span class="token punctuation">[</span>pickedSuit<span class="token punctuation">]</span><span class="token punctuation">,</span> card<span class="token operator">:</span> pickedCard <span class="token operator">%</span> <span class="token number">13</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> cardPicker <span class="token operator">=</span> deck<span class="token punctuation">.</span><span class="token function">createCardPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> pickedCard <span class="token operator">=</span> <span class="token function">cardPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"card: "</span> <span class="token operator">+</span> pickedCard<span class="token punctuation">.</span>card <span class="token operator">+</span> <span class="token string">" of "</span> <span class="token operator">+</span> pickedCard<span class="token punctuation">.</span>suit<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更好事情是，TypeScript会警告你犯了一个错误，如果你给编译器设置了–noImplicitThis标记。 它会指出 this.suits[pickedSuit]里的this的类型为any。</p><p>让我们往例子里添加一些接口，Card 和 Deck，让类型重用能够变得清晰简单些：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">Card</span> <span class="token punctuation">&#123;</span>    suit<span class="token operator">:</span> string<span class="token punctuation">;</span>    card<span class="token operator">:</span> number<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Deck</span> <span class="token punctuation">&#123;</span>    suits<span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    cards<span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">createCardPicker</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> Deck<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Card<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> deck<span class="token operator">:</span> Deck <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    suits<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"hearts"</span><span class="token punctuation">,</span> <span class="token string">"spades"</span><span class="token punctuation">,</span> <span class="token string">"clubs"</span><span class="token punctuation">,</span> <span class="token string">"diamonds"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    cards<span class="token operator">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">// NOTE: The function now explicitly specifies that its callee must be of type Deck</span>    <span class="token function-variable function">createCardPicker</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">this</span><span class="token operator">:</span> Deck</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> pickedCard <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> pickedSuit <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>pickedCard <span class="token operator">/</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>suit<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>suits<span class="token punctuation">[</span>pickedSuit<span class="token punctuation">]</span><span class="token punctuation">,</span> card<span class="token operator">:</span> pickedCard <span class="token operator">%</span> <span class="token number">13</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> cardPicker <span class="token operator">=</span> deck<span class="token punctuation">.</span><span class="token function">createCardPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> pickedCard <span class="token operator">=</span> <span class="token function">cardPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"card: "</span> <span class="token operator">+</span> pickedCard<span class="token punctuation">.</span>card <span class="token operator">+</span> <span class="token string">" of "</span> <span class="token operator">+</span> pickedCard<span class="token punctuation">.</span>suit<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>剩下的有点看不懂了   后面实际项目中使用到了再补充。。。</p><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>我们需要一种方法使返回值的类型与传入参数的类型是相同的。 这里，我们使用了 类型变量，它是一种特殊的变量，只用于表示类型而不是值。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> identity<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们给identity添加了类型变量T。 T帮助我们捕获用户传入的类型（比如：number），之后我们就可以使用这个类型。 之后我们再次使用了 T当做返回值类型。现在我们可以知道参数类型与返回值类型是相同的了。 这允许我们跟踪函数里使用的类型的信息。</p><p>也就是说用户传的参数是类型的  T  就表示什么类型</p><p>我们把这个版本的identity函数叫做泛型，因为它可以适用于多个类型。 不同于使用 any，它不会丢失信息，像第一个例子那像保持准确性，传入数值类型并返回数值类型。</p><p>我们定义了泛型函数后，可以用两种方法使用。 第一种是，传入所有的参数，包含类型参数：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> output <span class="token operator">=</span> identity<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"myString"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// type of output will be 'string'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二种方法更普遍。利用了类型推论 – 即编译器会根据传入的参数自动地帮助我们确定T的类型：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> output <span class="token operator">=</span> <span class="token function">identity</span><span class="token punctuation">(</span><span class="token string">"myString"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// type of output will be 'string'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意我们没必要使用尖括号（&lt;&gt;）来明确地传入类型；编译器可以查看myString的值，然后把T设置为它的类型。 类型推论帮助我们保持代码精简和高可读性。如果编译器不能够自动地推断出类型的话，只能像上面那样明确的传入T的类型，在一些复杂的情况下，这是可能出现的。</p><p>如果我们想同时打印出arg的长度。 我们很可能会这样做：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> loggingIdentity<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 因为传入的参数是任意类型的  如果是数字则没有.length 所以会报错  Error: T doesn't have .length</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在假设我们想操作T类型的数组而不直接是T。由于我们操作的是数组，所以.length属性是应该存在的。 我们可以像创建其它数组一样创建这个数组：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> loggingIdentity<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Array has a .length, so no more error   这样我们操作的是一个T类型的数组  所以不会报错</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> loggingIdentity<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="泛型类型"><a href="#泛型类型" class="headerlink" title="泛型类型"></a>泛型类型</h2><p>泛型函数的类型与非泛型函数的类型没什么不同，只是有一个类型参数在最前面，像函数声明一样：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> identity<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> myIdentity<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token parameter">arg<span class="token operator">:</span> <span class="token constant">T</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span> <span class="token operator">=</span> identity<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们还可以使用带有调用签名的对象字面量来定义泛型函数：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> identity<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> myIdentity<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> identity<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这引导我们去写第一个泛型接口了。</p><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><p>我们把上面例子里的对象字面量拿出来做为一个接口：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">GenericIdentityFn</span> <span class="token punctuation">&#123;</span>    <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> identity<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> myIdentity<span class="token operator">:</span> GenericIdentityFn <span class="token operator">=</span> identity<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个相似的例子，我们可能想把泛型参数当作整个接口的一个参数。 这样我们就能清楚的知道使用的具体是哪个泛型类型（比如： Dictionary<string>而不只是Dictionary）。 这样接口里的其它成员也能知道这个参数的类型了。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">GenericIdentityFn</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> identity<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> myIdentity<span class="token operator">:</span> GenericIdentityFn<span class="token operator">&lt;</span>number<span class="token operator">></span> <span class="token operator">=</span> identity<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，我们的示例做了少许改动。 不再描述泛型函数，而是把非泛型函数签名作为泛型类型一部分。 当我们使用 GenericIdentityFn的时候，还得传入一个类型参数来指定泛型类型（这里是：number），锁定了之后代码里使用的类型。 对于描述哪部分类型属于泛型部分来说，理解何时把参数放在调用签名里和何时放在接口上是很有帮助的。</p><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><p>泛型类看上去与泛型接口差不多。 泛型类使用（ &lt;&gt;）括起泛型类型，跟在类名后面。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">GenericNumber</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    zeroValue<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>    <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token constant">T</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> myGenericNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericNumber</span><span class="token operator">&lt;</span>number<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myGenericNumber<span class="token punctuation">.</span>zeroValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>myGenericNumber<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// GenericNumber类的使用是十分直观的，没有什么去限制它只能使用number类型。 也可以使用字符串或其它更复杂的类型。</span><span class="token keyword">let</span> stringNumeric <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericNumber</span><span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringNumeric<span class="token punctuation">.</span>zeroValue <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>stringNumeric<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringNumeric<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stringNumeric<span class="token punctuation">.</span>zeroValue<span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与接口一样，直接把泛型类型放在类后面，可以帮助我们确认类的所有属性都在使用相同的类型。</p><p>我们在类那节说过，类有两部分：静态部分和实例部分。 泛型类指的是实例部分的类型，所以类的静态属性不能使用这个泛型类型。</p><h2 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h2><p>定义一个接口来描述约束条件。 创建一个包含 .length属性的接口，使用这个接口和extends关键字来实现约束：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">Lengthwise</span> <span class="token punctuation">&#123;</span>    length<span class="token operator">:</span> number<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> loggingIdentity<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Lengthwise</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 现在我们知道它有一个。属性，因此不再有错误</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在这个泛型函数被定义了约束，因此它不再是适用于任意类型：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">loggingIdentity</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Error, number doesn't have a .length property</span><span class="token function">loggingIdentity</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>length<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 我们需要传入符合约束类型的值，必须包含必须的属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="在泛型约束中使用类型参数"><a href="#在泛型约束中使用类型参数" class="headerlink" title="在泛型约束中使用类型参数"></a>在泛型约束中使用类型参数</h3><p>你可以声明一个类型参数，且它被另一个类型参数所约束。 比如，现在我们想要用属性名从对象里获取这个属性。 并且我们想要确保这个属性存在于对象 obj上，因此我们需要在这两个类型之间使用约束。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token constant">K</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> d<span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">getProperty</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// okay</span><span class="token function">getProperty</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">"m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error: Argument of type 'm' isn't assignable to 'a' | 'b' | 'c' | 'd'. 错误：“m”类型的参数不能赋值给“a”|“b”|“c”|“d”。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础类型&quot;&gt;&lt;a href=&quot;#基础类型&quot; class=&quot;headerlink&quot; title=&quot;基础类型&quot;&gt;&lt;/a&gt;基础类型&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;布尔值&lt;pre class=&quot;line-numbers language-js&quot; data-language=&quot;</summary>
      
    
    
    
    
    <category term="ts" scheme="http://example.com/tags/ts/"/>
    
  </entry>
  
  <entry>
    <title>react学习</title>
    <link href="http://example.com/2021/12/20/react%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/12/20/react%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-12-19T16:00:00.000Z</published>
    <updated>2022-01-05T01:35:34.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="挂在方式"><a href="#挂在方式" class="headerlink" title="挂在方式"></a>挂在方式</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  element<span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过ReactDOM.render() 挂载， 第一个参数是组件，第二个参数是挂载的根节点，需要通过原生js获取，通常只会挂载一次</p><h1 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h1><h2 id="函数试组件"><a href="#函数试组件" class="headerlink" title="函数试组件"></a>函数试组件</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token keyword">function</span> <span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>函数式组件没有this,可以接收一个props</p><p>如果函数组件想使用state,得使用hook {useState}</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// count定义的变量，setCount改变变量的方法，useState(0)设置变量初始值为0</span>  <span class="token comment">// 相当于 componentDidMount 和 componentDidUpdate:</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 使用浏览器的 API 更新页面标题</span>    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">You clicked </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>count<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> times</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span>You clicked <span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span> times<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>        Click me      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> PropsType <span class="token keyword">from</span> <span class="token string">"prop-types"</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Welcome</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// constructor(props)&#123;</span>  <span class="token comment">//   super(props)</span>  <span class="token comment">//   this.state = &#123;</span>  <span class="token comment">//     age: 18</span>  <span class="token comment">//   &#125;</span>  <span class="token comment">//   this.onChang = this.onChang.bind(this)</span>  <span class="token comment">// &#125;</span>  <span class="token keyword">static</span> propTypes <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">PropsTypes</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 数据类型为字符串并且必须填</span>    name<span class="token operator">:</span> PropsType<span class="token punctuation">.</span>string<span class="token punctuation">.</span>isRequired    <span class="token comment">// 为函数类型</span>    fun<span class="token operator">:</span> PropsType<span class="token punctuation">.</span>func  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">static</span> defaultProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span><span class="token string">'lisi'</span>  <span class="token punctuation">&#125;</span>  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    age<span class="token operator">:</span> <span class="token number">18</span>  <span class="token punctuation">&#125;</span>  <span class="token function-variable function">onChang</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      age<span class="token operator">:</span> age <span class="token operator">+</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'点击事件'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1 onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>onChang<span class="token punctuation">&#125;</span><span class="token operator">></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>age<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>类组件中的state与事件定义的方式有两种<br>一种是在constructor里面定义，需要通过bind将事件的this改变为类的this,这种定义方式每次写一个事件就需要重新绑定一次,会比较麻烦，但是比较容易理解<br><strong>否则事件获取不到this,因为 1、类会自己开启严格模式  2、babel也会开启严格模式</strong><br>二种是在定义事件的时候使用赋值的方式，我们直接赋值一个箭头函数 给这个事件（因为箭头函数没有自己的this，它会将外层的this作为自己的this)</p></li><li><p>设置组件的接收的参数需要引入propTypes, 设置属性需要使用静态属性<strong>要不在类的外面设置，要是在类里面设置需要加static</strong></p></li><li><p>改变state里面的数据需要使用this.setState() 方法</p></li><li><p>子组件给父组件传递参数，父组件给子组件传递一个方法，然后子组件在方法里面传入参数，父组件可以把参数存进state</p></li><li><p>ref</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Com</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>   <span class="token function-variable function">changInput</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>     <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>input<span class="token punctuation">,</span>input2<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>refs     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span>input2<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span>   input2 <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span>       <span class="token operator">&lt;</span><span class="token operator">></span>         <span class="token operator">&lt;</span>input ref<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token parameter">c</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>input <span class="token operator">=</span> c<span class="token punctuation">&#125;</span> type<span class="token operator">=</span><span class="token string">"text"</span> <span class="token operator">/</span><span class="token operator">></span>         <span class="token operator">&lt;</span>input ref<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>input2<span class="token punctuation">&#125;</span> type<span class="token operator">=</span><span class="token string">"text"</span> <span class="token operator">/</span><span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>     <span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;挂在方式&quot;&gt;&lt;a href=&quot;#挂在方式&quot; class=&quot;headerlink&quot; title=&quot;挂在方式&quot;&gt;&lt;/a&gt;挂在方式&lt;/h1&gt;&lt;pre class=&quot;line-numbers language-js&quot; data-language=&quot;js&quot;&gt;&lt;code cl</summary>
      
    
    
    
    
    <category term="react" scheme="http://example.com/tags/react/"/>
    
  </entry>
  
</feed>
