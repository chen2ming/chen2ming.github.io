{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/custom copy.css","path":"css/custom copy.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/custom.css","path":"css/custom.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/toux.jpg","path":"img/toux.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/imgs/diaoyu1.jpeg","path":"imgs/diaoyu1.jpeg","modified":0,"renderable":0},{"_id":"source/imgs/diaoyu2.jpeg","path":"imgs/diaoyu2.jpeg","modified":0,"renderable":0},{"_id":"source/imgs/diaoyu3.jpeg","path":"imgs/diaoyu3.jpeg","modified":0,"renderable":0},{"_id":"source/imgs/diaoyu4.jpeg","path":"imgs/diaoyu4.jpeg","modified":0,"renderable":0},{"_id":"source/imgs/diaoyu5.jpeg","path":"imgs/diaoyu5.jpeg","modified":0,"renderable":0},{"_id":"source/imgs/diaoyu6.jpeg","path":"imgs/diaoyu6.jpeg","modified":0,"renderable":0},{"_id":"source/imgs/motuo1.jpeg","path":"imgs/motuo1.jpeg","modified":0,"renderable":0},{"_id":"source/imgs/motuo2.jpeg","path":"imgs/motuo2.jpeg","modified":0,"renderable":0},{"_id":"source/imgs/motuo3.jpeg","path":"imgs/motuo3.jpeg","modified":0,"renderable":0},{"_id":"source/imgs/motuo4.jpeg","path":"imgs/motuo4.jpeg","modified":0,"renderable":0},{"_id":"source/imgs/motuo5.jpeg","path":"imgs/motuo5.jpeg","modified":0,"renderable":0},{"_id":"source/imgs/motuo6.jpeg","path":"imgs/motuo6.jpeg","modified":0,"renderable":0},{"_id":"source/imgs/motuo7.jpeg","path":"imgs/motuo7.jpeg","modified":0,"renderable":0},{"_id":"source/imgs/motuo8.jpeg","path":"imgs/motuo8.jpeg","modified":0,"renderable":0},{"_id":"source/imgs/motuo9.jpeg","path":"imgs/motuo9.jpeg","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"3859bb2ef9dd99f998e11e4c8bbc7ae14ab4527f","modified":1626685435878},{"_id":"source/CNAME","hash":"8e9eb789ad6415da2dc8f4a8dbc3234ef11c1970","modified":1626676632300},{"_id":"source/_data/link.yml","hash":"010d98ee79c8019c8cf6724f8cdca603e8dfb68f","modified":1626685605689},{"_id":"source/about/index.md","hash":"12abc595af4634f9d83070fa934843a678792243","modified":1626685564995},{"_id":"source/_posts/js数据类型.md","hash":"54bb15aa9712e88013872309c13933663edc6a27","modified":1626684062994},{"_id":"source/_posts/this词法.md","hash":"6277f5abe52b71534d57db3ed20f449a095cb56c","modified":1626684084597},{"_id":"source/_posts/remarks.md","hash":"ae116799ed229a9092fe2f619c59894226f08402","modified":1626684077260},{"_id":"source/_posts/作用域是什么-词法作用域.md","hash":"60793b4cd8fd5bf2a11b250b007a0f3e0a5daecc","modified":1626684057046},{"_id":"source/_posts/深拷贝与浅拷贝.md","hash":"003d5f52156a0461c5968a0b128dd12ac3786d9e","modified":1626684049570},{"_id":"source/_posts/闭包.md","hash":"900574874afe23d62f9efc59e691a6883ff084f0","modified":1626688081533},{"_id":"source/categories/index.md","hash":"748df9c9e572e59f9e2d127cb61cb9eafce46eb1","modified":1626683345750},{"_id":"source/_posts/函数作用域、作用域快.md","hash":"1297d571614d8a2c57bd506fc139001f647fdbde","modified":1626684042097},{"_id":"source/imgs/.DS_Store","hash":"2a52cf06aebe45ee655ed62e6f42b1b653a7947b","modified":1626685463547},{"_id":"source/link/index.md","hash":"f3f9bf64ebc4f248f9f42a0f59f93f15c886f214","modified":1626682900679},{"_id":"source/tags/index.md","hash":"2dda1908d360549277ac5817adc1302192a19b14","modified":1626684316032},{"_id":"source/imgs/diaoyu2.jpeg","hash":"27094ef2c961cf0a63713d626b980e2cb8bcce68","modified":1626685238199},{"_id":"source/imgs/diaoyu3.jpeg","hash":"26a6f54633e66a2303d4f3b668f3f634b6a648c3","modified":1626685216557},{"_id":"source/imgs/diaoyu5.jpeg","hash":"907c27907fa6bbf10f693ca52acdb7376cd68867","modified":1626685219686},{"_id":"source/imgs/diaoyu4.jpeg","hash":"e70eddd3d9367050f9a7efc52c9c6a9fc302e452","modified":1626685226882},{"_id":"source/imgs/diaoyu6.jpeg","hash":"8eb7ef80b6650e27274672e7134edee935ec8108","modified":1626685213300},{"_id":"source/imgs/motuo4.jpeg","hash":"f16be5fd6ec367616b53984e608d4224d786def9","modified":1626681860833},{"_id":"source/imgs/motuo9.jpeg","hash":"1a92729e47c7fa98ff173c022099fa71b8396316","modified":1626681866950},{"_id":"source/imgs/motuo1.jpeg","hash":"9bca8a54e61479cccc39608b0c79669674726974","modified":1626681857193},{"_id":"source/imgs/diaoyu1.jpeg","hash":"ccfa2ef2d75c6c3bbcf8966b616d0e7b7668d407","modified":1626685232247},{"_id":"source/imgs/motuo6.jpeg","hash":"387f40d203854c3879be5d24d6c7838604179d3a","modified":1626681868149},{"_id":"source/imgs/motuo7.jpeg","hash":"74919878cbbe3a6b37554b37521272376c608afc","modified":1626681862490},{"_id":"source/imgs/motuo5.jpeg","hash":"25da2996e62b519c730a6ea5c6b38fa9bc14f8d7","modified":1626681852980},{"_id":"source/imgs/motuo2.jpeg","hash":"ab9cd3edfb5c58d543e7a2340b72cd37514b3fd2","modified":1626681895439},{"_id":"themes/butterfly/_config.yml","hash":"b757af65d25d51a68cbe1e058395136ef3259f7f","modified":1626688602650},{"_id":"themes/butterfly/package.json","hash":"c0d62352ca336c5322fdf5e45d756779c10bdaea","modified":1626679599995},{"_id":"themes/butterfly/README_CN.md","hash":"459d6f3200863021bee1fe72a719aef236fb4090","modified":1626679599977},{"_id":"themes/butterfly/README.md","hash":"cedd13fcd8c75a68742265dd8eced4087e940ffd","modified":1626679599977},{"_id":"themes/butterfly/.github/stale.yml","hash":"05a55a87fa7f122c59683e41c8b2e37e79f688f0","modified":1626679599977},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1626679599977},{"_id":"themes/butterfly/languages/default.yml","hash":"7ca673fb629ea74f5ba5e75b4f0f95248cfb5090","modified":1626679599978},{"_id":"themes/butterfly/languages/en.yml","hash":"cd333235ff1648a6bf58dfafc81f2c57672a15a5","modified":1626679599978},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"79a50c40d9f5463f1fa42aa870ac6b8b84540412","modified":1626679599978},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"741e522b2387f94764a73844e7b084cc7e927c54","modified":1626679599978},{"_id":"themes/butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1626679599979},{"_id":"themes/butterfly/layout/category.pug","hash":"60c1b795b6e227b5dd81963b51d29d1b81d0bf49","modified":1626679599979},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1626679599994},{"_id":"themes/butterfly/layout/page.pug","hash":"82aa988527a11835e7ac86ce4f23b8cd20014dfa","modified":1626679599994},{"_id":"themes/butterfly/layout/post.pug","hash":"8d398c8925182699d9f2b9f1b727f06228488312","modified":1626679599994},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1626679599995},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/custom.md","hash":"eff495eb1584cf4586e33c76e8b2fa6a469a179b","modified":1626679599976},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.md","hash":"476802922b774b679225102ac30a9d9183394701","modified":1626679599976},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.md","hash":"f6867a2f0417fe89a0f2008730ee19dd38422021","modified":1626679599977},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1626679599977},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"7d378e328a53cc99d5acc9682dce53f5eb61537d","modified":1626679599979},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1626679599980},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"4156224c47bfc2482281ac4e4df701c30476ff00","modified":1626679599979},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"1377952022ee0a9eaa7a2fd1098f1571efc468d9","modified":1626679599980},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"6f2608c4d93d3d10ae6b2cd7f8918f303f024321","modified":1626679599983},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":1626679599985},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1626679599995},{"_id":"themes/butterfly/scripts/events/init.js","hash":"018aa446265fe627301b1d53d7cba4f4ff1960ac","modified":1626679599995},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"d575137c8779e50422c2416f4d0832fdea346ee6","modified":1626679599995},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"4cc2d517195c8779471d326ada09f9371cbad4dd","modified":1626679599995},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"9821872007cf57efae4b728dc575ef9d004547bb","modified":1626679599995},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1626679599996},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1626679599996},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c6611d97087c51845cb1ab4821696a62fa33daeb","modified":1626679599996},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"65f2442e04c4defd16e7c1e67701d3bb41d9577a","modified":1626679599996},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"54b9324e3506dcc9c9991ef5e11e37e66e21594f","modified":1626679599996},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"b816ded1451f28c7c54151ffe6c259b110253ae3","modified":1626679599996},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"94826ea6bcc4d2304199adae12c4e2b272caf529","modified":1626679599997},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"f33858ffb9e88191e644796e11d2f901eb332308","modified":1626679599997},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1626679599997},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1626679599997},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"35f073021db93699fcac9ef351e26c59c31aadf7","modified":1626679599997},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"2d0453adf92a3fd3466cf0793f14685d17b8b51d","modified":1626679599986},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"8dafc2dcd8c33f70a546fee443f0b6d80b3cd243","modified":1626679599986},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"c16c6eb058af2b36bcd583b2591076c7ebdd51ad","modified":1626679599997},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1626679599997},{"_id":"themes/butterfly/source/css/custom copy.css","hash":"760291f6b6af9eb21ad50c1f95afcbeed7e5438d","modified":1626680940307},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1626679600005},{"_id":"themes/butterfly/source/css/var.styl","hash":"4b7ba48942bc25244d155333c3657f5c1448addf","modified":1626679600005},{"_id":"themes/butterfly/source/css/custom.css","hash":"760291f6b6af9eb21ad50c1f95afcbeed7e5438d","modified":1626680939631},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1626679600006},{"_id":"themes/butterfly/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1626679600006},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1626679600005},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1626679600006},{"_id":"themes/butterfly/source/js/main.js","hash":"8ef2821ceb92d81aa0f8c02ee932f094adcafb2b","modified":1626679600007},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"90d01b88d0f406d00184960b1afe9230aec2ebe6","modified":1626679599980},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"6c41f49a3e682067533dd9384e6e4511fc3a1349","modified":1626679599980},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"889ef16fa34a39e5533bc170e62f20f3450cc522","modified":1626679599981},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"4def0aab9e2172ad1f29abd1535d8e08ff23aa0b","modified":1626679599980},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1626679600008},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1626679599981},{"_id":"themes/butterfly/source/js/utils.js","hash":"8319b59c26ce8cd2b0ae7d030c4912215148fa92","modified":1626679600008},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1626679599981},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"e55f8bdb876d5429a908498db1307b94094c0d06","modified":1626679599982},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1626679599982},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"65fa23680af0daf64930a399c2f2ca37809a8149","modified":1626679599983},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1626679599982},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"24370508ee87f14418e8f06e9d79ad8c52a342c4","modified":1626679599983},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"c205b9fd72b2fe19e6d15c5b5ab0fb38c653032e","modified":1626679599983},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"92f81a437c9db49f7ebcf608bc09488ecdb55a21","modified":1626679599983},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1626679599983},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"4cfcf0100e37ce91864703cd44f1cb99cb5493ea","modified":1626679599984},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":1626679599984},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"4c3c5cb69b3aead8c232cb0fbc251929f28aad75","modified":1626679599984},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1626679599984},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"1f30952fed73dec21b42e2e30b7fe2e84618d2e4","modified":1626679599984},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"b53a2d4f9c37b375a4446d2273dcfb7712d91b3e","modified":1626679599985},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"dbec869c62135695495703a29ad7655e9965d461","modified":1626679599985},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"93d4ebc7dc8228c7a10ddeb5a553d0dcdabbe145","modified":1626679599985},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"88e3b611b03149665e4113cfa39595c1a3fca7e5","modified":1626679599985},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"5b404356f311d2ee36478291ca3553210867b738","modified":1626679599985},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"d5fec7dedc52ab23865fb4db002755e9bdaadc9f","modified":1626679599991},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"292646dfab135973b09f0fa9e3931e83da2ed30e","modified":1626679599986},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"933cb710d2dbcea25c6426a57c6f49d2f48b792c","modified":1626679599991},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"d50e5c22cd6bc3c378bc581918136746cfa3447f","modified":1626679599993},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"b9d54a01d7c2a7a183cb7209e99430ce7fea1fe3","modified":1626679599990},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"1fbecfd299068f90d727f0c8c65e2a792fa6e3e2","modified":1626679599992},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1626679599993},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"3d8e3706a056389176f55dd21956aabc78046761","modified":1626679599993},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1626679599993},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"0366c658cdcff839aa1df2e2d252a03a53fd427e","modified":1626679599993},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1626679599993},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1626679599993},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"27afd2274bd5f2cbbf1bad9f0afe2b2b72c213ca","modified":1626679599994},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"ae9336bf31cdad08ff586ead4295912a96563c76","modified":1626679599994},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":1626679599994},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1626679599994},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1626679599994},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"b5525891f6affd02c1ea3b2327c026882efe428b","modified":1626679599994},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"eda47f3e807a466ba8275627ea936c5100c43818","modified":1626679599998},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"0612aaee878f33ea8d3da0293c7dc3b6cd871466","modified":1626679599994},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"e211efbd1952d4b1b881287aa43423133c1d166e","modified":1626679599998},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"85e72c70a0cef29e40be1968f5d23b06c6f8e3aa","modified":1626679599998},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"fa7a4c1685f391d60ed863e869b9604b59746c27","modified":1626679599999},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"7feb755ca7c22da36bbad11e74ecd95fdcf3b879","modified":1626679599999},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"f1b63892baafa48ab872bc79671d57aafd511f6c","modified":1626679599999},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"dd8cdf639ba2b726437c77fa7aa8d5edbabe8f9b","modified":1626679599999},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1626679599999},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"950cc2afb5c0be5bfc192dc68a2c30c8acfbde95","modified":1626679600000},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"7d18a7be9cfea65091de3ef00014063d2d649912","modified":1626679600000},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"90fe01c968696a9f791cb2b84fca621cbbb56f47","modified":1626679600000},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"0551c5893d1589a3d17ce161e50ecb1d724cc6e8","modified":1626679600000},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"d748951d9fbcd04dda839085af78b01b8fa04cba","modified":1626679600000},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"ea1ba40dd5954c2ed718a126336fb7f94da4e66f","modified":1626679600000},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"7a072589e6097dbe942783131964f2372fdf1eb6","modified":1626679600000},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"2c5fb77c448ce0a734040c8ce532b28fed688899","modified":1626679600001},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"978c397d0966eaf9e6e2afd13866f8f4900b509f","modified":1626679600001},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"4e629f510b73f998ab208b739c5bd7dcd168d1a7","modified":1626679600001},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"f59a9a0059d5261251bdd6de45aa97dd2d11e633","modified":1626679600001},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"b0488ceacde74af139d66c8db5cb36cc21737b9b","modified":1626679600001},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"6874adc2e276443f354bbe50d0072e9bec37243c","modified":1626679600002},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"e554549f0a0ae85362f0b0e8687981741f486f6b","modified":1626679600002},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"90d1ce76b0486ede809bc3b5d4935c22ee376c91","modified":1626679600002},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"2cc49d3f6a6beb9f7bff93e292f88aa5681da1d0","modified":1626679600002},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"7c4152162a03aa8331a783df5695e4ebbb816a8c","modified":1626679600002},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9a881c031f463c486bd25248c2814fd09f97892b","modified":1626679600002},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"917e0e399e117217184ca63d3eb5c4843bcccf7b","modified":1626679600003},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"f168f5c669978f633abe118cdcc4a12cfc883c01","modified":1626679600003},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"1c3f9d7efc3b9dfcfa8926a1132d0c44ffc7d4b2","modified":1626679600003},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"6befe4c51b86d0c1de130beeecad9e28d6442713","modified":1626679600003},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"53ecae272e16223a436c497abbf25dd5f0fc4aaa","modified":1626679600003},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d0386ba6d8d63afc72b9673e8f3e89df6446ffc2","modified":1626679600003},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"21964fdd6d74ffbea519418bab65024aee5f3736","modified":1626679600004},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1626679600004},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"f741e85295ce15c70a6027ec15a542636dd5dcca","modified":1626679600004},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"86fee274a62f7f034547342930f445c47378eb55","modified":1626679600004},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"1756791581c0ec51cb03353a09dac4778d944349","modified":1626679600004},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1626679600005},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1626679600007},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"459e2541afda483916d16fce4aaa56b41bcd42ba","modified":1626679600007},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1626679599986},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"7848ec58c6ec03243abf80a3b22b4dc10f3edf53","modified":1626679599986},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"ef1b2b5b980d6aeaa5d06b97d1afc9644b155a16","modified":1626679599987},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"e3bf847553515174f6085df982f0623e9783db7a","modified":1626679599987},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"bba9871f446c10ffcc8fa9023f5a2eb701a86bae","modified":1626679599987},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"400ce038548d6f9ddb486150c724c87b6923a88b","modified":1626679599987},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1626679599987},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1626679599988},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1626679599988},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1626679599987},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"3f05f8311ae559d768ee3d0925e84ed767c314d3","modified":1626679599988},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1626679599988},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"2e52c64e89f16267596a8465841dd46f51820982","modified":1626679599988},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"a111407fdcafcf1099e26ffa69786f8822c5d9fb","modified":1626679599988},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"c46a932257212f82e4a9974fbbc5de8878c8b383","modified":1626679599988},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0b7571919e8ad51285deda56a1868fccf8c563d7","modified":1626679599989},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"bafb3d5710824caa59a56017afb058fd2b4eac65","modified":1626679599989},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"da9813f8dc0d388869c15413cf056012cfb69e1a","modified":1626679599989},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1626679599989},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"2b45fe09d5b591dca156b76dae99981f8d8e1c61","modified":1626679599989},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"16378d8646ea3f4ac99c18f0296dd85b13f9d775","modified":1626679599989},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"b871ea208e36398b4d668db9a9a0b61c79415381","modified":1626679599989},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"360845d02c3864975349ae60b3d0c68253ca001c","modified":1626679599990},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1626679599990},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"a47d8f9f593091cc91192c0c49deaa2c0d2317fd","modified":1626679599990},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f9b00ead54573ba6e6eb33481588af144aab648d","modified":1626679599990},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"3f3a3cd8bea2103dedd754f767aca5cb84d5f586","modified":1626679599990},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"b443d6b16baf3ea250041342cc0361a42a412b7f","modified":1626679599990},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f6506ccfd1ce994b9e53aa95588d0b6dbad11411","modified":1626679599991},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"34088a15655704d12e9b1807b47b3f6a860c9eec","modified":1626679599991},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"cb38ffe911023092a90a28f2ba8317a92b22cd0c","modified":1626679599991},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"59b4c26a827ace5a54855881d199977103ff6f50","modified":1626679599991},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"a2bc2601b7e0ae5caf1fc51a07390562d928620a","modified":1626679599991},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"d8f59e94eafc669c49349561dc5bbea3915aecb7","modified":1626679599992},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1626679599992},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"613280d61b8ab9612014ec016ae3d3698d36fd1a","modified":1626679599992},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1626679599992},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"309f51bc5302e72fc469d54c577fbcfe57fb07a8","modified":1626679599992},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1626679599992},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"006acc91ce25fc7c7d778ca043e970f57dc46b83","modified":1626679599993},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"8c0726fb8d9a497d2f900b0be2845efaa68e3d87","modified":1626679599998},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"89cbcc8e087788ecec18b5fa58710afacdb7d080","modified":1626679599998},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1626679599999},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"e0e7065124ef0d99f8322a47bc47838982e04ad0","modified":1626679599999},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1626679599999},{"_id":"themes/butterfly/source/img/toux.jpg","hash":"22a993db990c69e2e69fdd6c760b41f709a39723","modified":1626680659172},{"_id":"source/imgs/motuo3.jpeg","hash":"b776974bafa824846f140aca434f5cc7941d8bec","modified":1626681865579},{"_id":"source/imgs/motuo8.jpeg","hash":"fd479b8575095395a332caf98e98e163750b1e61","modified":1626681884243},{"_id":"public/atom.xml","hash":"b664fd498c4a3f39748b455540671ac1014c6c5f","modified":1626688610931},{"_id":"public/content.json","hash":"41684351ba53814cf83304f39ca655623b4445f9","modified":1626688610931},{"_id":"public/sitemap.xml","hash":"d67bad5d8951730805d7a74762aecd76885336c6","modified":1626688610931},{"_id":"public/about/index.html","hash":"24d2e9c4c5089aa677639bf2641a3f5081356198","modified":1626688610931},{"_id":"public/categories/index.html","hash":"7f948ba6618d7f0c4560caa61c7ac7df1af7d43f","modified":1626688610931},{"_id":"public/link/index.html","hash":"8e01c37ea26cc4baee5c39a095ac861c3cb9d626","modified":1626688610931},{"_id":"public/tags/index.html","hash":"8187572e65579f09ed5b4595a7c9f51fe2c1e8b5","modified":1626688610931},{"_id":"public/2021/07/19/闭包/index.html","hash":"b63ee9f0cdb141b363679aac62142aab7d2041c3","modified":1626688610931},{"_id":"public/2021/07/19/深拷贝与浅拷贝/index.html","hash":"69314801234f9bde677d742a459e6972bf8a5507","modified":1626688610931},{"_id":"public/2021/07/19/函数作用域、作用域快/index.html","hash":"86816441964322281de36b84c973d67cf55d524e","modified":1626688610931},{"_id":"public/2021/07/19/this词法/index.html","hash":"379150481f56d57d148361f725df6a95357175ca","modified":1626688610931},{"_id":"public/2021/07/19/作用域是什么-词法作用域/index.html","hash":"8a86a82e5b6ae61eeccac2a22c3e969fa9e096b1","modified":1626688610931},{"_id":"public/2021/07/19/remarks/index.html","hash":"9a438f76025570f9552365e03b5b45dad24db73e","modified":1626688610931},{"_id":"public/2021/07/19/js数据类型/index.html","hash":"bc589daf5f5d56f67fd6a4b9acde532289800d83","modified":1626688610931},{"_id":"public/archives/index.html","hash":"b8e81a9588e043ebeeb78906675d7fb531c1bdf0","modified":1626688610931},{"_id":"public/archives/2021/index.html","hash":"c019f4d9a9546e274f5eddb0e353a3a72f7f25be","modified":1626688610931},{"_id":"public/archives/2021/07/index.html","hash":"232f59cbccda8a08ef75b56db08d03b9e259ba2f","modified":1626688610931},{"_id":"public/tags/javaScript/index.html","hash":"c8377031df7291c70c32d85e2144b3b4947fb532","modified":1626688610931},{"_id":"public/index.html","hash":"6330d05fae1a10ed58057eeac8b696f12645bc17","modified":1626688610931},{"_id":"public/tags/markdown/index.html","hash":"19a751220bb4630b921edabc00faa1e86510dad0","modified":1626688610931},{"_id":"public/tags/javsScript/index.html","hash":"8121f63182443b3d2893f9a51c00e58d48917e36","modified":1626688610931},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1626688610931},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1626688610931},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1626688610931},{"_id":"public/CNAME","hash":"8e9eb789ad6415da2dc8f4a8dbc3234ef11c1970","modified":1626688610931},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1626688610931},{"_id":"public/img/toux.jpg","hash":"22a993db990c69e2e69fdd6c760b41f709a39723","modified":1626688610931},{"_id":"public/imgs/diaoyu2.jpeg","hash":"27094ef2c961cf0a63713d626b980e2cb8bcce68","modified":1626688610931},{"_id":"public/imgs/diaoyu3.jpeg","hash":"26a6f54633e66a2303d4f3b668f3f634b6a648c3","modified":1626688610931},{"_id":"public/imgs/diaoyu6.jpeg","hash":"8eb7ef80b6650e27274672e7134edee935ec8108","modified":1626688610931},{"_id":"public/imgs/diaoyu4.jpeg","hash":"e70eddd3d9367050f9a7efc52c9c6a9fc302e452","modified":1626688610931},{"_id":"public/imgs/diaoyu5.jpeg","hash":"907c27907fa6bbf10f693ca52acdb7376cd68867","modified":1626688610931},{"_id":"public/imgs/motuo4.jpeg","hash":"f16be5fd6ec367616b53984e608d4224d786def9","modified":1626688610931},{"_id":"public/imgs/motuo9.jpeg","hash":"1a92729e47c7fa98ff173c022099fa71b8396316","modified":1626688610931},{"_id":"public/css/custom.css","hash":"7e317f6d15f1a6bd1023e4ff340bb0efd47d3f8b","modified":1626688610931},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1626688610931},{"_id":"public/css/custom copy.css","hash":"7e317f6d15f1a6bd1023e4ff340bb0efd47d3f8b","modified":1626688610931},{"_id":"public/js/utils.js","hash":"8319b59c26ce8cd2b0ae7d030c4912215148fa92","modified":1626688610931},{"_id":"public/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1626688610931},{"_id":"public/js/search/local-search.js","hash":"459e2541afda483916d16fce4aaa56b41bcd42ba","modified":1626688610931},{"_id":"public/css/index.css","hash":"162226736428fcb081d6386771f4e7910e34d1ff","modified":1626688610931},{"_id":"public/imgs/motuo1.jpeg","hash":"9bca8a54e61479cccc39608b0c79669674726974","modified":1626688610931},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1626688610931},{"_id":"public/js/main.js","hash":"8ef2821ceb92d81aa0f8c02ee932f094adcafb2b","modified":1626688610931},{"_id":"public/imgs/motuo6.jpeg","hash":"387f40d203854c3879be5d24d6c7838604179d3a","modified":1626688610931},{"_id":"public/imgs/diaoyu1.jpeg","hash":"ccfa2ef2d75c6c3bbcf8966b616d0e7b7668d407","modified":1626688610931},{"_id":"public/imgs/motuo7.jpeg","hash":"74919878cbbe3a6b37554b37521272376c608afc","modified":1626688610931},{"_id":"public/imgs/motuo5.jpeg","hash":"25da2996e62b519c730a6ea5c6b38fa9bc14f8d7","modified":1626688610931},{"_id":"public/imgs/motuo2.jpeg","hash":"ab9cd3edfb5c58d543e7a2340b72cd37514b3fd2","modified":1626688610931},{"_id":"public/imgs/motuo3.jpeg","hash":"b776974bafa824846f140aca434f5cc7941d8bec","modified":1626688610931},{"_id":"public/imgs/motuo8.jpeg","hash":"fd479b8575095395a332caf98e98e163750b1e61","modified":1626688610931}],"Category":[],"Data":[{"_id":"link","data":[{"class_name":"友情链接","class_desc":"他的技术真了不得","link_list":[{"name":"江橙","link":"https://blogs.chenghuizi.com/","avatar":"/imgs/motuo1.jpeg","descr":"今天你学习了么？"},{"name":"娄豪杰","link":"https://louhaojie99.top/","avatar":"/imgs/motuo2.jpeg","descr":"人生就像品茗，懂得吃苦，才能回甘啊"}]}]}],"Page":[{"title":"关于我","date":"2021-07-19T08:47:46.000Z","type":"about","_content":"\n我叫陈铭，1999年1月14出生在湖北黄冈，2016年进入黄冈职业技术学院，学习软件与信息服务。2019年6月份毕业来到杭州参加了第一份工作，从事前端开发。\n2020年升级学历为湖北工业大学，专业为计算机科学与技术。\n学习永无止境、宜早不宜迟！\n\n生活就是要快乐，快乐就是要钓鱼！\n![Image text](../imgs/diaoyu1.jpeg)\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2021-07-19 16:47:46\ntype: about\n---\n\n我叫陈铭，1999年1月14出生在湖北黄冈，2016年进入黄冈职业技术学院，学习软件与信息服务。2019年6月份毕业来到杭州参加了第一份工作，从事前端开发。\n2020年升级学历为湖北工业大学，专业为计算机科学与技术。\n学习永无止境、宜早不宜迟！\n\n生活就是要快乐，快乐就是要钓鱼！\n![Image text](../imgs/diaoyu1.jpeg)\n","updated":"2021-07-19T09:06:04.995Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckragdtcp0000hbanepagbyjp","content":"<p>我叫陈铭，1999年1月14出生在湖北黄冈，2016年进入黄冈职业技术学院，学习软件与信息服务。2019年6月份毕业来到杭州参加了第一份工作，从事前端开发。<br>2020年升级学历为湖北工业大学，专业为计算机科学与技术。<br>学习永无止境、宜早不宜迟！</p>\n<p>生活就是要快乐，快乐就是要钓鱼！<br><img src=\"../imgs/diaoyu1.jpeg\" alt=\"Image text\"></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"他的技术真了不得","link_list":[{"name":"江橙","link":"https://blogs.chenghuizi.com/","avatar":"/imgs/motuo1.jpeg","descr":"今天你学习了么？"},{"name":"娄豪杰","link":"https://louhaojie99.top/","avatar":"/imgs/motuo2.jpeg","descr":"人生就像品茗，懂得吃苦，才能回甘啊"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<p>我叫陈铭，1999年1月14出生在湖北黄冈，2016年进入黄冈职业技术学院，学习软件与信息服务。2019年6月份毕业来到杭州参加了第一份工作，从事前端开发。<br>2020年升级学历为湖北工业大学，专业为计算机科学与技术。<br>学习永无止境、宜早不宜迟！</p>\n<p>生活就是要快乐，快乐就是要钓鱼！<br><img src=\"../imgs/diaoyu1.jpeg\" alt=\"Image text\"></p>\n"},{"title":"分类","date":"2021-07-19T08:28:19.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-07-19 16:28:19\ntype: categories\n---\n","updated":"2021-07-19T08:29:05.750Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckragdtct0001hban9sjhfe1t","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"他的技术真了不得","link_list":[{"name":"江橙","link":"https://blogs.chenghuizi.com/","avatar":"/imgs/motuo1.jpeg","descr":"今天你学习了么？"},{"name":"娄豪杰","link":"https://louhaojie99.top/","avatar":"/imgs/motuo2.jpeg","descr":"人生就像品茗，懂得吃苦，才能回甘啊"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"友情链接","date":"2021-07-19T08:16:44.000Z","type":"link","_content":"\n","source":"link/index.md","raw":"---\ntitle: 友情链接\ndate: 2021-07-19 16:16:44\ntype: \"link\"\n---\n\n","updated":"2021-07-19T08:21:40.679Z","path":"link/index.html","comments":1,"layout":"page","_id":"ckragdtct0002hban0bo00eyx","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"他的技术真了不得","link_list":[{"name":"江橙","link":"https://blogs.chenghuizi.com/","avatar":"/imgs/motuo1.jpeg","descr":"今天你学习了么？"},{"name":"娄豪杰","link":"https://louhaojie99.top/","avatar":"/imgs/motuo2.jpeg","descr":"人生就像品茗，懂得吃苦，才能回甘啊"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"tags","date":"2021-07-19T08:44:20.000Z","type":"tags","_content":"\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-07-19 16:44:20\ntype: tags\n---\n\n","updated":"2021-07-19T08:45:16.032Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckragdtcu0003hbanc5ee9nav","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"他的技术真了不得","link_list":[{"name":"江橙","link":"https://blogs.chenghuizi.com/","avatar":"/imgs/motuo1.jpeg","descr":"今天你学习了么？"},{"name":"娄豪杰","link":"https://louhaojie99.top/","avatar":"/imgs/motuo2.jpeg","descr":"人生就像品茗，懂得吃苦，才能回甘啊"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""}],"Post":[{"title":"js数据类型","type":"javaScript","_content":"\n> 基本数据类型、引用数据类型\n\nECMAScript包括两个不同类型的值：基本数据类型和引用数据类型。\n基本数据类型指的是简单的数据段，引用数据类型指的是有多个值构成的对象。\n当我们把变量赋值给一个变量时，解析器首先要确认的就是这个值是基本类型值还是引用类型值。\n\n### 常见的基本数据类型\n\nNumber、String 、Boolean、Null和Undefined。基本数据类型是按值访问的，因为可以直接操作保存在变量中的实际值。示例：\n　　var a = 10;\n　　var b = a;\n　　b = 20;\n　　console.log(a); // 10值\n　　上面，b获取的是a值得一份拷贝，虽然，两个变量的值相等，但是两个变量保存了两个不同的基本数据类型值。\n　　b只是保存了a复制的一个副本。所以，b的改变，对a没有影响。\n\n\n### 引用类型数据\n  也就是对象类型Object type，比如：Object 、Array 、Function 、Data等。\n　　javascript的引用数据类型是保存在堆内存中的对象。\n　　与其他语言的不同是，你不可以直接访问堆内存空间中的位置和操作堆内存空间。只能操作对象在栈内存中的引用地址。\n　　所以，引用类型数据在栈内存中保存的实际上是对象在堆内存中的引用地址。通过这个引用地址可以快速查找到保存中堆内存中的对象。\n　　var obj1 = new Object();\n　　var obj2 = obj1;\n　　obj2.name = \"我有名字了\";\n　　console.log(obj1.name); // 我有名字了\n　　说明这两个引用数据类型指向了同一个堆内存对象。obj1赋值给onj2，实际上这个堆内存对象在栈内存的引用地址复制了一份给了obj2，\n　　但是实际上他们共同指向了同一个堆内存对象。实际上改变的是堆内存对象。\n\n> 总结区别\n\n### 声明变量时不同的内存分配：　\n　　1）原始值：存储在栈（stack）中的简单数据段，也就是说，它们的值直接存储在变量访问的位置。\n　　　　这是因为这些原始类型占据的空间是固定的，所以可将他们存储在较小的内存区域 – 栈中。这样存储便于迅速查寻变量的值。\n　　2）引用值：存储在堆（heap）中的对象，也就是说，存储在变量处的值是一个指针（point），指向存储对象的内存地址。\n　　　  这是因为：引用值的大小会改变，所以不能把它放在栈中，否则会降低变量查寻的速度。相反，放在变量的栈空间中的值是该对象存储在堆中的地址。\n　　　  地址的大小是固定的，所以把它存储在栈中对变量性能无任何负面影响。\n\n### 不同的内存分配机制也带来了不同的访问机制\n　　　\n　　1）在javascript中是不允许直接访问保存在堆内存中的对象的，所以在访问一个对象时，\n　　　　首先得到的是这个对象在堆内存中的地址，然后再按照这个地址去获得这个对象中的值，这就是传说中的按引用访问。\n　　2）而原始类型的值则是可以直接访问到的。\n　　\n　　c 复制变量时的不同\n　　\n　　1）原始值：在将一个保存着原始值的变量复制给另一个变量时，会将原始值的副本赋值给新变量，此后这两个变量是完全独立的，他们只是拥有相同的value而已。\n　　2）引用值：在将一个保存着对象内存地址的变量复制给另一个变量时，会把这个内存地址赋值给新变量，\n　　　　也就是说这两个变量都指向了堆内存中的同一个对象，他们中任何一个作出的改变都会反映在另一个身上。\n　　　　（这里要理解的一点就是，复制对象时并不会在堆内存中新生成一个一模一样的对象，只是多了一个保存指向这个对象指针的变量罢了）。多了一个指针\n　\n### 参数传递的不同（把实参复制给形参的过程）\n\n　　首先我们应该明确一点：ECMAScript中所有函数的参数都是按值来传递的。\n　　但是为什么涉及到原始类型与引用类型的值时仍然有区别呢？还不就是因为内存分配时的差别。 　\n　　1）原始值：只是把变量里的值传递给参数，之后参数和这个变量互不影响。\n　　2）引用值：对象变量它里面的值是这个对象在堆内存中的内存地址，这一点你要时刻铭记在心！\n　　　　因此它传递的值也就是这个内存地址，这也就是为什么函数内部对这个参数的修改会体现在外部的原因了，因为它们都指向同一个对象。\n","source":"_posts/js数据类型.md","raw":"---\ntitle: js数据类型\ntag: javaScript\ntype: javaScript\n---\n\n> 基本数据类型、引用数据类型\n\nECMAScript包括两个不同类型的值：基本数据类型和引用数据类型。\n基本数据类型指的是简单的数据段，引用数据类型指的是有多个值构成的对象。\n当我们把变量赋值给一个变量时，解析器首先要确认的就是这个值是基本类型值还是引用类型值。\n\n### 常见的基本数据类型\n\nNumber、String 、Boolean、Null和Undefined。基本数据类型是按值访问的，因为可以直接操作保存在变量中的实际值。示例：\n　　var a = 10;\n　　var b = a;\n　　b = 20;\n　　console.log(a); // 10值\n　　上面，b获取的是a值得一份拷贝，虽然，两个变量的值相等，但是两个变量保存了两个不同的基本数据类型值。\n　　b只是保存了a复制的一个副本。所以，b的改变，对a没有影响。\n\n\n### 引用类型数据\n  也就是对象类型Object type，比如：Object 、Array 、Function 、Data等。\n　　javascript的引用数据类型是保存在堆内存中的对象。\n　　与其他语言的不同是，你不可以直接访问堆内存空间中的位置和操作堆内存空间。只能操作对象在栈内存中的引用地址。\n　　所以，引用类型数据在栈内存中保存的实际上是对象在堆内存中的引用地址。通过这个引用地址可以快速查找到保存中堆内存中的对象。\n　　var obj1 = new Object();\n　　var obj2 = obj1;\n　　obj2.name = \"我有名字了\";\n　　console.log(obj1.name); // 我有名字了\n　　说明这两个引用数据类型指向了同一个堆内存对象。obj1赋值给onj2，实际上这个堆内存对象在栈内存的引用地址复制了一份给了obj2，\n　　但是实际上他们共同指向了同一个堆内存对象。实际上改变的是堆内存对象。\n\n> 总结区别\n\n### 声明变量时不同的内存分配：　\n　　1）原始值：存储在栈（stack）中的简单数据段，也就是说，它们的值直接存储在变量访问的位置。\n　　　　这是因为这些原始类型占据的空间是固定的，所以可将他们存储在较小的内存区域 – 栈中。这样存储便于迅速查寻变量的值。\n　　2）引用值：存储在堆（heap）中的对象，也就是说，存储在变量处的值是一个指针（point），指向存储对象的内存地址。\n　　　  这是因为：引用值的大小会改变，所以不能把它放在栈中，否则会降低变量查寻的速度。相反，放在变量的栈空间中的值是该对象存储在堆中的地址。\n　　　  地址的大小是固定的，所以把它存储在栈中对变量性能无任何负面影响。\n\n### 不同的内存分配机制也带来了不同的访问机制\n　　　\n　　1）在javascript中是不允许直接访问保存在堆内存中的对象的，所以在访问一个对象时，\n　　　　首先得到的是这个对象在堆内存中的地址，然后再按照这个地址去获得这个对象中的值，这就是传说中的按引用访问。\n　　2）而原始类型的值则是可以直接访问到的。\n　　\n　　c 复制变量时的不同\n　　\n　　1）原始值：在将一个保存着原始值的变量复制给另一个变量时，会将原始值的副本赋值给新变量，此后这两个变量是完全独立的，他们只是拥有相同的value而已。\n　　2）引用值：在将一个保存着对象内存地址的变量复制给另一个变量时，会把这个内存地址赋值给新变量，\n　　　　也就是说这两个变量都指向了堆内存中的同一个对象，他们中任何一个作出的改变都会反映在另一个身上。\n　　　　（这里要理解的一点就是，复制对象时并不会在堆内存中新生成一个一模一样的对象，只是多了一个保存指向这个对象指针的变量罢了）。多了一个指针\n　\n### 参数传递的不同（把实参复制给形参的过程）\n\n　　首先我们应该明确一点：ECMAScript中所有函数的参数都是按值来传递的。\n　　但是为什么涉及到原始类型与引用类型的值时仍然有区别呢？还不就是因为内存分配时的差别。 　\n　　1）原始值：只是把变量里的值传递给参数，之后参数和这个变量互不影响。\n　　2）引用值：对象变量它里面的值是这个对象在堆内存中的内存地址，这一点你要时刻铭记在心！\n　　　　因此它传递的值也就是这个内存地址，这也就是为什么函数内部对这个参数的修改会体现在外部的原因了，因为它们都指向同一个对象。\n","slug":"js数据类型","published":1,"date":"2021-07-19T06:37:12.300Z","updated":"2021-07-19T08:41:02.994Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckragdtcw0004hbanemrw5h4o","content":"<blockquote>\n<p>基本数据类型、引用数据类型</p>\n</blockquote>\n<p>ECMAScript包括两个不同类型的值：基本数据类型和引用数据类型。<br>基本数据类型指的是简单的数据段，引用数据类型指的是有多个值构成的对象。<br>当我们把变量赋值给一个变量时，解析器首先要确认的就是这个值是基本类型值还是引用类型值。</p>\n<h3 id=\"常见的基本数据类型\"><a href=\"#常见的基本数据类型\" class=\"headerlink\" title=\"常见的基本数据类型\"></a>常见的基本数据类型</h3><p>Number、String 、Boolean、Null和Undefined。基本数据类型是按值访问的，因为可以直接操作保存在变量中的实际值。示例：<br>　　var a = 10;<br>　　var b = a;<br>　　b = 20;<br>　　console.log(a); // 10值<br>　　上面，b获取的是a值得一份拷贝，虽然，两个变量的值相等，但是两个变量保存了两个不同的基本数据类型值。<br>　　b只是保存了a复制的一个副本。所以，b的改变，对a没有影响。</p>\n<h3 id=\"引用类型数据\"><a href=\"#引用类型数据\" class=\"headerlink\" title=\"引用类型数据\"></a>引用类型数据</h3><p>  也就是对象类型Object type，比如：Object 、Array 、Function 、Data等。<br>　　javascript的引用数据类型是保存在堆内存中的对象。<br>　　与其他语言的不同是，你不可以直接访问堆内存空间中的位置和操作堆内存空间。只能操作对象在栈内存中的引用地址。<br>　　所以，引用类型数据在栈内存中保存的实际上是对象在堆内存中的引用地址。通过这个引用地址可以快速查找到保存中堆内存中的对象。<br>　　var obj1 = new Object();<br>　　var obj2 = obj1;<br>　　obj2.name = “我有名字了”;<br>　　console.log(obj1.name); // 我有名字了<br>　　说明这两个引用数据类型指向了同一个堆内存对象。obj1赋值给onj2，实际上这个堆内存对象在栈内存的引用地址复制了一份给了obj2，<br>　　但是实际上他们共同指向了同一个堆内存对象。实际上改变的是堆内存对象。</p>\n<blockquote>\n<p>总结区别</p>\n</blockquote>\n<h3 id=\"声明变量时不同的内存分配：\"><a href=\"#声明变量时不同的内存分配：\" class=\"headerlink\" title=\"声明变量时不同的内存分配：\"></a>声明变量时不同的内存分配：</h3><p>　　1）原始值：存储在栈（stack）中的简单数据段，也就是说，它们的值直接存储在变量访问的位置。<br>　　　　这是因为这些原始类型占据的空间是固定的，所以可将他们存储在较小的内存区域 – 栈中。这样存储便于迅速查寻变量的值。<br>　　2）引用值：存储在堆（heap）中的对象，也就是说，存储在变量处的值是一个指针（point），指向存储对象的内存地址。<br>　　　  这是因为：引用值的大小会改变，所以不能把它放在栈中，否则会降低变量查寻的速度。相反，放在变量的栈空间中的值是该对象存储在堆中的地址。<br>　　　  地址的大小是固定的，所以把它存储在栈中对变量性能无任何负面影响。</p>\n<h3 id=\"不同的内存分配机制也带来了不同的访问机制\"><a href=\"#不同的内存分配机制也带来了不同的访问机制\" class=\"headerlink\" title=\"不同的内存分配机制也带来了不同的访问机制\"></a>不同的内存分配机制也带来了不同的访问机制</h3><p>　　　<br>　　1）在javascript中是不允许直接访问保存在堆内存中的对象的，所以在访问一个对象时，<br>　　　　首先得到的是这个对象在堆内存中的地址，然后再按照这个地址去获得这个对象中的值，这就是传说中的按引用访问。<br>　　2）而原始类型的值则是可以直接访问到的。<br>　　<br>　　c 复制变量时的不同<br>　　<br>　　1）原始值：在将一个保存着原始值的变量复制给另一个变量时，会将原始值的副本赋值给新变量，此后这两个变量是完全独立的，他们只是拥有相同的value而已。<br>　　2）引用值：在将一个保存着对象内存地址的变量复制给另一个变量时，会把这个内存地址赋值给新变量，<br>　　　　也就是说这两个变量都指向了堆内存中的同一个对象，他们中任何一个作出的改变都会反映在另一个身上。<br>　　　　（这里要理解的一点就是，复制对象时并不会在堆内存中新生成一个一模一样的对象，只是多了一个保存指向这个对象指针的变量罢了）。多了一个指针\n　</p>\n<h3 id=\"参数传递的不同（把实参复制给形参的过程）\"><a href=\"#参数传递的不同（把实参复制给形参的过程）\" class=\"headerlink\" title=\"参数传递的不同（把实参复制给形参的过程）\"></a>参数传递的不同（把实参复制给形参的过程）</h3><p>　　首先我们应该明确一点：ECMAScript中所有函数的参数都是按值来传递的。<br>　　但是为什么涉及到原始类型与引用类型的值时仍然有区别呢？还不就是因为内存分配时的差别。 　<br>　　1）原始值：只是把变量里的值传递给参数，之后参数和这个变量互不影响。<br>　　2）引用值：对象变量它里面的值是这个对象在堆内存中的内存地址，这一点你要时刻铭记在心！<br>　　　　因此它传递的值也就是这个内存地址，这也就是为什么函数内部对这个参数的修改会体现在外部的原因了，因为它们都指向同一个对象。</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"他的技术真了不得","link_list":[{"name":"江橙","link":"https://blogs.chenghuizi.com/","avatar":"/imgs/motuo1.jpeg","descr":"今天你学习了么？"},{"name":"娄豪杰","link":"https://louhaojie99.top/","avatar":"/imgs/motuo2.jpeg","descr":"人生就像品茗，懂得吃苦，才能回甘啊"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<blockquote>\n<p>基本数据类型、引用数据类型</p>\n</blockquote>\n<p>ECMAScript包括两个不同类型的值：基本数据类型和引用数据类型。<br>基本数据类型指的是简单的数据段，引用数据类型指的是有多个值构成的对象。<br>当我们把变量赋值给一个变量时，解析器首先要确认的就是这个值是基本类型值还是引用类型值。</p>\n<h3 id=\"常见的基本数据类型\"><a href=\"#常见的基本数据类型\" class=\"headerlink\" title=\"常见的基本数据类型\"></a>常见的基本数据类型</h3><p>Number、String 、Boolean、Null和Undefined。基本数据类型是按值访问的，因为可以直接操作保存在变量中的实际值。示例：<br>　　var a = 10;<br>　　var b = a;<br>　　b = 20;<br>　　console.log(a); // 10值<br>　　上面，b获取的是a值得一份拷贝，虽然，两个变量的值相等，但是两个变量保存了两个不同的基本数据类型值。<br>　　b只是保存了a复制的一个副本。所以，b的改变，对a没有影响。</p>\n<h3 id=\"引用类型数据\"><a href=\"#引用类型数据\" class=\"headerlink\" title=\"引用类型数据\"></a>引用类型数据</h3><p>  也就是对象类型Object type，比如：Object 、Array 、Function 、Data等。<br>　　javascript的引用数据类型是保存在堆内存中的对象。<br>　　与其他语言的不同是，你不可以直接访问堆内存空间中的位置和操作堆内存空间。只能操作对象在栈内存中的引用地址。<br>　　所以，引用类型数据在栈内存中保存的实际上是对象在堆内存中的引用地址。通过这个引用地址可以快速查找到保存中堆内存中的对象。<br>　　var obj1 = new Object();<br>　　var obj2 = obj1;<br>　　obj2.name = “我有名字了”;<br>　　console.log(obj1.name); // 我有名字了<br>　　说明这两个引用数据类型指向了同一个堆内存对象。obj1赋值给onj2，实际上这个堆内存对象在栈内存的引用地址复制了一份给了obj2，<br>　　但是实际上他们共同指向了同一个堆内存对象。实际上改变的是堆内存对象。</p>\n<blockquote>\n<p>总结区别</p>\n</blockquote>\n<h3 id=\"声明变量时不同的内存分配：\"><a href=\"#声明变量时不同的内存分配：\" class=\"headerlink\" title=\"声明变量时不同的内存分配：\"></a>声明变量时不同的内存分配：</h3><p>　　1）原始值：存储在栈（stack）中的简单数据段，也就是说，它们的值直接存储在变量访问的位置。<br>　　　　这是因为这些原始类型占据的空间是固定的，所以可将他们存储在较小的内存区域 – 栈中。这样存储便于迅速查寻变量的值。<br>　　2）引用值：存储在堆（heap）中的对象，也就是说，存储在变量处的值是一个指针（point），指向存储对象的内存地址。<br>　　　  这是因为：引用值的大小会改变，所以不能把它放在栈中，否则会降低变量查寻的速度。相反，放在变量的栈空间中的值是该对象存储在堆中的地址。<br>　　　  地址的大小是固定的，所以把它存储在栈中对变量性能无任何负面影响。</p>\n<h3 id=\"不同的内存分配机制也带来了不同的访问机制\"><a href=\"#不同的内存分配机制也带来了不同的访问机制\" class=\"headerlink\" title=\"不同的内存分配机制也带来了不同的访问机制\"></a>不同的内存分配机制也带来了不同的访问机制</h3><p>　　　<br>　　1）在javascript中是不允许直接访问保存在堆内存中的对象的，所以在访问一个对象时，<br>　　　　首先得到的是这个对象在堆内存中的地址，然后再按照这个地址去获得这个对象中的值，这就是传说中的按引用访问。<br>　　2）而原始类型的值则是可以直接访问到的。<br>　　<br>　　c 复制变量时的不同<br>　　<br>　　1）原始值：在将一个保存着原始值的变量复制给另一个变量时，会将原始值的副本赋值给新变量，此后这两个变量是完全独立的，他们只是拥有相同的value而已。<br>　　2）引用值：在将一个保存着对象内存地址的变量复制给另一个变量时，会把这个内存地址赋值给新变量，<br>　　　　也就是说这两个变量都指向了堆内存中的同一个对象，他们中任何一个作出的改变都会反映在另一个身上。<br>　　　　（这里要理解的一点就是，复制对象时并不会在堆内存中新生成一个一模一样的对象，只是多了一个保存指向这个对象指针的变量罢了）。多了一个指针\n　</p>\n<h3 id=\"参数传递的不同（把实参复制给形参的过程）\"><a href=\"#参数传递的不同（把实参复制给形参的过程）\" class=\"headerlink\" title=\"参数传递的不同（把实参复制给形参的过程）\"></a>参数传递的不同（把实参复制给形参的过程）</h3><p>　　首先我们应该明确一点：ECMAScript中所有函数的参数都是按值来传递的。<br>　　但是为什么涉及到原始类型与引用类型的值时仍然有区别呢？还不就是因为内存分配时的差别。 　<br>　　1）原始值：只是把变量里的值传递给参数，之后参数和这个变量互不影响。<br>　　2）引用值：对象变量它里面的值是这个对象在堆内存中的内存地址，这一点你要时刻铭记在心！<br>　　　　因此它传递的值也就是这个内存地址，这也就是为什么函数内部对这个参数的修改会体现在外部的原因了，因为它们都指向同一个对象。</p>\n"},{"title":"markdown 写法备注","type":"文档","_content":"\n> 标题\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n\n> 无序列表\n* 1\n+ 2\n- 3\n\n> 有序列表\n1. 列表  \n2. 列表\n3. 列表\n\n>分割线\n***\n---\n\n>代码块 ```\n\n>文本样式\n\n  *字体倾斜*                >        <em>字体倾斜</em>\n  _字体倾斜_\n  **字体加粗**              >        <strong>字体加粗</strong>\n  __字体加粗__\n  ~~字体删除~~              >        <del>字体删除</del>\n ! 符号与字体之间不要有空格\n","source":"_posts/remarks.md","raw":"---\ntitle: markdown 写法备注\ntag: markdown\ntype: 文档\n---\n\n> 标题\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n\n> 无序列表\n* 1\n+ 2\n- 3\n\n> 有序列表\n1. 列表  \n2. 列表\n3. 列表\n\n>分割线\n***\n---\n\n>代码块 ```\n\n>文本样式\n\n  *字体倾斜*                >        <em>字体倾斜</em>\n  _字体倾斜_\n  **字体加粗**              >        <strong>字体加粗</strong>\n  __字体加粗__\n  ~~字体删除~~              >        <del>字体删除</del>\n ! 符号与字体之间不要有空格\n","slug":"remarks","published":1,"date":"2021-07-19T06:37:12.301Z","updated":"2021-07-19T08:41:17.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckragdtd00005hban2pd3g7o3","content":"<blockquote>\n<p>标题</p>\n</blockquote>\n<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4><blockquote>\n<p>无序列表</p>\n</blockquote>\n<ul>\n<li>1</li>\n</ul>\n<ul>\n<li>2</li>\n</ul>\n<ul>\n<li>3</li>\n</ul>\n<blockquote>\n<p>有序列表</p>\n</blockquote>\n<ol>\n<li>列表  </li>\n<li>列表</li>\n<li>列表</li>\n</ol>\n<blockquote>\n<p>分割线</p>\n</blockquote>\n<hr>\n<hr>\n<blockquote>\n<p>代码块 ```</p>\n</blockquote>\n<blockquote>\n<p>文本样式</p>\n</blockquote>\n<p>  <em>字体倾斜</em>                &gt;        <em>字体倾斜</em><br>  <em>字体倾斜</em><br>  <strong>字体加粗</strong>              &gt;        <strong>字体加粗</strong><br>  <strong>字体加粗</strong><br>  <del>字体删除</del>              &gt;        <del>字体删除</del><br> ! 符号与字体之间不要有空格</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"他的技术真了不得","link_list":[{"name":"江橙","link":"https://blogs.chenghuizi.com/","avatar":"/imgs/motuo1.jpeg","descr":"今天你学习了么？"},{"name":"娄豪杰","link":"https://louhaojie99.top/","avatar":"/imgs/motuo2.jpeg","descr":"人生就像品茗，懂得吃苦，才能回甘啊"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<blockquote>\n<p>标题</p>\n</blockquote>\n<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4><blockquote>\n<p>无序列表</p>\n</blockquote>\n<ul>\n<li>1</li>\n</ul>\n<ul>\n<li>2</li>\n</ul>\n<ul>\n<li>3</li>\n</ul>\n<blockquote>\n<p>有序列表</p>\n</blockquote>\n<ol>\n<li>列表  </li>\n<li>列表</li>\n<li>列表</li>\n</ol>\n<blockquote>\n<p>分割线</p>\n</blockquote>\n<hr>\n<hr>\n<blockquote>\n<p>代码块 ```</p>\n</blockquote>\n<blockquote>\n<p>文本样式</p>\n</blockquote>\n<p>  <em>字体倾斜</em>                &gt;        <em>字体倾斜</em><br>  <em>字体倾斜</em><br>  <strong>字体加粗</strong>              &gt;        <strong>字体加粗</strong><br>  <strong>字体加粗</strong><br>  <del>字体删除</del>              &gt;        <del>字体删除</del><br> ! 符号与字体之间不要有空格</p>\n"},{"title":"this词法","type":"javaScript","_content":"\nES6添加了一个特殊的词法形式的函数声明，叫做箭头函数，箭头函数在涉及this绑定的行为和普通函数的行为完全不一样，他放弃了所有的普通函数this绑定的规则，取而代之的是用当前的词法作用域覆盖了this原本的值。\n\n```JavaScript\nvar obj = {\n    count: 0,\n    cool: function coolFn() {\n        if(this.count < 1) {\n            setTimeout(() => {\n                this.count++;\n                console.log('awesome?');\n            },1000);\n        }\n    }\n}\nobj.cool();//awesome?\n```\n\n这个箭头函数中的this直接是cool()的this绑定（因此调用它并不会出错）\n\n它将程序员们经常犯的一个错误给标准化了，也就是混淆了this绑定规则和词法作用域规则。\n\n另一个导致箭头函数不够理想的原因是他不是具名的，而是一个匿名函数。\n\n\n### 误解：\n\n1. 人们很容易把this理解成指向函数自身。那么为什么函数要从内部引用函数自身呢？常见的原因是递归（从函数内部调用这个函数）或者可以写在第一次被调用后自己解除绑定事件处理器。\n2. 新手通常会认为，既然把函数看做一个对象，那就可以在调用函数时储存状态。\n\n\ncall\n```JavaScript\nfunction foo(num) {\n    console.log(\"foo\" + num);\n    this.count ++;\n}\nfoo.count = 0;\nvar i;\nfor(i = 0; i < 10; i++){\n    if(i > 5) {\n        // 使用call(...) 可以确保this指向函数本身\n        foo.call(foo, i)\n    }\n}\n// foo: 6\n// foo: 7\n// foo: 8\n// foo: 9\n\ncnosole.log(foo.count); // 4\n```\n\n### 它的作用域\n还有一种常见的错误是，this指向函数的作用域。这个问题在某中情况下是正确的，但是有时候又是错误的。需要明确的是this在任何情况下都不指向函数的词法作域。\n\n```JavaScript\nfunction foo(){\n    var a = 2;\n    this.bar(); //  能调用到bar也是意外，正常应该通过词法作用域，直接执行\n}\nfunction bar(){\n    console.log(this.a)\n}\n\nfoo();  // a not defined\n```\n\n\n==当你想把this和词法作用域的查找混合使用的时候，一定要提醒自己这是无法实现的==\n\n### 是什么\n\nthis不是在写代码时候绑定的而是代码在执行的时候绑定的，它的上下文取决于函数调用时的各种条件。\n\nthis的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。\n\n==当一个函数被执行时，会创建一个活动记录（有时候也被称之为执行上下文）。这个记录会包含函数在哪里被调用、函数的调用方式、传入参数等信息。this就是这个记录的一个属性，会在函数执行的过程中调用到。==\n\nthis实际上是在函数被调用的时候发生绑定，他指向什么完全取决于函数在哪里被调用。\n","source":"_posts/this词法.md","raw":"---\ntitle: this词法\ntag: javaScript\ntype: javaScript\n---\n\nES6添加了一个特殊的词法形式的函数声明，叫做箭头函数，箭头函数在涉及this绑定的行为和普通函数的行为完全不一样，他放弃了所有的普通函数this绑定的规则，取而代之的是用当前的词法作用域覆盖了this原本的值。\n\n```JavaScript\nvar obj = {\n    count: 0,\n    cool: function coolFn() {\n        if(this.count < 1) {\n            setTimeout(() => {\n                this.count++;\n                console.log('awesome?');\n            },1000);\n        }\n    }\n}\nobj.cool();//awesome?\n```\n\n这个箭头函数中的this直接是cool()的this绑定（因此调用它并不会出错）\n\n它将程序员们经常犯的一个错误给标准化了，也就是混淆了this绑定规则和词法作用域规则。\n\n另一个导致箭头函数不够理想的原因是他不是具名的，而是一个匿名函数。\n\n\n### 误解：\n\n1. 人们很容易把this理解成指向函数自身。那么为什么函数要从内部引用函数自身呢？常见的原因是递归（从函数内部调用这个函数）或者可以写在第一次被调用后自己解除绑定事件处理器。\n2. 新手通常会认为，既然把函数看做一个对象，那就可以在调用函数时储存状态。\n\n\ncall\n```JavaScript\nfunction foo(num) {\n    console.log(\"foo\" + num);\n    this.count ++;\n}\nfoo.count = 0;\nvar i;\nfor(i = 0; i < 10; i++){\n    if(i > 5) {\n        // 使用call(...) 可以确保this指向函数本身\n        foo.call(foo, i)\n    }\n}\n// foo: 6\n// foo: 7\n// foo: 8\n// foo: 9\n\ncnosole.log(foo.count); // 4\n```\n\n### 它的作用域\n还有一种常见的错误是，this指向函数的作用域。这个问题在某中情况下是正确的，但是有时候又是错误的。需要明确的是this在任何情况下都不指向函数的词法作域。\n\n```JavaScript\nfunction foo(){\n    var a = 2;\n    this.bar(); //  能调用到bar也是意外，正常应该通过词法作用域，直接执行\n}\nfunction bar(){\n    console.log(this.a)\n}\n\nfoo();  // a not defined\n```\n\n\n==当你想把this和词法作用域的查找混合使用的时候，一定要提醒自己这是无法实现的==\n\n### 是什么\n\nthis不是在写代码时候绑定的而是代码在执行的时候绑定的，它的上下文取决于函数调用时的各种条件。\n\nthis的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。\n\n==当一个函数被执行时，会创建一个活动记录（有时候也被称之为执行上下文）。这个记录会包含函数在哪里被调用、函数的调用方式、传入参数等信息。this就是这个记录的一个属性，会在函数执行的过程中调用到。==\n\nthis实际上是在函数被调用的时候发生绑定，他指向什么完全取决于函数在哪里被调用。\n","slug":"this词法","published":1,"date":"2021-07-19T06:37:12.302Z","updated":"2021-07-19T08:41:24.597Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckragdtd30007hban7e68by8o","content":"<p>ES6添加了一个特殊的词法形式的函数声明，叫做箭头函数，箭头函数在涉及this绑定的行为和普通函数的行为完全不一样，他放弃了所有的普通函数this绑定的规则，取而代之的是用当前的词法作用域覆盖了this原本的值。</p>\n<pre><code class=\"JavaScript\">var obj = &#123;\n    count: 0,\n    cool: function coolFn() &#123;\n        if(this.count &lt; 1) &#123;\n            setTimeout(() =&gt; &#123;\n                this.count++;\n                console.log(&#39;awesome?&#39;);\n            &#125;,1000);\n        &#125;\n    &#125;\n&#125;\nobj.cool();//awesome?\n</code></pre>\n<p>这个箭头函数中的this直接是cool()的this绑定（因此调用它并不会出错）</p>\n<p>它将程序员们经常犯的一个错误给标准化了，也就是混淆了this绑定规则和词法作用域规则。</p>\n<p>另一个导致箭头函数不够理想的原因是他不是具名的，而是一个匿名函数。</p>\n<h3 id=\"误解：\"><a href=\"#误解：\" class=\"headerlink\" title=\"误解：\"></a>误解：</h3><ol>\n<li>人们很容易把this理解成指向函数自身。那么为什么函数要从内部引用函数自身呢？常见的原因是递归（从函数内部调用这个函数）或者可以写在第一次被调用后自己解除绑定事件处理器。</li>\n<li>新手通常会认为，既然把函数看做一个对象，那就可以在调用函数时储存状态。</li>\n</ol>\n<p>call</p>\n<pre><code class=\"JavaScript\">function foo(num) &#123;\n    console.log(&quot;foo&quot; + num);\n    this.count ++;\n&#125;\nfoo.count = 0;\nvar i;\nfor(i = 0; i &lt; 10; i++)&#123;\n    if(i &gt; 5) &#123;\n        // 使用call(...) 可以确保this指向函数本身\n        foo.call(foo, i)\n    &#125;\n&#125;\n// foo: 6\n// foo: 7\n// foo: 8\n// foo: 9\n\ncnosole.log(foo.count); // 4\n</code></pre>\n<h3 id=\"它的作用域\"><a href=\"#它的作用域\" class=\"headerlink\" title=\"它的作用域\"></a>它的作用域</h3><p>还有一种常见的错误是，this指向函数的作用域。这个问题在某中情况下是正确的，但是有时候又是错误的。需要明确的是this在任何情况下都不指向函数的词法作域。</p>\n<pre><code class=\"JavaScript\">function foo()&#123;\n    var a = 2;\n    this.bar(); //  能调用到bar也是意外，正常应该通过词法作用域，直接执行\n&#125;\nfunction bar()&#123;\n    console.log(this.a)\n&#125;\n\nfoo();  // a not defined\n</code></pre>\n<p>==当你想把this和词法作用域的查找混合使用的时候，一定要提醒自己这是无法实现的==</p>\n<h3 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h3><p>this不是在写代码时候绑定的而是代码在执行的时候绑定的，它的上下文取决于函数调用时的各种条件。</p>\n<p>this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。</p>\n<p>==当一个函数被执行时，会创建一个活动记录（有时候也被称之为执行上下文）。这个记录会包含函数在哪里被调用、函数的调用方式、传入参数等信息。this就是这个记录的一个属性，会在函数执行的过程中调用到。==</p>\n<p>this实际上是在函数被调用的时候发生绑定，他指向什么完全取决于函数在哪里被调用。</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"他的技术真了不得","link_list":[{"name":"江橙","link":"https://blogs.chenghuizi.com/","avatar":"/imgs/motuo1.jpeg","descr":"今天你学习了么？"},{"name":"娄豪杰","link":"https://louhaojie99.top/","avatar":"/imgs/motuo2.jpeg","descr":"人生就像品茗，懂得吃苦，才能回甘啊"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<p>ES6添加了一个特殊的词法形式的函数声明，叫做箭头函数，箭头函数在涉及this绑定的行为和普通函数的行为完全不一样，他放弃了所有的普通函数this绑定的规则，取而代之的是用当前的词法作用域覆盖了this原本的值。</p>\n<pre><code class=\"JavaScript\">var obj = &#123;\n    count: 0,\n    cool: function coolFn() &#123;\n        if(this.count &lt; 1) &#123;\n            setTimeout(() =&gt; &#123;\n                this.count++;\n                console.log(&#39;awesome?&#39;);\n            &#125;,1000);\n        &#125;\n    &#125;\n&#125;\nobj.cool();//awesome?\n</code></pre>\n<p>这个箭头函数中的this直接是cool()的this绑定（因此调用它并不会出错）</p>\n<p>它将程序员们经常犯的一个错误给标准化了，也就是混淆了this绑定规则和词法作用域规则。</p>\n<p>另一个导致箭头函数不够理想的原因是他不是具名的，而是一个匿名函数。</p>\n<h3 id=\"误解：\"><a href=\"#误解：\" class=\"headerlink\" title=\"误解：\"></a>误解：</h3><ol>\n<li>人们很容易把this理解成指向函数自身。那么为什么函数要从内部引用函数自身呢？常见的原因是递归（从函数内部调用这个函数）或者可以写在第一次被调用后自己解除绑定事件处理器。</li>\n<li>新手通常会认为，既然把函数看做一个对象，那就可以在调用函数时储存状态。</li>\n</ol>\n<p>call</p>\n<pre><code class=\"JavaScript\">function foo(num) &#123;\n    console.log(&quot;foo&quot; + num);\n    this.count ++;\n&#125;\nfoo.count = 0;\nvar i;\nfor(i = 0; i &lt; 10; i++)&#123;\n    if(i &gt; 5) &#123;\n        // 使用call(...) 可以确保this指向函数本身\n        foo.call(foo, i)\n    &#125;\n&#125;\n// foo: 6\n// foo: 7\n// foo: 8\n// foo: 9\n\ncnosole.log(foo.count); // 4\n</code></pre>\n<h3 id=\"它的作用域\"><a href=\"#它的作用域\" class=\"headerlink\" title=\"它的作用域\"></a>它的作用域</h3><p>还有一种常见的错误是，this指向函数的作用域。这个问题在某中情况下是正确的，但是有时候又是错误的。需要明确的是this在任何情况下都不指向函数的词法作域。</p>\n<pre><code class=\"JavaScript\">function foo()&#123;\n    var a = 2;\n    this.bar(); //  能调用到bar也是意外，正常应该通过词法作用域，直接执行\n&#125;\nfunction bar()&#123;\n    console.log(this.a)\n&#125;\n\nfoo();  // a not defined\n</code></pre>\n<p>==当你想把this和词法作用域的查找混合使用的时候，一定要提醒自己这是无法实现的==</p>\n<h3 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h3><p>this不是在写代码时候绑定的而是代码在执行的时候绑定的，它的上下文取决于函数调用时的各种条件。</p>\n<p>this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。</p>\n<p>==当一个函数被执行时，会创建一个活动记录（有时候也被称之为执行上下文）。这个记录会包含函数在哪里被调用、函数的调用方式、传入参数等信息。this就是这个记录的一个属性，会在函数执行的过程中调用到。==</p>\n<p>this实际上是在函数被调用的时候发生绑定，他指向什么完全取决于函数在哪里被调用。</p>\n"},{"title":"作用域是什么-词法作用域","type":"javaScript","_content":"\n作用域是什么\n-\n- 存储变量的规则\n存储在哪里？怎么获取？\n\nvar a = 2\n\n为一个变量分配内存，名字为a，将值为2保存进这个变量（不完全正确）\n\n1. var a 编译器会询问作用域是否已经存在这样一个变量存在于同一个作用域内，如果有编译器会忽略该声明，继续编译，如果没有，他会要求作用域在当前作用域内声明一个新的变量，并命名为a。\n2. 接下载编译器会为引擎生成运行时所需要的代码，这些代码被用来处理a = 2 的操作，引擎运行时会询问作用域当前作用域集合中是否存在叫做a的变量，如果有，就是用该变量，如果没有会再向再外层的作用域询问，最终会到全局作用域。找到后会将2赋值给它，找不到就会抛出异常\n\n>总结：变量的赋值操作会执行两个动作，编译器在作用域中声明，运行时引擎会查找该变量并进行赋值。\n\n>编译器：LHS查询   查找类型RHS（LHS，RHS），当变量出现在赋值操作的左侧时进行进行LHS查询，出现在右侧时进行RHS查询。\n\nconsole.log（a） 执行的是RHS，要去找a的值；\n\na = 2 执行的是LHS 要为=2找到赋值的目标。\n\nLHS：赋值操作的目标是谁；目的是对变量进行赋值\n\nRHS：谁是赋值操作的源头；目的是获取变量的值\n\n\nReferenceError 这个错误是找不到定义的变量\n\n词法作用域\n-\n作用域有两种主要的工作模型：词法作用域，动态作用域。\n\n词法作用域：定义在词法阶段的作用域，就是由你写代码时将变量和块作用域写在哪里决定的，因此词法解析器处理代码时会保持作用域不变（大部分情况下是这样）\n\n词法欺骗：\n>eval( )\n```JavaScript\nfunction foo(str, a) {\n    eval(str); // 欺骗\n    console.log(a, b);\n}\nvar b = 2;\n\nfoo('val b = 3;', 1); // 1, 3\n```\n>with(){}\n```JavaScript\nfunction foo(obj) {\n    with(obj){\n        a = 2;\n    }\n}\n\nvar o1 = {\n    a: 3\n}\n\nvar o2 = {\n    a: 3\n}\n\nfoo(o1);\nconsole.log(o1.a) // 2\n\nfoo(o2);\nconsole.log(o2.a) // undefined\nconsole.log(a) // 2  ==a被泄漏到全局上面去了==\n\n```\n\n>总结\neval（）函数如果接受了一个或多个声明的代码，就会修改其所处的词法作用域；\nwith声明实际上是根据传递给他的对象凭空创建了一个全新的词法作用域\n\neval，with会降低性能，所以不建议使用\n\n\n\n\n\n\n\n","source":"_posts/作用域是什么-词法作用域.md","raw":"---\ntitle: 作用域是什么-词法作用域\ntag: javaScript\ntype: javaScript\n---\n\n作用域是什么\n-\n- 存储变量的规则\n存储在哪里？怎么获取？\n\nvar a = 2\n\n为一个变量分配内存，名字为a，将值为2保存进这个变量（不完全正确）\n\n1. var a 编译器会询问作用域是否已经存在这样一个变量存在于同一个作用域内，如果有编译器会忽略该声明，继续编译，如果没有，他会要求作用域在当前作用域内声明一个新的变量，并命名为a。\n2. 接下载编译器会为引擎生成运行时所需要的代码，这些代码被用来处理a = 2 的操作，引擎运行时会询问作用域当前作用域集合中是否存在叫做a的变量，如果有，就是用该变量，如果没有会再向再外层的作用域询问，最终会到全局作用域。找到后会将2赋值给它，找不到就会抛出异常\n\n>总结：变量的赋值操作会执行两个动作，编译器在作用域中声明，运行时引擎会查找该变量并进行赋值。\n\n>编译器：LHS查询   查找类型RHS（LHS，RHS），当变量出现在赋值操作的左侧时进行进行LHS查询，出现在右侧时进行RHS查询。\n\nconsole.log（a） 执行的是RHS，要去找a的值；\n\na = 2 执行的是LHS 要为=2找到赋值的目标。\n\nLHS：赋值操作的目标是谁；目的是对变量进行赋值\n\nRHS：谁是赋值操作的源头；目的是获取变量的值\n\n\nReferenceError 这个错误是找不到定义的变量\n\n词法作用域\n-\n作用域有两种主要的工作模型：词法作用域，动态作用域。\n\n词法作用域：定义在词法阶段的作用域，就是由你写代码时将变量和块作用域写在哪里决定的，因此词法解析器处理代码时会保持作用域不变（大部分情况下是这样）\n\n词法欺骗：\n>eval( )\n```JavaScript\nfunction foo(str, a) {\n    eval(str); // 欺骗\n    console.log(a, b);\n}\nvar b = 2;\n\nfoo('val b = 3;', 1); // 1, 3\n```\n>with(){}\n```JavaScript\nfunction foo(obj) {\n    with(obj){\n        a = 2;\n    }\n}\n\nvar o1 = {\n    a: 3\n}\n\nvar o2 = {\n    a: 3\n}\n\nfoo(o1);\nconsole.log(o1.a) // 2\n\nfoo(o2);\nconsole.log(o2.a) // undefined\nconsole.log(a) // 2  ==a被泄漏到全局上面去了==\n\n```\n\n>总结\neval（）函数如果接受了一个或多个声明的代码，就会修改其所处的词法作用域；\nwith声明实际上是根据传递给他的对象凭空创建了一个全新的词法作用域\n\neval，with会降低性能，所以不建议使用\n\n\n\n\n\n\n\n","slug":"作用域是什么-词法作用域","published":1,"date":"2021-07-19T06:37:12.302Z","updated":"2021-07-19T08:40:57.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckragdtd40008hban3jwzcq18","content":"<h2 id=\"作用域是什么\"><a href=\"#作用域是什么\" class=\"headerlink\" title=\"作用域是什么\"></a>作用域是什么</h2><ul>\n<li>存储变量的规则<br>存储在哪里？怎么获取？</li>\n</ul>\n<p>var a = 2</p>\n<p>为一个变量分配内存，名字为a，将值为2保存进这个变量（不完全正确）</p>\n<ol>\n<li>var a 编译器会询问作用域是否已经存在这样一个变量存在于同一个作用域内，如果有编译器会忽略该声明，继续编译，如果没有，他会要求作用域在当前作用域内声明一个新的变量，并命名为a。</li>\n<li>接下载编译器会为引擎生成运行时所需要的代码，这些代码被用来处理a = 2 的操作，引擎运行时会询问作用域当前作用域集合中是否存在叫做a的变量，如果有，就是用该变量，如果没有会再向再外层的作用域询问，最终会到全局作用域。找到后会将2赋值给它，找不到就会抛出异常</li>\n</ol>\n<blockquote>\n<p>总结：变量的赋值操作会执行两个动作，编译器在作用域中声明，运行时引擎会查找该变量并进行赋值。</p>\n</blockquote>\n<blockquote>\n<p>编译器：LHS查询   查找类型RHS（LHS，RHS），当变量出现在赋值操作的左侧时进行进行LHS查询，出现在右侧时进行RHS查询。</p>\n</blockquote>\n<p>console.log（a） 执行的是RHS，要去找a的值；</p>\n<p>a = 2 执行的是LHS 要为=2找到赋值的目标。</p>\n<p>LHS：赋值操作的目标是谁；目的是对变量进行赋值</p>\n<p>RHS：谁是赋值操作的源头；目的是获取变量的值</p>\n<p>ReferenceError 这个错误是找不到定义的变量</p>\n<h2 id=\"词法作用域\"><a href=\"#词法作用域\" class=\"headerlink\" title=\"词法作用域\"></a>词法作用域</h2><p>作用域有两种主要的工作模型：词法作用域，动态作用域。</p>\n<p>词法作用域：定义在词法阶段的作用域，就是由你写代码时将变量和块作用域写在哪里决定的，因此词法解析器处理代码时会保持作用域不变（大部分情况下是这样）</p>\n<p>词法欺骗：</p>\n<blockquote>\n<p>eval( )</p>\n</blockquote>\n<pre><code class=\"JavaScript\">function foo(str, a) &#123;\n    eval(str); // 欺骗\n    console.log(a, b);\n&#125;\nvar b = 2;\n\nfoo(&#39;val b = 3;&#39;, 1); // 1, 3\n</code></pre>\n<blockquote>\n<p>with(){}</p>\n</blockquote>\n<pre><code class=\"JavaScript\">function foo(obj) &#123;\n    with(obj)&#123;\n        a = 2;\n    &#125;\n&#125;\n\nvar o1 = &#123;\n    a: 3\n&#125;\n\nvar o2 = &#123;\n    a: 3\n&#125;\n\nfoo(o1);\nconsole.log(o1.a) // 2\n\nfoo(o2);\nconsole.log(o2.a) // undefined\nconsole.log(a) // 2  ==a被泄漏到全局上面去了==\n</code></pre>\n<blockquote>\n<p>总结<br>eval（）函数如果接受了一个或多个声明的代码，就会修改其所处的词法作用域；<br>with声明实际上是根据传递给他的对象凭空创建了一个全新的词法作用域</p>\n</blockquote>\n<p>eval，with会降低性能，所以不建议使用</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"他的技术真了不得","link_list":[{"name":"江橙","link":"https://blogs.chenghuizi.com/","avatar":"/imgs/motuo1.jpeg","descr":"今天你学习了么？"},{"name":"娄豪杰","link":"https://louhaojie99.top/","avatar":"/imgs/motuo2.jpeg","descr":"人生就像品茗，懂得吃苦，才能回甘啊"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h2 id=\"作用域是什么\"><a href=\"#作用域是什么\" class=\"headerlink\" title=\"作用域是什么\"></a>作用域是什么</h2><ul>\n<li>存储变量的规则<br>存储在哪里？怎么获取？</li>\n</ul>\n<p>var a = 2</p>\n<p>为一个变量分配内存，名字为a，将值为2保存进这个变量（不完全正确）</p>\n<ol>\n<li>var a 编译器会询问作用域是否已经存在这样一个变量存在于同一个作用域内，如果有编译器会忽略该声明，继续编译，如果没有，他会要求作用域在当前作用域内声明一个新的变量，并命名为a。</li>\n<li>接下载编译器会为引擎生成运行时所需要的代码，这些代码被用来处理a = 2 的操作，引擎运行时会询问作用域当前作用域集合中是否存在叫做a的变量，如果有，就是用该变量，如果没有会再向再外层的作用域询问，最终会到全局作用域。找到后会将2赋值给它，找不到就会抛出异常</li>\n</ol>\n<blockquote>\n<p>总结：变量的赋值操作会执行两个动作，编译器在作用域中声明，运行时引擎会查找该变量并进行赋值。</p>\n</blockquote>\n<blockquote>\n<p>编译器：LHS查询   查找类型RHS（LHS，RHS），当变量出现在赋值操作的左侧时进行进行LHS查询，出现在右侧时进行RHS查询。</p>\n</blockquote>\n<p>console.log（a） 执行的是RHS，要去找a的值；</p>\n<p>a = 2 执行的是LHS 要为=2找到赋值的目标。</p>\n<p>LHS：赋值操作的目标是谁；目的是对变量进行赋值</p>\n<p>RHS：谁是赋值操作的源头；目的是获取变量的值</p>\n<p>ReferenceError 这个错误是找不到定义的变量</p>\n<h2 id=\"词法作用域\"><a href=\"#词法作用域\" class=\"headerlink\" title=\"词法作用域\"></a>词法作用域</h2><p>作用域有两种主要的工作模型：词法作用域，动态作用域。</p>\n<p>词法作用域：定义在词法阶段的作用域，就是由你写代码时将变量和块作用域写在哪里决定的，因此词法解析器处理代码时会保持作用域不变（大部分情况下是这样）</p>\n<p>词法欺骗：</p>\n<blockquote>\n<p>eval( )</p>\n</blockquote>\n<pre><code class=\"JavaScript\">function foo(str, a) &#123;\n    eval(str); // 欺骗\n    console.log(a, b);\n&#125;\nvar b = 2;\n\nfoo(&#39;val b = 3;&#39;, 1); // 1, 3\n</code></pre>\n<blockquote>\n<p>with(){}</p>\n</blockquote>\n<pre><code class=\"JavaScript\">function foo(obj) &#123;\n    with(obj)&#123;\n        a = 2;\n    &#125;\n&#125;\n\nvar o1 = &#123;\n    a: 3\n&#125;\n\nvar o2 = &#123;\n    a: 3\n&#125;\n\nfoo(o1);\nconsole.log(o1.a) // 2\n\nfoo(o2);\nconsole.log(o2.a) // undefined\nconsole.log(a) // 2  ==a被泄漏到全局上面去了==\n</code></pre>\n<blockquote>\n<p>总结<br>eval（）函数如果接受了一个或多个声明的代码，就会修改其所处的词法作用域；<br>with声明实际上是根据传递给他的对象凭空创建了一个全新的词法作用域</p>\n</blockquote>\n<p>eval，with会降低性能，所以不建议使用</p>\n"},{"title":"浅拷贝与深拷贝","type":"javsScript","_content":"\n> 浅拷贝与深拷贝 (深拷贝和浅拷贝是只针对Object和Array这样的引用数据类型的)\n\n**浅拷贝只复制指向某个对象的指针而不复制对象本身，新旧对象还是共享同一块内存。**\n**但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。**\n\n\n>赋值和浅拷贝的区别\n\n+ 当我们把一个对象赋值给一个新的变量时，赋的其实是该对象的在栈中的地址，而不是堆中的数据。也就是两个对象指向的是同一个存储空间，无论哪个对象发生改变，其实都是改变的存储空间的内容，因此，两个对象是联动的。\n+ 浅拷贝是按位拷贝对象，它会创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值；如果属性是内存地址（引用类型），拷贝的就是内存地址 ，因此如果其中一个对象改变了这个地址，就会影响到另一个对象。即：默认拷贝构造函数只是对对象进行浅拷贝复制(逐个成员依次拷贝)，即只复制对象空间而不复制资源。\n  \n\n>浅拷贝的实现方式\n\n**.Object.assign()**\nObject.assign() 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。但是 Object.assign()进行的是浅拷贝，拷贝的是对象的属性的引用，而不是对象本身。\n","source":"_posts/深拷贝与浅拷贝.md","raw":"---\ntitle: 浅拷贝与深拷贝\ntag: javsScript\ntype: javsScript\n---\n\n> 浅拷贝与深拷贝 (深拷贝和浅拷贝是只针对Object和Array这样的引用数据类型的)\n\n**浅拷贝只复制指向某个对象的指针而不复制对象本身，新旧对象还是共享同一块内存。**\n**但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。**\n\n\n>赋值和浅拷贝的区别\n\n+ 当我们把一个对象赋值给一个新的变量时，赋的其实是该对象的在栈中的地址，而不是堆中的数据。也就是两个对象指向的是同一个存储空间，无论哪个对象发生改变，其实都是改变的存储空间的内容，因此，两个对象是联动的。\n+ 浅拷贝是按位拷贝对象，它会创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值；如果属性是内存地址（引用类型），拷贝的就是内存地址 ，因此如果其中一个对象改变了这个地址，就会影响到另一个对象。即：默认拷贝构造函数只是对对象进行浅拷贝复制(逐个成员依次拷贝)，即只复制对象空间而不复制资源。\n  \n\n>浅拷贝的实现方式\n\n**.Object.assign()**\nObject.assign() 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。但是 Object.assign()进行的是浅拷贝，拷贝的是对象的属性的引用，而不是对象本身。\n","slug":"深拷贝与浅拷贝","published":1,"date":"2021-07-19T06:37:12.303Z","updated":"2021-07-19T08:40:49.570Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckragdtd40009hban4pju6w2g","content":"<blockquote>\n<p>浅拷贝与深拷贝 (深拷贝和浅拷贝是只针对Object和Array这样的引用数据类型的)</p>\n</blockquote>\n<p><strong>浅拷贝只复制指向某个对象的指针而不复制对象本身，新旧对象还是共享同一块内存。</strong><br><strong>但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。</strong></p>\n<blockquote>\n<p>赋值和浅拷贝的区别</p>\n</blockquote>\n<ul>\n<li>当我们把一个对象赋值给一个新的变量时，赋的其实是该对象的在栈中的地址，而不是堆中的数据。也就是两个对象指向的是同一个存储空间，无论哪个对象发生改变，其实都是改变的存储空间的内容，因此，两个对象是联动的。</li>\n<li>浅拷贝是按位拷贝对象，它会创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值；如果属性是内存地址（引用类型），拷贝的就是内存地址 ，因此如果其中一个对象改变了这个地址，就会影响到另一个对象。即：默认拷贝构造函数只是对对象进行浅拷贝复制(逐个成员依次拷贝)，即只复制对象空间而不复制资源。</li>\n</ul>\n<blockquote>\n<p>浅拷贝的实现方式</p>\n</blockquote>\n<p><strong>.Object.assign()</strong><br>Object.assign() 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。但是 Object.assign()进行的是浅拷贝，拷贝的是对象的属性的引用，而不是对象本身。</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"他的技术真了不得","link_list":[{"name":"江橙","link":"https://blogs.chenghuizi.com/","avatar":"/imgs/motuo1.jpeg","descr":"今天你学习了么？"},{"name":"娄豪杰","link":"https://louhaojie99.top/","avatar":"/imgs/motuo2.jpeg","descr":"人生就像品茗，懂得吃苦，才能回甘啊"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<blockquote>\n<p>浅拷贝与深拷贝 (深拷贝和浅拷贝是只针对Object和Array这样的引用数据类型的)</p>\n</blockquote>\n<p><strong>浅拷贝只复制指向某个对象的指针而不复制对象本身，新旧对象还是共享同一块内存。</strong><br><strong>但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。</strong></p>\n<blockquote>\n<p>赋值和浅拷贝的区别</p>\n</blockquote>\n<ul>\n<li>当我们把一个对象赋值给一个新的变量时，赋的其实是该对象的在栈中的地址，而不是堆中的数据。也就是两个对象指向的是同一个存储空间，无论哪个对象发生改变，其实都是改变的存储空间的内容，因此，两个对象是联动的。</li>\n<li>浅拷贝是按位拷贝对象，它会创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值；如果属性是内存地址（引用类型），拷贝的就是内存地址 ，因此如果其中一个对象改变了这个地址，就会影响到另一个对象。即：默认拷贝构造函数只是对对象进行浅拷贝复制(逐个成员依次拷贝)，即只复制对象空间而不复制资源。</li>\n</ul>\n<blockquote>\n<p>浅拷贝的实现方式</p>\n</blockquote>\n<p><strong>.Object.assign()</strong><br>Object.assign() 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。但是 Object.assign()进行的是浅拷贝，拷贝的是对象的属性的引用，而不是对象本身。</p>\n"},{"title":"闭包","type":"javaScript","top_img":"/imgs/motuo1.jpeg","_content":"\n>闭包是基于词法作用域书写代码时所产生的自然结果\n\n闭包的产生：\n函数在被定义的地方之外被执行就会产生闭包！！！\n\n```JavaScript\nfunction foo() {\n    var a = 2;\n    function bar(){\n        console.log(a);\n    }\n    return bar;\n}\nvar bza = foo();\n\nbaz(); // 2  这就是闭包！\n```\n通常情况下foo执行之后整个内部作用域都会被销毁，因为引擎会销毁不再使用的空间来释放内存空间。\n\n然而闭包会阻止这一情况的发生，会让作用域依然存在，因为bar函数还在使用foo这个作用域，需要给bar在任何时候执行提供支持。所以foo的作用域不会被销毁，bar依然持有对该作用域的引用，这个引用就是闭包！\n\n==无论通过何种手段将内部函数传递到所在的词法作用域以外，他都会持有对原始定义作用域的引用，无论在何处执行这个函数都会使用闭包。==\n\n```JavaScript\nfunction wait(message){\n    setTimeout( function timer() {\n        console.log(message);\n    },1000)\n}\nwait('hello')\n```\nwait执行1000毫秒以后，他的内部作用域并不会消失，还能保持message的引用。\n\n==只要是使用了回调函数，实际上就是在使用闭包。==\n\n### 闭包和循环\n\n```JavaScript\nfor(var i = 1;i <= 5; i++;){\n    setTimeout(function timer() {\n        console.log(i);\n    },1*1000)\n}\n// 每秒一次输出五个6\n```\n这个循环终止的条件是6.条件首次成立的时候i === 6\n，因此输出的显示是循环结束时i的值。\n因为这里所用的i，是同一个作用域下的i，所有的函数共享一个i。\n\n```JavaScript\nfor(var i = 1;i <= 5; i++;){\n    (function() {\n        setTimeout(function timer() {\n            console.log(i);\n        },1*1000)\n    }();\n}\n//这样也不行\n```\n因为我们的IIFE的作用域是空的，我们使用的依然是外层的i，他要包含一点实质的内容才能够我们使用。\n\n\n```JavaScript\nfor(var i = 1;i <= 5; i++;){\n    (function(j) {\n        setTimeout(function timer() {\n            console.log(j);\n        },j*1000)\n    }(i);\n}\n// 这样就达到我们预期的目的，每秒一个，一次输出1-5\n```\n\n### 重返块作用域\n前面说let可以劫持块级作用域，，并且在这个块级作用域中声明一个变量。看下面代码\n\n```JavaScript\nfor(var i = 1; i <= 5; i++) {\n    let j = i;\n    setTimeout(function timer() {\n        console.log(j);\n    },j*1000)\n};\n```\n还可以更完善\n\n```JavaScript\nfor(let i = 1; i <= 5; i++) {\n    setTimeout(function timer() {\n        console.log(i);\n    },i*1000)\n};\n```\n\n### 模块\n```JavaScript\nfunction foo(){\n    var a = 'cool';\n    var b = [1,2,3];\n    function bar() {\n        console.log(a);\n    }\n    function baz() {\n        console.log(b);\n    }\n}\n```\n这里并没有明显的闭包，只有两个私有数据变量a和b，以及bar和baz两个内部函数，他们的词法作用域就是闭包，\n也就是foo（）的内部作用域。\n```JavaScript\nfunction CoolModule() {\n    var something = 'cool';\n    var another = [1,2,3];\n    function doSomething() {\n        console.log(something));\n    }\n    function doAnother() {\n        console.log(another.join(\"!\"));\n    }\n    return {\n        doSomething: doSomething,\n        doAnother: doAnother,\n    };\n}\nvar foo = CoolModule;\nfoo.doSomething(); // cool\nfoo.doAnother(); // 1!2!3\n```\n首先，CoolModule() 只是一个函数，必须通过调用它来创建一个模块实例，如果不执行外部函数，内部作用域和闭包都无法被创建。\n\n其次，CoolModule() 返回一个用对象字面量语法来表示的对象，这个返回的对象中含有内部函数，而不是内部数据变量的引用。我们保持内部数据变量是隐藏且私有状态。\n\n这个对象类型的返回值最终被赋值给外部变量foo，然后我们就可以通过它来访问API中的属性方法。 \n\n>模块模式必须具有两个条件\n1. 必须有外部的封闭函数，该函数必须至少被调用一次。（每次调用都会创建一个新的模块实例）\n2. 封闭函数必须返回至少一个内部函数，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态。\n\n一个具有函数属性的对象本身并不是真正的模块。从方便观察角度来看，一个从函数调用所返回的，只有数据属性而没有闭包函数的对象并不是真正的模块。\n\n改进上面的代码\n```JavaScript\nvar foo = (function CoolModule() {\n    var something = 'cool';\n    var another = [1,2,3];\n    function doSomething() {\n        console.log(something));\n    }\n    function doAnother() {\n        console.log(another.join(\"!\"));\n    }\n    return {\n        doSomething: doSomething,\n        doAnother: doAnother,\n    };\n})();\n\nfoo.doSomething(); // cool\nfoo.doAnother(); // 1!2!3\n```\n\n模块是普通函数，因此也可以传参。\n```JavaScript\nfunction CoolModule(id) {\n    function doSomething() {\n        console.log(id);\n    }\n    return {\n        doSomething: doSomething,\n    };\n}\nvar foo = CoolModule('foo');\nfoo.doSomething(); // foo\n```\n\n>模块另一个简单但又强大的用法是命名将要作为公共API返回的对象。\n```JavaScript\nvar foo = (function Cool(id){\n    function change() {\n        publicAPI.identify = identify2;\n    };\n    function identify1() {\n        console.log(id);\n    };\n    function identify2() {\n        console.log(id.toUppeCase());\n    };\n    var publicAPI = {\n        change: change,\n        identify: identify1\n    }\n    return publicAPI;\n})('foo module');\n\nfoo.identify(); // foo module\nfoo.change();\nfoo.identify(); // FOO MODULE\n```\n通过模块在实例的内部保留的公共API对象的内部引用，可以从内部对模块实例进行修改，包括添加或删除方法，以及修改他们的值。\n\n现代的模块机制\n---\n创建一个模块\n```JavaScript\nvar MyModules = (function Manager(){\n    // 存储方法\n    var modules = {};\n    \n    // 添加方法\n    function define(name,deps,impl){\n        for(var i = 0;i < deps.length; i++) {\n            deps[i] = modules[deps[i]];\n        }\n        modules[name] = impl.apply(impl,deps);\n    }\n    \n    // 根据名字获取方法\n    function get(name) {\n        return modules[name];\n    }\n    \n    // 返回内部函数（方法）\n    return {\n        define: define,\n        get: get\n    }\n})()\n```\nFunction.apply(obj,args)方法能接收两个参数\n\nobj：这个对象将代替Function类里this对象\n\nargs：这个是数组，它将作为参数传给Function(args-->arguments)\n\n使用它来定义模块：\n```JavaScript\nMyModules.define(\"bar\",[], function() {\n    function hello(who) {\n        return \"let me introduce:\" + who;\n    }\n    retrun {\n        hello : hello\n    };\n});\n\nMyModules.define(\"foo\",['bar'], function(bar) {\n    var hungry = 'hippo';\n    function awesome(who) {\n        console.log(bar.hello(hungry).toUpperCase());\n    }\n    retrun {\n        awesome : awesome\n    };\n});\n\nvar bar = MyModules.get('bar');\nvar foo = MyModules.get('foo');\n\nconsole.log(bar.hello('hippo'));// let me introduce: hippo\n\nfoo.awesome(); // 大写的\n```\n\nfoo 和 bar 都是通过一个返回的公共的API的函数来定义的。foo 甚至接受 bar 的实例作为依赖参数，并且相应地使用它。\n","source":"_posts/闭包.md","raw":"---\ntitle: 闭包\ntag: javaScript\ntype: javaScript\ntop_img: /imgs/motuo1.jpeg\n---\n\n>闭包是基于词法作用域书写代码时所产生的自然结果\n\n闭包的产生：\n函数在被定义的地方之外被执行就会产生闭包！！！\n\n```JavaScript\nfunction foo() {\n    var a = 2;\n    function bar(){\n        console.log(a);\n    }\n    return bar;\n}\nvar bza = foo();\n\nbaz(); // 2  这就是闭包！\n```\n通常情况下foo执行之后整个内部作用域都会被销毁，因为引擎会销毁不再使用的空间来释放内存空间。\n\n然而闭包会阻止这一情况的发生，会让作用域依然存在，因为bar函数还在使用foo这个作用域，需要给bar在任何时候执行提供支持。所以foo的作用域不会被销毁，bar依然持有对该作用域的引用，这个引用就是闭包！\n\n==无论通过何种手段将内部函数传递到所在的词法作用域以外，他都会持有对原始定义作用域的引用，无论在何处执行这个函数都会使用闭包。==\n\n```JavaScript\nfunction wait(message){\n    setTimeout( function timer() {\n        console.log(message);\n    },1000)\n}\nwait('hello')\n```\nwait执行1000毫秒以后，他的内部作用域并不会消失，还能保持message的引用。\n\n==只要是使用了回调函数，实际上就是在使用闭包。==\n\n### 闭包和循环\n\n```JavaScript\nfor(var i = 1;i <= 5; i++;){\n    setTimeout(function timer() {\n        console.log(i);\n    },1*1000)\n}\n// 每秒一次输出五个6\n```\n这个循环终止的条件是6.条件首次成立的时候i === 6\n，因此输出的显示是循环结束时i的值。\n因为这里所用的i，是同一个作用域下的i，所有的函数共享一个i。\n\n```JavaScript\nfor(var i = 1;i <= 5; i++;){\n    (function() {\n        setTimeout(function timer() {\n            console.log(i);\n        },1*1000)\n    }();\n}\n//这样也不行\n```\n因为我们的IIFE的作用域是空的，我们使用的依然是外层的i，他要包含一点实质的内容才能够我们使用。\n\n\n```JavaScript\nfor(var i = 1;i <= 5; i++;){\n    (function(j) {\n        setTimeout(function timer() {\n            console.log(j);\n        },j*1000)\n    }(i);\n}\n// 这样就达到我们预期的目的，每秒一个，一次输出1-5\n```\n\n### 重返块作用域\n前面说let可以劫持块级作用域，，并且在这个块级作用域中声明一个变量。看下面代码\n\n```JavaScript\nfor(var i = 1; i <= 5; i++) {\n    let j = i;\n    setTimeout(function timer() {\n        console.log(j);\n    },j*1000)\n};\n```\n还可以更完善\n\n```JavaScript\nfor(let i = 1; i <= 5; i++) {\n    setTimeout(function timer() {\n        console.log(i);\n    },i*1000)\n};\n```\n\n### 模块\n```JavaScript\nfunction foo(){\n    var a = 'cool';\n    var b = [1,2,3];\n    function bar() {\n        console.log(a);\n    }\n    function baz() {\n        console.log(b);\n    }\n}\n```\n这里并没有明显的闭包，只有两个私有数据变量a和b，以及bar和baz两个内部函数，他们的词法作用域就是闭包，\n也就是foo（）的内部作用域。\n```JavaScript\nfunction CoolModule() {\n    var something = 'cool';\n    var another = [1,2,3];\n    function doSomething() {\n        console.log(something));\n    }\n    function doAnother() {\n        console.log(another.join(\"!\"));\n    }\n    return {\n        doSomething: doSomething,\n        doAnother: doAnother,\n    };\n}\nvar foo = CoolModule;\nfoo.doSomething(); // cool\nfoo.doAnother(); // 1!2!3\n```\n首先，CoolModule() 只是一个函数，必须通过调用它来创建一个模块实例，如果不执行外部函数，内部作用域和闭包都无法被创建。\n\n其次，CoolModule() 返回一个用对象字面量语法来表示的对象，这个返回的对象中含有内部函数，而不是内部数据变量的引用。我们保持内部数据变量是隐藏且私有状态。\n\n这个对象类型的返回值最终被赋值给外部变量foo，然后我们就可以通过它来访问API中的属性方法。 \n\n>模块模式必须具有两个条件\n1. 必须有外部的封闭函数，该函数必须至少被调用一次。（每次调用都会创建一个新的模块实例）\n2. 封闭函数必须返回至少一个内部函数，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态。\n\n一个具有函数属性的对象本身并不是真正的模块。从方便观察角度来看，一个从函数调用所返回的，只有数据属性而没有闭包函数的对象并不是真正的模块。\n\n改进上面的代码\n```JavaScript\nvar foo = (function CoolModule() {\n    var something = 'cool';\n    var another = [1,2,3];\n    function doSomething() {\n        console.log(something));\n    }\n    function doAnother() {\n        console.log(another.join(\"!\"));\n    }\n    return {\n        doSomething: doSomething,\n        doAnother: doAnother,\n    };\n})();\n\nfoo.doSomething(); // cool\nfoo.doAnother(); // 1!2!3\n```\n\n模块是普通函数，因此也可以传参。\n```JavaScript\nfunction CoolModule(id) {\n    function doSomething() {\n        console.log(id);\n    }\n    return {\n        doSomething: doSomething,\n    };\n}\nvar foo = CoolModule('foo');\nfoo.doSomething(); // foo\n```\n\n>模块另一个简单但又强大的用法是命名将要作为公共API返回的对象。\n```JavaScript\nvar foo = (function Cool(id){\n    function change() {\n        publicAPI.identify = identify2;\n    };\n    function identify1() {\n        console.log(id);\n    };\n    function identify2() {\n        console.log(id.toUppeCase());\n    };\n    var publicAPI = {\n        change: change,\n        identify: identify1\n    }\n    return publicAPI;\n})('foo module');\n\nfoo.identify(); // foo module\nfoo.change();\nfoo.identify(); // FOO MODULE\n```\n通过模块在实例的内部保留的公共API对象的内部引用，可以从内部对模块实例进行修改，包括添加或删除方法，以及修改他们的值。\n\n现代的模块机制\n---\n创建一个模块\n```JavaScript\nvar MyModules = (function Manager(){\n    // 存储方法\n    var modules = {};\n    \n    // 添加方法\n    function define(name,deps,impl){\n        for(var i = 0;i < deps.length; i++) {\n            deps[i] = modules[deps[i]];\n        }\n        modules[name] = impl.apply(impl,deps);\n    }\n    \n    // 根据名字获取方法\n    function get(name) {\n        return modules[name];\n    }\n    \n    // 返回内部函数（方法）\n    return {\n        define: define,\n        get: get\n    }\n})()\n```\nFunction.apply(obj,args)方法能接收两个参数\n\nobj：这个对象将代替Function类里this对象\n\nargs：这个是数组，它将作为参数传给Function(args-->arguments)\n\n使用它来定义模块：\n```JavaScript\nMyModules.define(\"bar\",[], function() {\n    function hello(who) {\n        return \"let me introduce:\" + who;\n    }\n    retrun {\n        hello : hello\n    };\n});\n\nMyModules.define(\"foo\",['bar'], function(bar) {\n    var hungry = 'hippo';\n    function awesome(who) {\n        console.log(bar.hello(hungry).toUpperCase());\n    }\n    retrun {\n        awesome : awesome\n    };\n});\n\nvar bar = MyModules.get('bar');\nvar foo = MyModules.get('foo');\n\nconsole.log(bar.hello('hippo'));// let me introduce: hippo\n\nfoo.awesome(); // 大写的\n```\n\nfoo 和 bar 都是通过一个返回的公共的API的函数来定义的。foo 甚至接受 bar 的实例作为依赖参数，并且相应地使用它。\n","slug":"闭包","published":1,"date":"2021-07-19T06:37:12.304Z","updated":"2021-07-19T09:48:01.533Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckragdtd6000chband7otfj40","content":"<blockquote>\n<p>闭包是基于词法作用域书写代码时所产生的自然结果</p>\n</blockquote>\n<p>闭包的产生：<br>函数在被定义的地方之外被执行就会产生闭包！！！</p>\n<pre><code class=\"JavaScript\">function foo() &#123;\n    var a = 2;\n    function bar()&#123;\n        console.log(a);\n    &#125;\n    return bar;\n&#125;\nvar bza = foo();\n\nbaz(); // 2  这就是闭包！\n</code></pre>\n<p>通常情况下foo执行之后整个内部作用域都会被销毁，因为引擎会销毁不再使用的空间来释放内存空间。</p>\n<p>然而闭包会阻止这一情况的发生，会让作用域依然存在，因为bar函数还在使用foo这个作用域，需要给bar在任何时候执行提供支持。所以foo的作用域不会被销毁，bar依然持有对该作用域的引用，这个引用就是闭包！</p>\n<p>==无论通过何种手段将内部函数传递到所在的词法作用域以外，他都会持有对原始定义作用域的引用，无论在何处执行这个函数都会使用闭包。==</p>\n<pre><code class=\"JavaScript\">function wait(message)&#123;\n    setTimeout( function timer() &#123;\n        console.log(message);\n    &#125;,1000)\n&#125;\nwait(&#39;hello&#39;)\n</code></pre>\n<p>wait执行1000毫秒以后，他的内部作用域并不会消失，还能保持message的引用。</p>\n<p>==只要是使用了回调函数，实际上就是在使用闭包。==</p>\n<h3 id=\"闭包和循环\"><a href=\"#闭包和循环\" class=\"headerlink\" title=\"闭包和循环\"></a>闭包和循环</h3><pre><code class=\"JavaScript\">for(var i = 1;i &lt;= 5; i++;)&#123;\n    setTimeout(function timer() &#123;\n        console.log(i);\n    &#125;,1*1000)\n&#125;\n// 每秒一次输出五个6\n</code></pre>\n<p>这个循环终止的条件是6.条件首次成立的时候i === 6<br>，因此输出的显示是循环结束时i的值。<br>因为这里所用的i，是同一个作用域下的i，所有的函数共享一个i。</p>\n<pre><code class=\"JavaScript\">for(var i = 1;i &lt;= 5; i++;)&#123;\n    (function() &#123;\n        setTimeout(function timer() &#123;\n            console.log(i);\n        &#125;,1*1000)\n    &#125;();\n&#125;\n//这样也不行\n</code></pre>\n<p>因为我们的IIFE的作用域是空的，我们使用的依然是外层的i，他要包含一点实质的内容才能够我们使用。</p>\n<pre><code class=\"JavaScript\">for(var i = 1;i &lt;= 5; i++;)&#123;\n    (function(j) &#123;\n        setTimeout(function timer() &#123;\n            console.log(j);\n        &#125;,j*1000)\n    &#125;(i);\n&#125;\n// 这样就达到我们预期的目的，每秒一个，一次输出1-5\n</code></pre>\n<h3 id=\"重返块作用域\"><a href=\"#重返块作用域\" class=\"headerlink\" title=\"重返块作用域\"></a>重返块作用域</h3><p>前面说let可以劫持块级作用域，，并且在这个块级作用域中声明一个变量。看下面代码</p>\n<pre><code class=\"JavaScript\">for(var i = 1; i &lt;= 5; i++) &#123;\n    let j = i;\n    setTimeout(function timer() &#123;\n        console.log(j);\n    &#125;,j*1000)\n&#125;;\n</code></pre>\n<p>还可以更完善</p>\n<pre><code class=\"JavaScript\">for(let i = 1; i &lt;= 5; i++) &#123;\n    setTimeout(function timer() &#123;\n        console.log(i);\n    &#125;,i*1000)\n&#125;;\n</code></pre>\n<h3 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h3><pre><code class=\"JavaScript\">function foo()&#123;\n    var a = &#39;cool&#39;;\n    var b = [1,2,3];\n    function bar() &#123;\n        console.log(a);\n    &#125;\n    function baz() &#123;\n        console.log(b);\n    &#125;\n&#125;\n</code></pre>\n<p>这里并没有明显的闭包，只有两个私有数据变量a和b，以及bar和baz两个内部函数，他们的词法作用域就是闭包，<br>也就是foo（）的内部作用域。</p>\n<pre><code class=\"JavaScript\">function CoolModule() &#123;\n    var something = &#39;cool&#39;;\n    var another = [1,2,3];\n    function doSomething() &#123;\n        console.log(something));\n    &#125;\n    function doAnother() &#123;\n        console.log(another.join(&quot;!&quot;));\n    &#125;\n    return &#123;\n        doSomething: doSomething,\n        doAnother: doAnother,\n    &#125;;\n&#125;\nvar foo = CoolModule;\nfoo.doSomething(); // cool\nfoo.doAnother(); // 1!2!3\n</code></pre>\n<p>首先，CoolModule() 只是一个函数，必须通过调用它来创建一个模块实例，如果不执行外部函数，内部作用域和闭包都无法被创建。</p>\n<p>其次，CoolModule() 返回一个用对象字面量语法来表示的对象，这个返回的对象中含有内部函数，而不是内部数据变量的引用。我们保持内部数据变量是隐藏且私有状态。</p>\n<p>这个对象类型的返回值最终被赋值给外部变量foo，然后我们就可以通过它来访问API中的属性方法。 </p>\n<blockquote>\n<p>模块模式必须具有两个条件</p>\n</blockquote>\n<ol>\n<li>必须有外部的封闭函数，该函数必须至少被调用一次。（每次调用都会创建一个新的模块实例）</li>\n<li>封闭函数必须返回至少一个内部函数，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态。</li>\n</ol>\n<p>一个具有函数属性的对象本身并不是真正的模块。从方便观察角度来看，一个从函数调用所返回的，只有数据属性而没有闭包函数的对象并不是真正的模块。</p>\n<p>改进上面的代码</p>\n<pre><code class=\"JavaScript\">var foo = (function CoolModule() &#123;\n    var something = &#39;cool&#39;;\n    var another = [1,2,3];\n    function doSomething() &#123;\n        console.log(something));\n    &#125;\n    function doAnother() &#123;\n        console.log(another.join(&quot;!&quot;));\n    &#125;\n    return &#123;\n        doSomething: doSomething,\n        doAnother: doAnother,\n    &#125;;\n&#125;)();\n\nfoo.doSomething(); // cool\nfoo.doAnother(); // 1!2!3\n</code></pre>\n<p>模块是普通函数，因此也可以传参。</p>\n<pre><code class=\"JavaScript\">function CoolModule(id) &#123;\n    function doSomething() &#123;\n        console.log(id);\n    &#125;\n    return &#123;\n        doSomething: doSomething,\n    &#125;;\n&#125;\nvar foo = CoolModule(&#39;foo&#39;);\nfoo.doSomething(); // foo\n</code></pre>\n<blockquote>\n<p>模块另一个简单但又强大的用法是命名将要作为公共API返回的对象。</p>\n</blockquote>\n<pre><code class=\"JavaScript\">var foo = (function Cool(id)&#123;\n    function change() &#123;\n        publicAPI.identify = identify2;\n    &#125;;\n    function identify1() &#123;\n        console.log(id);\n    &#125;;\n    function identify2() &#123;\n        console.log(id.toUppeCase());\n    &#125;;\n    var publicAPI = &#123;\n        change: change,\n        identify: identify1\n    &#125;\n    return publicAPI;\n&#125;)(&#39;foo module&#39;);\n\nfoo.identify(); // foo module\nfoo.change();\nfoo.identify(); // FOO MODULE\n</code></pre>\n<p>通过模块在实例的内部保留的公共API对象的内部引用，可以从内部对模块实例进行修改，包括添加或删除方法，以及修改他们的值。</p>\n<h2 id=\"现代的模块机制\"><a href=\"#现代的模块机制\" class=\"headerlink\" title=\"现代的模块机制\"></a>现代的模块机制</h2><p>创建一个模块</p>\n<pre><code class=\"JavaScript\">var MyModules = (function Manager()&#123;\n    // 存储方法\n    var modules = &#123;&#125;;\n    \n    // 添加方法\n    function define(name,deps,impl)&#123;\n        for(var i = 0;i &lt; deps.length; i++) &#123;\n            deps[i] = modules[deps[i]];\n        &#125;\n        modules[name] = impl.apply(impl,deps);\n    &#125;\n    \n    // 根据名字获取方法\n    function get(name) &#123;\n        return modules[name];\n    &#125;\n    \n    // 返回内部函数（方法）\n    return &#123;\n        define: define,\n        get: get\n    &#125;\n&#125;)()\n</code></pre>\n<p>Function.apply(obj,args)方法能接收两个参数</p>\n<p>obj：这个对象将代替Function类里this对象</p>\n<p>args：这个是数组，它将作为参数传给Function(args–&gt;arguments)</p>\n<p>使用它来定义模块：</p>\n<pre><code class=\"JavaScript\">MyModules.define(&quot;bar&quot;,[], function() &#123;\n    function hello(who) &#123;\n        return &quot;let me introduce:&quot; + who;\n    &#125;\n    retrun &#123;\n        hello : hello\n    &#125;;\n&#125;);\n\nMyModules.define(&quot;foo&quot;,[&#39;bar&#39;], function(bar) &#123;\n    var hungry = &#39;hippo&#39;;\n    function awesome(who) &#123;\n        console.log(bar.hello(hungry).toUpperCase());\n    &#125;\n    retrun &#123;\n        awesome : awesome\n    &#125;;\n&#125;);\n\nvar bar = MyModules.get(&#39;bar&#39;);\nvar foo = MyModules.get(&#39;foo&#39;);\n\nconsole.log(bar.hello(&#39;hippo&#39;));// let me introduce: hippo\n\nfoo.awesome(); // 大写的\n</code></pre>\n<p>foo 和 bar 都是通过一个返回的公共的API的函数来定义的。foo 甚至接受 bar 的实例作为依赖参数，并且相应地使用它。</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"他的技术真了不得","link_list":[{"name":"江橙","link":"https://blogs.chenghuizi.com/","avatar":"/imgs/motuo1.jpeg","descr":"今天你学习了么？"},{"name":"娄豪杰","link":"https://louhaojie99.top/","avatar":"/imgs/motuo2.jpeg","descr":"人生就像品茗，懂得吃苦，才能回甘啊"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<blockquote>\n<p>闭包是基于词法作用域书写代码时所产生的自然结果</p>\n</blockquote>\n<p>闭包的产生：<br>函数在被定义的地方之外被执行就会产生闭包！！！</p>\n<pre><code class=\"JavaScript\">function foo() &#123;\n    var a = 2;\n    function bar()&#123;\n        console.log(a);\n    &#125;\n    return bar;\n&#125;\nvar bza = foo();\n\nbaz(); // 2  这就是闭包！\n</code></pre>\n<p>通常情况下foo执行之后整个内部作用域都会被销毁，因为引擎会销毁不再使用的空间来释放内存空间。</p>\n<p>然而闭包会阻止这一情况的发生，会让作用域依然存在，因为bar函数还在使用foo这个作用域，需要给bar在任何时候执行提供支持。所以foo的作用域不会被销毁，bar依然持有对该作用域的引用，这个引用就是闭包！</p>\n<p>==无论通过何种手段将内部函数传递到所在的词法作用域以外，他都会持有对原始定义作用域的引用，无论在何处执行这个函数都会使用闭包。==</p>\n<pre><code class=\"JavaScript\">function wait(message)&#123;\n    setTimeout( function timer() &#123;\n        console.log(message);\n    &#125;,1000)\n&#125;\nwait(&#39;hello&#39;)\n</code></pre>\n<p>wait执行1000毫秒以后，他的内部作用域并不会消失，还能保持message的引用。</p>\n<p>==只要是使用了回调函数，实际上就是在使用闭包。==</p>\n<h3 id=\"闭包和循环\"><a href=\"#闭包和循环\" class=\"headerlink\" title=\"闭包和循环\"></a>闭包和循环</h3><pre><code class=\"JavaScript\">for(var i = 1;i &lt;= 5; i++;)&#123;\n    setTimeout(function timer() &#123;\n        console.log(i);\n    &#125;,1*1000)\n&#125;\n// 每秒一次输出五个6\n</code></pre>\n<p>这个循环终止的条件是6.条件首次成立的时候i === 6<br>，因此输出的显示是循环结束时i的值。<br>因为这里所用的i，是同一个作用域下的i，所有的函数共享一个i。</p>\n<pre><code class=\"JavaScript\">for(var i = 1;i &lt;= 5; i++;)&#123;\n    (function() &#123;\n        setTimeout(function timer() &#123;\n            console.log(i);\n        &#125;,1*1000)\n    &#125;();\n&#125;\n//这样也不行\n</code></pre>\n<p>因为我们的IIFE的作用域是空的，我们使用的依然是外层的i，他要包含一点实质的内容才能够我们使用。</p>\n<pre><code class=\"JavaScript\">for(var i = 1;i &lt;= 5; i++;)&#123;\n    (function(j) &#123;\n        setTimeout(function timer() &#123;\n            console.log(j);\n        &#125;,j*1000)\n    &#125;(i);\n&#125;\n// 这样就达到我们预期的目的，每秒一个，一次输出1-5\n</code></pre>\n<h3 id=\"重返块作用域\"><a href=\"#重返块作用域\" class=\"headerlink\" title=\"重返块作用域\"></a>重返块作用域</h3><p>前面说let可以劫持块级作用域，，并且在这个块级作用域中声明一个变量。看下面代码</p>\n<pre><code class=\"JavaScript\">for(var i = 1; i &lt;= 5; i++) &#123;\n    let j = i;\n    setTimeout(function timer() &#123;\n        console.log(j);\n    &#125;,j*1000)\n&#125;;\n</code></pre>\n<p>还可以更完善</p>\n<pre><code class=\"JavaScript\">for(let i = 1; i &lt;= 5; i++) &#123;\n    setTimeout(function timer() &#123;\n        console.log(i);\n    &#125;,i*1000)\n&#125;;\n</code></pre>\n<h3 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h3><pre><code class=\"JavaScript\">function foo()&#123;\n    var a = &#39;cool&#39;;\n    var b = [1,2,3];\n    function bar() &#123;\n        console.log(a);\n    &#125;\n    function baz() &#123;\n        console.log(b);\n    &#125;\n&#125;\n</code></pre>\n<p>这里并没有明显的闭包，只有两个私有数据变量a和b，以及bar和baz两个内部函数，他们的词法作用域就是闭包，<br>也就是foo（）的内部作用域。</p>\n<pre><code class=\"JavaScript\">function CoolModule() &#123;\n    var something = &#39;cool&#39;;\n    var another = [1,2,3];\n    function doSomething() &#123;\n        console.log(something));\n    &#125;\n    function doAnother() &#123;\n        console.log(another.join(&quot;!&quot;));\n    &#125;\n    return &#123;\n        doSomething: doSomething,\n        doAnother: doAnother,\n    &#125;;\n&#125;\nvar foo = CoolModule;\nfoo.doSomething(); // cool\nfoo.doAnother(); // 1!2!3\n</code></pre>\n<p>首先，CoolModule() 只是一个函数，必须通过调用它来创建一个模块实例，如果不执行外部函数，内部作用域和闭包都无法被创建。</p>\n<p>其次，CoolModule() 返回一个用对象字面量语法来表示的对象，这个返回的对象中含有内部函数，而不是内部数据变量的引用。我们保持内部数据变量是隐藏且私有状态。</p>\n<p>这个对象类型的返回值最终被赋值给外部变量foo，然后我们就可以通过它来访问API中的属性方法。 </p>\n<blockquote>\n<p>模块模式必须具有两个条件</p>\n</blockquote>\n<ol>\n<li>必须有外部的封闭函数，该函数必须至少被调用一次。（每次调用都会创建一个新的模块实例）</li>\n<li>封闭函数必须返回至少一个内部函数，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态。</li>\n</ol>\n<p>一个具有函数属性的对象本身并不是真正的模块。从方便观察角度来看，一个从函数调用所返回的，只有数据属性而没有闭包函数的对象并不是真正的模块。</p>\n<p>改进上面的代码</p>\n<pre><code class=\"JavaScript\">var foo = (function CoolModule() &#123;\n    var something = &#39;cool&#39;;\n    var another = [1,2,3];\n    function doSomething() &#123;\n        console.log(something));\n    &#125;\n    function doAnother() &#123;\n        console.log(another.join(&quot;!&quot;));\n    &#125;\n    return &#123;\n        doSomething: doSomething,\n        doAnother: doAnother,\n    &#125;;\n&#125;)();\n\nfoo.doSomething(); // cool\nfoo.doAnother(); // 1!2!3\n</code></pre>\n<p>模块是普通函数，因此也可以传参。</p>\n<pre><code class=\"JavaScript\">function CoolModule(id) &#123;\n    function doSomething() &#123;\n        console.log(id);\n    &#125;\n    return &#123;\n        doSomething: doSomething,\n    &#125;;\n&#125;\nvar foo = CoolModule(&#39;foo&#39;);\nfoo.doSomething(); // foo\n</code></pre>\n<blockquote>\n<p>模块另一个简单但又强大的用法是命名将要作为公共API返回的对象。</p>\n</blockquote>\n<pre><code class=\"JavaScript\">var foo = (function Cool(id)&#123;\n    function change() &#123;\n        publicAPI.identify = identify2;\n    &#125;;\n    function identify1() &#123;\n        console.log(id);\n    &#125;;\n    function identify2() &#123;\n        console.log(id.toUppeCase());\n    &#125;;\n    var publicAPI = &#123;\n        change: change,\n        identify: identify1\n    &#125;\n    return publicAPI;\n&#125;)(&#39;foo module&#39;);\n\nfoo.identify(); // foo module\nfoo.change();\nfoo.identify(); // FOO MODULE\n</code></pre>\n<p>通过模块在实例的内部保留的公共API对象的内部引用，可以从内部对模块实例进行修改，包括添加或删除方法，以及修改他们的值。</p>\n<h2 id=\"现代的模块机制\"><a href=\"#现代的模块机制\" class=\"headerlink\" title=\"现代的模块机制\"></a>现代的模块机制</h2><p>创建一个模块</p>\n<pre><code class=\"JavaScript\">var MyModules = (function Manager()&#123;\n    // 存储方法\n    var modules = &#123;&#125;;\n    \n    // 添加方法\n    function define(name,deps,impl)&#123;\n        for(var i = 0;i &lt; deps.length; i++) &#123;\n            deps[i] = modules[deps[i]];\n        &#125;\n        modules[name] = impl.apply(impl,deps);\n    &#125;\n    \n    // 根据名字获取方法\n    function get(name) &#123;\n        return modules[name];\n    &#125;\n    \n    // 返回内部函数（方法）\n    return &#123;\n        define: define,\n        get: get\n    &#125;\n&#125;)()\n</code></pre>\n<p>Function.apply(obj,args)方法能接收两个参数</p>\n<p>obj：这个对象将代替Function类里this对象</p>\n<p>args：这个是数组，它将作为参数传给Function(args–&gt;arguments)</p>\n<p>使用它来定义模块：</p>\n<pre><code class=\"JavaScript\">MyModules.define(&quot;bar&quot;,[], function() &#123;\n    function hello(who) &#123;\n        return &quot;let me introduce:&quot; + who;\n    &#125;\n    retrun &#123;\n        hello : hello\n    &#125;;\n&#125;);\n\nMyModules.define(&quot;foo&quot;,[&#39;bar&#39;], function(bar) &#123;\n    var hungry = &#39;hippo&#39;;\n    function awesome(who) &#123;\n        console.log(bar.hello(hungry).toUpperCase());\n    &#125;\n    retrun &#123;\n        awesome : awesome\n    &#125;;\n&#125;);\n\nvar bar = MyModules.get(&#39;bar&#39;);\nvar foo = MyModules.get(&#39;foo&#39;);\n\nconsole.log(bar.hello(&#39;hippo&#39;));// let me introduce: hippo\n\nfoo.awesome(); // 大写的\n</code></pre>\n<p>foo 和 bar 都是通过一个返回的公共的API的函数来定义的。foo 甚至接受 bar 的实例作为依赖参数，并且相应地使用它。</p>\n"},{"title":"函数中的作用域","type":"javaScript","_content":"\n函数中的作用域\n---\njs有基于函数的作用域，每声明一个函数都会为其自身创建一个气泡，可以在附属气泡里获取外层的变量，但是不能从外层气泡中获取附属气泡种的变量\n\n隐藏内部实现\n---\n>暴露在外面的写法，很不安全\n```JavaScript\nfunction foo(a) {\n    b = a + fff(a * 2);\n    console.log(b * 3);\n}\nfunction fff(a) {\n    return a - 1;\n}\n\nvar b;\nfoo(2) // 15\n```\n\n>隐藏的写法\n\n```JavaScript\nfunction foo(a) {\n    function fff(a) {\n        return a - 1;\n    }\n    var b;\n    b = a + fff(a * 2);\n    console.log(b * 3);\n}\nfoo(2) // 15\n```\n\n>规避冲突，\n可以避免同名标识符之间的冲突，避免被覆盖\n\n方法：\n1. 全局命名空间，在全局声明一个独特的变量，通常是一个对象，所有需要暴露给外界的功能都会成为这个对象的属性，而不是将自己的标识符暴露在顶级的词法作用域种。\n2. 模块管理，从众多模块中挑选一个来使用，任何库都无需将标识符加入到全局作用域中。\n\n\n函数作用域\n---\n在任意代码片段外部添加包装函数都可以将内部的变量和函数定义‘隐藏’起来，外部作用域无法访问包装函数内部的任何内容\n\n通过定义一个函数来达到是变量在函数作用域之内，虽然可以解决问题，但是并不理想，因为这个函数名称本身污染了所在的作用域，其次是必须通过显式的调用这个函数才能运行其中的代码。\n\n\n```JavaScript\nvar a = 2;\n(function foo(){\n    var a = 3;\n    console.log( a ); // 3\n})();\nconsole.log( a ); // 2\n\n```\n这样函数会被当作函数表达式而不是一个标准的函数声明来处理。-- 如果function是声明中的第一个第一个词，那么就是函数声明，否则就是函数表达式。\n\n函数表达式和函数声明最大的区别是它们的名称标识符将会绑定在何处。  foo只能在所代表的位置中被访问，外部不行。\n\n匿名和具名\n---\n>匿名函数表达式\n```JavaScript\nsetTimeout( function(){\n    console.log('aaa');\n},1000);\n```\nfun没有标识符，函数声明则是不可以省略函数名称\n\n1. 匿名函数在栈追踪中不会显示出有意义的函数名称，使得调用很困难。\n2. 如果没有函数名，需要引用的时候就只能使用已经过期的arguments.callee引用，比如在递归中\n3. 匿名函数省略了对于代码的可读性/可理解性很重要的函数名\n\n行内函数表达式\n```JavaScript\nsetTimeout( function timeoutHandler(){\n    console.log('aaa');\n},1000);\n```\n\n立即执行函数表达式\n---\n\n```JavaScript\nvar a = 2;\n(function foo(){\n    var a = 3;\n    console.log( a ); // 3\n})();\nconsole.log( a ); // 2\n```\n第一个（）将函数变成了表达式，第二个（）执行了这个函数\n\n>IIFE代表立即执行函数表达式\n```JavaScript\nvar a = 2;\n(function IIFE(){ //传统的形式\n    var a = 3;\n    console.log( a ); // 3\n})();\nconsole.log( a ); // 2\n```\n==以上两种写法功能上是一样的==\n\n用途：\n\n可以传参数进去\n```JavaScript\nvar a = 2;\n(function IIFE(global){ //传统的形式\n    var a = 3;\n    console.log( a ); // 3\n    console.log( global.a ); // 3\n})(window);\nconsole.log( a ); // 2\n```\n\n块作用域\n---\n除了函数能产生一个作用域气泡，for循环，if，with,try/catch等都会产生一个作用域气泡。\n\n块作用域指的是变量和函数不仅可以属于所处的作用域，也可以属于某个代码块，通常指{..}的内部\n>var\n\n其实val一个变量无论在什么地方，都会提升到全局变量，把它写在作用域内部，只是为了风格更易读而伪装出的形式上的块作用域，如果使用这种，要确保在其他地方没有重复的使用同名的变量。\n\n>let\n\nES6引入了关键字let，可以将变量绑定到所在的任意作用域中，为其声明的变量隐式的劫持了所在的块作用域。\n\nlet进行声明的不会在代码在块作用域中进行提升，声明的代码在运行前，声明并不‘存在’。\n```JavaScript\n{\n    console.log(a); // ReferenceError(没有找到)\n    let a = 2;\n}\n\n```\nlet 声明附属于一个新的作用域而不是当前函数作用域（也不属于全局作用域）\n\n>const\n\n同样可以用来创建块作用域变量，但其值是固定的，之后的任何试图修改值的操作都会引起错误。\n\n```JavaScript\nvar foo = true;\nif(foo){\n    var a = 2;\n    const b = 3;\n    a = 4; // 正确\n    b = 6; // 错误\n}\nconsole.log(a) // 4\nconsole.log(b) // ReferenceError\n```\n任何声明在某个作用域内部的变量，都将附属于这个作用域\n\n小思考\n---\n\n```JavaScript\na = 2;\nval a;\nconsole.log(a);//2\n```\n输出2的原因是：声明会提升，也就是先声明再赋值，在执行查询\n\n```JavaScript\nconsole.log(a); // undefind\nvar a = 2;\n\n// 执行顺序\n\nval a;\nconsole.log(a); // undefind\na = 2;\n```\n原因：函数声明会提升，然后执行查询，此时是没有赋值的，所以是undefind\n\n\n```JavaScript\nfoo(); // 不是ReferenceError，而是TypeEerror\n\nvar foo = funcyion bar() {\n    //...\n};\n```\n原因：函数表达式不会被提升\n\n>函数优先\n\n函数声明和变量声明都会被提升，但是一个值得注意的细节是函数会被首先提升，然后才是变量。\n\n```JavaScript\nfoo(); //1\nvar foo;\nfunction foo() {\n    console.log(1);\n}\nfoo = function() {\n    console.log(2);\n}\n```\n输出的是1而不是2是因为函数声明先被提升到上面，然后在执行。var foo 尽管出现在function foo... 之前，但是他是重复声明会被忽略。\n>后面的声明会覆盖掉前面的声明\n\n```JavaScript\nfoo(); //3\nfunction foo() {\n    console.log(1);\n}\nvar foo = function() {\n    console.log(2);\n}\nfunction foo() {\n    console.log(3);\n}\n```\n\n\n\n\n","source":"_posts/函数作用域、作用域快.md","raw":"---\ntitle: 函数中的作用域\ntag: javaScript\ntype: javaScript\n---\n\n函数中的作用域\n---\njs有基于函数的作用域，每声明一个函数都会为其自身创建一个气泡，可以在附属气泡里获取外层的变量，但是不能从外层气泡中获取附属气泡种的变量\n\n隐藏内部实现\n---\n>暴露在外面的写法，很不安全\n```JavaScript\nfunction foo(a) {\n    b = a + fff(a * 2);\n    console.log(b * 3);\n}\nfunction fff(a) {\n    return a - 1;\n}\n\nvar b;\nfoo(2) // 15\n```\n\n>隐藏的写法\n\n```JavaScript\nfunction foo(a) {\n    function fff(a) {\n        return a - 1;\n    }\n    var b;\n    b = a + fff(a * 2);\n    console.log(b * 3);\n}\nfoo(2) // 15\n```\n\n>规避冲突，\n可以避免同名标识符之间的冲突，避免被覆盖\n\n方法：\n1. 全局命名空间，在全局声明一个独特的变量，通常是一个对象，所有需要暴露给外界的功能都会成为这个对象的属性，而不是将自己的标识符暴露在顶级的词法作用域种。\n2. 模块管理，从众多模块中挑选一个来使用，任何库都无需将标识符加入到全局作用域中。\n\n\n函数作用域\n---\n在任意代码片段外部添加包装函数都可以将内部的变量和函数定义‘隐藏’起来，外部作用域无法访问包装函数内部的任何内容\n\n通过定义一个函数来达到是变量在函数作用域之内，虽然可以解决问题，但是并不理想，因为这个函数名称本身污染了所在的作用域，其次是必须通过显式的调用这个函数才能运行其中的代码。\n\n\n```JavaScript\nvar a = 2;\n(function foo(){\n    var a = 3;\n    console.log( a ); // 3\n})();\nconsole.log( a ); // 2\n\n```\n这样函数会被当作函数表达式而不是一个标准的函数声明来处理。-- 如果function是声明中的第一个第一个词，那么就是函数声明，否则就是函数表达式。\n\n函数表达式和函数声明最大的区别是它们的名称标识符将会绑定在何处。  foo只能在所代表的位置中被访问，外部不行。\n\n匿名和具名\n---\n>匿名函数表达式\n```JavaScript\nsetTimeout( function(){\n    console.log('aaa');\n},1000);\n```\nfun没有标识符，函数声明则是不可以省略函数名称\n\n1. 匿名函数在栈追踪中不会显示出有意义的函数名称，使得调用很困难。\n2. 如果没有函数名，需要引用的时候就只能使用已经过期的arguments.callee引用，比如在递归中\n3. 匿名函数省略了对于代码的可读性/可理解性很重要的函数名\n\n行内函数表达式\n```JavaScript\nsetTimeout( function timeoutHandler(){\n    console.log('aaa');\n},1000);\n```\n\n立即执行函数表达式\n---\n\n```JavaScript\nvar a = 2;\n(function foo(){\n    var a = 3;\n    console.log( a ); // 3\n})();\nconsole.log( a ); // 2\n```\n第一个（）将函数变成了表达式，第二个（）执行了这个函数\n\n>IIFE代表立即执行函数表达式\n```JavaScript\nvar a = 2;\n(function IIFE(){ //传统的形式\n    var a = 3;\n    console.log( a ); // 3\n})();\nconsole.log( a ); // 2\n```\n==以上两种写法功能上是一样的==\n\n用途：\n\n可以传参数进去\n```JavaScript\nvar a = 2;\n(function IIFE(global){ //传统的形式\n    var a = 3;\n    console.log( a ); // 3\n    console.log( global.a ); // 3\n})(window);\nconsole.log( a ); // 2\n```\n\n块作用域\n---\n除了函数能产生一个作用域气泡，for循环，if，with,try/catch等都会产生一个作用域气泡。\n\n块作用域指的是变量和函数不仅可以属于所处的作用域，也可以属于某个代码块，通常指{..}的内部\n>var\n\n其实val一个变量无论在什么地方，都会提升到全局变量，把它写在作用域内部，只是为了风格更易读而伪装出的形式上的块作用域，如果使用这种，要确保在其他地方没有重复的使用同名的变量。\n\n>let\n\nES6引入了关键字let，可以将变量绑定到所在的任意作用域中，为其声明的变量隐式的劫持了所在的块作用域。\n\nlet进行声明的不会在代码在块作用域中进行提升，声明的代码在运行前，声明并不‘存在’。\n```JavaScript\n{\n    console.log(a); // ReferenceError(没有找到)\n    let a = 2;\n}\n\n```\nlet 声明附属于一个新的作用域而不是当前函数作用域（也不属于全局作用域）\n\n>const\n\n同样可以用来创建块作用域变量，但其值是固定的，之后的任何试图修改值的操作都会引起错误。\n\n```JavaScript\nvar foo = true;\nif(foo){\n    var a = 2;\n    const b = 3;\n    a = 4; // 正确\n    b = 6; // 错误\n}\nconsole.log(a) // 4\nconsole.log(b) // ReferenceError\n```\n任何声明在某个作用域内部的变量，都将附属于这个作用域\n\n小思考\n---\n\n```JavaScript\na = 2;\nval a;\nconsole.log(a);//2\n```\n输出2的原因是：声明会提升，也就是先声明再赋值，在执行查询\n\n```JavaScript\nconsole.log(a); // undefind\nvar a = 2;\n\n// 执行顺序\n\nval a;\nconsole.log(a); // undefind\na = 2;\n```\n原因：函数声明会提升，然后执行查询，此时是没有赋值的，所以是undefind\n\n\n```JavaScript\nfoo(); // 不是ReferenceError，而是TypeEerror\n\nvar foo = funcyion bar() {\n    //...\n};\n```\n原因：函数表达式不会被提升\n\n>函数优先\n\n函数声明和变量声明都会被提升，但是一个值得注意的细节是函数会被首先提升，然后才是变量。\n\n```JavaScript\nfoo(); //1\nvar foo;\nfunction foo() {\n    console.log(1);\n}\nfoo = function() {\n    console.log(2);\n}\n```\n输出的是1而不是2是因为函数声明先被提升到上面，然后在执行。var foo 尽管出现在function foo... 之前，但是他是重复声明会被忽略。\n>后面的声明会覆盖掉前面的声明\n\n```JavaScript\nfoo(); //3\nfunction foo() {\n    console.log(1);\n}\nvar foo = function() {\n    console.log(2);\n}\nfunction foo() {\n    console.log(3);\n}\n```\n\n\n\n\n","slug":"函数作用域、作用域快","published":1,"date":"2021-07-19T06:37:12.303Z","updated":"2021-07-19T08:40:42.097Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckragdtd7000ehban7j3n38xu","content":"<h2 id=\"函数中的作用域\"><a href=\"#函数中的作用域\" class=\"headerlink\" title=\"函数中的作用域\"></a>函数中的作用域</h2><p>js有基于函数的作用域，每声明一个函数都会为其自身创建一个气泡，可以在附属气泡里获取外层的变量，但是不能从外层气泡中获取附属气泡种的变量</p>\n<h2 id=\"隐藏内部实现\"><a href=\"#隐藏内部实现\" class=\"headerlink\" title=\"隐藏内部实现\"></a>隐藏内部实现</h2><blockquote>\n<p>暴露在外面的写法，很不安全</p>\n</blockquote>\n<pre><code class=\"JavaScript\">function foo(a) &#123;\n    b = a + fff(a * 2);\n    console.log(b * 3);\n&#125;\nfunction fff(a) &#123;\n    return a - 1;\n&#125;\n\nvar b;\nfoo(2) // 15\n</code></pre>\n<blockquote>\n<p>隐藏的写法</p>\n</blockquote>\n<pre><code class=\"JavaScript\">function foo(a) &#123;\n    function fff(a) &#123;\n        return a - 1;\n    &#125;\n    var b;\n    b = a + fff(a * 2);\n    console.log(b * 3);\n&#125;\nfoo(2) // 15\n</code></pre>\n<blockquote>\n<p>规避冲突，<br>可以避免同名标识符之间的冲突，避免被覆盖</p>\n</blockquote>\n<p>方法：</p>\n<ol>\n<li>全局命名空间，在全局声明一个独特的变量，通常是一个对象，所有需要暴露给外界的功能都会成为这个对象的属性，而不是将自己的标识符暴露在顶级的词法作用域种。</li>\n<li>模块管理，从众多模块中挑选一个来使用，任何库都无需将标识符加入到全局作用域中。</li>\n</ol>\n<h2 id=\"函数作用域\"><a href=\"#函数作用域\" class=\"headerlink\" title=\"函数作用域\"></a>函数作用域</h2><p>在任意代码片段外部添加包装函数都可以将内部的变量和函数定义‘隐藏’起来，外部作用域无法访问包装函数内部的任何内容</p>\n<p>通过定义一个函数来达到是变量在函数作用域之内，虽然可以解决问题，但是并不理想，因为这个函数名称本身污染了所在的作用域，其次是必须通过显式的调用这个函数才能运行其中的代码。</p>\n<pre><code class=\"JavaScript\">var a = 2;\n(function foo()&#123;\n    var a = 3;\n    console.log( a ); // 3\n&#125;)();\nconsole.log( a ); // 2\n</code></pre>\n<p>这样函数会被当作函数表达式而不是一个标准的函数声明来处理。– 如果function是声明中的第一个第一个词，那么就是函数声明，否则就是函数表达式。</p>\n<p>函数表达式和函数声明最大的区别是它们的名称标识符将会绑定在何处。  foo只能在所代表的位置中被访问，外部不行。</p>\n<h2 id=\"匿名和具名\"><a href=\"#匿名和具名\" class=\"headerlink\" title=\"匿名和具名\"></a>匿名和具名</h2><blockquote>\n<p>匿名函数表达式</p>\n</blockquote>\n<pre><code class=\"JavaScript\">setTimeout( function()&#123;\n    console.log(&#39;aaa&#39;);\n&#125;,1000);\n</code></pre>\n<p>fun没有标识符，函数声明则是不可以省略函数名称</p>\n<ol>\n<li>匿名函数在栈追踪中不会显示出有意义的函数名称，使得调用很困难。</li>\n<li>如果没有函数名，需要引用的时候就只能使用已经过期的arguments.callee引用，比如在递归中</li>\n<li>匿名函数省略了对于代码的可读性/可理解性很重要的函数名</li>\n</ol>\n<p>行内函数表达式</p>\n<pre><code class=\"JavaScript\">setTimeout( function timeoutHandler()&#123;\n    console.log(&#39;aaa&#39;);\n&#125;,1000);\n</code></pre>\n<h2 id=\"立即执行函数表达式\"><a href=\"#立即执行函数表达式\" class=\"headerlink\" title=\"立即执行函数表达式\"></a>立即执行函数表达式</h2><pre><code class=\"JavaScript\">var a = 2;\n(function foo()&#123;\n    var a = 3;\n    console.log( a ); // 3\n&#125;)();\nconsole.log( a ); // 2\n</code></pre>\n<p>第一个（）将函数变成了表达式，第二个（）执行了这个函数</p>\n<blockquote>\n<p>IIFE代表立即执行函数表达式</p>\n</blockquote>\n<pre><code class=\"JavaScript\">var a = 2;\n(function IIFE()&#123; //传统的形式\n    var a = 3;\n    console.log( a ); // 3\n&#125;)();\nconsole.log( a ); // 2\n</code></pre>\n<p>==以上两种写法功能上是一样的==</p>\n<p>用途：</p>\n<p>可以传参数进去</p>\n<pre><code class=\"JavaScript\">var a = 2;\n(function IIFE(global)&#123; //传统的形式\n    var a = 3;\n    console.log( a ); // 3\n    console.log( global.a ); // 3\n&#125;)(window);\nconsole.log( a ); // 2\n</code></pre>\n<h2 id=\"块作用域\"><a href=\"#块作用域\" class=\"headerlink\" title=\"块作用域\"></a>块作用域</h2><p>除了函数能产生一个作用域气泡，for循环，if，with,try/catch等都会产生一个作用域气泡。</p>\n<p>块作用域指的是变量和函数不仅可以属于所处的作用域，也可以属于某个代码块，通常指{..}的内部</p>\n<blockquote>\n<p>var</p>\n</blockquote>\n<p>其实val一个变量无论在什么地方，都会提升到全局变量，把它写在作用域内部，只是为了风格更易读而伪装出的形式上的块作用域，如果使用这种，要确保在其他地方没有重复的使用同名的变量。</p>\n<blockquote>\n<p>let</p>\n</blockquote>\n<p>ES6引入了关键字let，可以将变量绑定到所在的任意作用域中，为其声明的变量隐式的劫持了所在的块作用域。</p>\n<p>let进行声明的不会在代码在块作用域中进行提升，声明的代码在运行前，声明并不‘存在’。</p>\n<pre><code class=\"JavaScript\">&#123;\n    console.log(a); // ReferenceError(没有找到)\n    let a = 2;\n&#125;\n</code></pre>\n<p>let 声明附属于一个新的作用域而不是当前函数作用域（也不属于全局作用域）</p>\n<blockquote>\n<p>const</p>\n</blockquote>\n<p>同样可以用来创建块作用域变量，但其值是固定的，之后的任何试图修改值的操作都会引起错误。</p>\n<pre><code class=\"JavaScript\">var foo = true;\nif(foo)&#123;\n    var a = 2;\n    const b = 3;\n    a = 4; // 正确\n    b = 6; // 错误\n&#125;\nconsole.log(a) // 4\nconsole.log(b) // ReferenceError\n</code></pre>\n<p>任何声明在某个作用域内部的变量，都将附属于这个作用域</p>\n<h2 id=\"小思考\"><a href=\"#小思考\" class=\"headerlink\" title=\"小思考\"></a>小思考</h2><pre><code class=\"JavaScript\">a = 2;\nval a;\nconsole.log(a);//2\n</code></pre>\n<p>输出2的原因是：声明会提升，也就是先声明再赋值，在执行查询</p>\n<pre><code class=\"JavaScript\">console.log(a); // undefind\nvar a = 2;\n\n// 执行顺序\n\nval a;\nconsole.log(a); // undefind\na = 2;\n</code></pre>\n<p>原因：函数声明会提升，然后执行查询，此时是没有赋值的，所以是undefind</p>\n<pre><code class=\"JavaScript\">foo(); // 不是ReferenceError，而是TypeEerror\n\nvar foo = funcyion bar() &#123;\n    //...\n&#125;;\n</code></pre>\n<p>原因：函数表达式不会被提升</p>\n<blockquote>\n<p>函数优先</p>\n</blockquote>\n<p>函数声明和变量声明都会被提升，但是一个值得注意的细节是函数会被首先提升，然后才是变量。</p>\n<pre><code class=\"JavaScript\">foo(); //1\nvar foo;\nfunction foo() &#123;\n    console.log(1);\n&#125;\nfoo = function() &#123;\n    console.log(2);\n&#125;\n</code></pre>\n<p>输出的是1而不是2是因为函数声明先被提升到上面，然后在执行。var foo 尽管出现在function foo… 之前，但是他是重复声明会被忽略。</p>\n<blockquote>\n<p>后面的声明会覆盖掉前面的声明</p>\n</blockquote>\n<pre><code class=\"JavaScript\">foo(); //3\nfunction foo() &#123;\n    console.log(1);\n&#125;\nvar foo = function() &#123;\n    console.log(2);\n&#125;\nfunction foo() &#123;\n    console.log(3);\n&#125;\n</code></pre>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"他的技术真了不得","link_list":[{"name":"江橙","link":"https://blogs.chenghuizi.com/","avatar":"/imgs/motuo1.jpeg","descr":"今天你学习了么？"},{"name":"娄豪杰","link":"https://louhaojie99.top/","avatar":"/imgs/motuo2.jpeg","descr":"人生就像品茗，懂得吃苦，才能回甘啊"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h2 id=\"函数中的作用域\"><a href=\"#函数中的作用域\" class=\"headerlink\" title=\"函数中的作用域\"></a>函数中的作用域</h2><p>js有基于函数的作用域，每声明一个函数都会为其自身创建一个气泡，可以在附属气泡里获取外层的变量，但是不能从外层气泡中获取附属气泡种的变量</p>\n<h2 id=\"隐藏内部实现\"><a href=\"#隐藏内部实现\" class=\"headerlink\" title=\"隐藏内部实现\"></a>隐藏内部实现</h2><blockquote>\n<p>暴露在外面的写法，很不安全</p>\n</blockquote>\n<pre><code class=\"JavaScript\">function foo(a) &#123;\n    b = a + fff(a * 2);\n    console.log(b * 3);\n&#125;\nfunction fff(a) &#123;\n    return a - 1;\n&#125;\n\nvar b;\nfoo(2) // 15\n</code></pre>\n<blockquote>\n<p>隐藏的写法</p>\n</blockquote>\n<pre><code class=\"JavaScript\">function foo(a) &#123;\n    function fff(a) &#123;\n        return a - 1;\n    &#125;\n    var b;\n    b = a + fff(a * 2);\n    console.log(b * 3);\n&#125;\nfoo(2) // 15\n</code></pre>\n<blockquote>\n<p>规避冲突，<br>可以避免同名标识符之间的冲突，避免被覆盖</p>\n</blockquote>\n<p>方法：</p>\n<ol>\n<li>全局命名空间，在全局声明一个独特的变量，通常是一个对象，所有需要暴露给外界的功能都会成为这个对象的属性，而不是将自己的标识符暴露在顶级的词法作用域种。</li>\n<li>模块管理，从众多模块中挑选一个来使用，任何库都无需将标识符加入到全局作用域中。</li>\n</ol>\n<h2 id=\"函数作用域\"><a href=\"#函数作用域\" class=\"headerlink\" title=\"函数作用域\"></a>函数作用域</h2><p>在任意代码片段外部添加包装函数都可以将内部的变量和函数定义‘隐藏’起来，外部作用域无法访问包装函数内部的任何内容</p>\n<p>通过定义一个函数来达到是变量在函数作用域之内，虽然可以解决问题，但是并不理想，因为这个函数名称本身污染了所在的作用域，其次是必须通过显式的调用这个函数才能运行其中的代码。</p>\n<pre><code class=\"JavaScript\">var a = 2;\n(function foo()&#123;\n    var a = 3;\n    console.log( a ); // 3\n&#125;)();\nconsole.log( a ); // 2\n</code></pre>\n<p>这样函数会被当作函数表达式而不是一个标准的函数声明来处理。– 如果function是声明中的第一个第一个词，那么就是函数声明，否则就是函数表达式。</p>\n<p>函数表达式和函数声明最大的区别是它们的名称标识符将会绑定在何处。  foo只能在所代表的位置中被访问，外部不行。</p>\n<h2 id=\"匿名和具名\"><a href=\"#匿名和具名\" class=\"headerlink\" title=\"匿名和具名\"></a>匿名和具名</h2><blockquote>\n<p>匿名函数表达式</p>\n</blockquote>\n<pre><code class=\"JavaScript\">setTimeout( function()&#123;\n    console.log(&#39;aaa&#39;);\n&#125;,1000);\n</code></pre>\n<p>fun没有标识符，函数声明则是不可以省略函数名称</p>\n<ol>\n<li>匿名函数在栈追踪中不会显示出有意义的函数名称，使得调用很困难。</li>\n<li>如果没有函数名，需要引用的时候就只能使用已经过期的arguments.callee引用，比如在递归中</li>\n<li>匿名函数省略了对于代码的可读性/可理解性很重要的函数名</li>\n</ol>\n<p>行内函数表达式</p>\n<pre><code class=\"JavaScript\">setTimeout( function timeoutHandler()&#123;\n    console.log(&#39;aaa&#39;);\n&#125;,1000);\n</code></pre>\n<h2 id=\"立即执行函数表达式\"><a href=\"#立即执行函数表达式\" class=\"headerlink\" title=\"立即执行函数表达式\"></a>立即执行函数表达式</h2><pre><code class=\"JavaScript\">var a = 2;\n(function foo()&#123;\n    var a = 3;\n    console.log( a ); // 3\n&#125;)();\nconsole.log( a ); // 2\n</code></pre>\n<p>第一个（）将函数变成了表达式，第二个（）执行了这个函数</p>\n<blockquote>\n<p>IIFE代表立即执行函数表达式</p>\n</blockquote>\n<pre><code class=\"JavaScript\">var a = 2;\n(function IIFE()&#123; //传统的形式\n    var a = 3;\n    console.log( a ); // 3\n&#125;)();\nconsole.log( a ); // 2\n</code></pre>\n<p>==以上两种写法功能上是一样的==</p>\n<p>用途：</p>\n<p>可以传参数进去</p>\n<pre><code class=\"JavaScript\">var a = 2;\n(function IIFE(global)&#123; //传统的形式\n    var a = 3;\n    console.log( a ); // 3\n    console.log( global.a ); // 3\n&#125;)(window);\nconsole.log( a ); // 2\n</code></pre>\n<h2 id=\"块作用域\"><a href=\"#块作用域\" class=\"headerlink\" title=\"块作用域\"></a>块作用域</h2><p>除了函数能产生一个作用域气泡，for循环，if，with,try/catch等都会产生一个作用域气泡。</p>\n<p>块作用域指的是变量和函数不仅可以属于所处的作用域，也可以属于某个代码块，通常指{..}的内部</p>\n<blockquote>\n<p>var</p>\n</blockquote>\n<p>其实val一个变量无论在什么地方，都会提升到全局变量，把它写在作用域内部，只是为了风格更易读而伪装出的形式上的块作用域，如果使用这种，要确保在其他地方没有重复的使用同名的变量。</p>\n<blockquote>\n<p>let</p>\n</blockquote>\n<p>ES6引入了关键字let，可以将变量绑定到所在的任意作用域中，为其声明的变量隐式的劫持了所在的块作用域。</p>\n<p>let进行声明的不会在代码在块作用域中进行提升，声明的代码在运行前，声明并不‘存在’。</p>\n<pre><code class=\"JavaScript\">&#123;\n    console.log(a); // ReferenceError(没有找到)\n    let a = 2;\n&#125;\n</code></pre>\n<p>let 声明附属于一个新的作用域而不是当前函数作用域（也不属于全局作用域）</p>\n<blockquote>\n<p>const</p>\n</blockquote>\n<p>同样可以用来创建块作用域变量，但其值是固定的，之后的任何试图修改值的操作都会引起错误。</p>\n<pre><code class=\"JavaScript\">var foo = true;\nif(foo)&#123;\n    var a = 2;\n    const b = 3;\n    a = 4; // 正确\n    b = 6; // 错误\n&#125;\nconsole.log(a) // 4\nconsole.log(b) // ReferenceError\n</code></pre>\n<p>任何声明在某个作用域内部的变量，都将附属于这个作用域</p>\n<h2 id=\"小思考\"><a href=\"#小思考\" class=\"headerlink\" title=\"小思考\"></a>小思考</h2><pre><code class=\"JavaScript\">a = 2;\nval a;\nconsole.log(a);//2\n</code></pre>\n<p>输出2的原因是：声明会提升，也就是先声明再赋值，在执行查询</p>\n<pre><code class=\"JavaScript\">console.log(a); // undefind\nvar a = 2;\n\n// 执行顺序\n\nval a;\nconsole.log(a); // undefind\na = 2;\n</code></pre>\n<p>原因：函数声明会提升，然后执行查询，此时是没有赋值的，所以是undefind</p>\n<pre><code class=\"JavaScript\">foo(); // 不是ReferenceError，而是TypeEerror\n\nvar foo = funcyion bar() &#123;\n    //...\n&#125;;\n</code></pre>\n<p>原因：函数表达式不会被提升</p>\n<blockquote>\n<p>函数优先</p>\n</blockquote>\n<p>函数声明和变量声明都会被提升，但是一个值得注意的细节是函数会被首先提升，然后才是变量。</p>\n<pre><code class=\"JavaScript\">foo(); //1\nvar foo;\nfunction foo() &#123;\n    console.log(1);\n&#125;\nfoo = function() &#123;\n    console.log(2);\n&#125;\n</code></pre>\n<p>输出的是1而不是2是因为函数声明先被提升到上面，然后在执行。var foo 尽管出现在function foo… 之前，但是他是重复声明会被忽略。</p>\n<blockquote>\n<p>后面的声明会覆盖掉前面的声明</p>\n</blockquote>\n<pre><code class=\"JavaScript\">foo(); //3\nfunction foo() &#123;\n    console.log(1);\n&#125;\nvar foo = function() &#123;\n    console.log(2);\n&#125;\nfunction foo() &#123;\n    console.log(3);\n&#125;\n</code></pre>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckragdtd40008hban3jwzcq18","tag_id":"ckragdtd10006hban9bpi4o1m","_id":"ckragdtd6000bhban32vd5zak"},{"post_id":"ckragdtcw0004hbanemrw5h4o","tag_id":"ckragdtd10006hban9bpi4o1m","_id":"ckragdtd6000dhban06w9cfjo"},{"post_id":"ckragdtd6000chband7otfj40","tag_id":"ckragdtd10006hban9bpi4o1m","_id":"ckragdtd8000ghbanc8fb99ca"},{"post_id":"ckragdtd00005hban2pd3g7o3","tag_id":"ckragdtd5000ahban9uopce6u","_id":"ckragdtd8000hhbanewqoaukk"},{"post_id":"ckragdtd7000ehban7j3n38xu","tag_id":"ckragdtd10006hban9bpi4o1m","_id":"ckragdtd8000jhbang2jthcpa"},{"post_id":"ckragdtd30007hban7e68by8o","tag_id":"ckragdtd10006hban9bpi4o1m","_id":"ckragdtd9000khbaneanraq52"},{"post_id":"ckragdtd40009hban4pju6w2g","tag_id":"ckragdtd8000ihban9mio90t1","_id":"ckragdtd9000lhban8zea29ck"}],"Tag":[{"name":"javaScript","_id":"ckragdtd10006hban9bpi4o1m"},{"name":"markdown","_id":"ckragdtd5000ahban9uopce6u"},{"name":"javsScript","_id":"ckragdtd8000ihban9mio90t1"}]}}